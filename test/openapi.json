{
  "openapi": "3.0.1",
  "info": {
    "contact": {
      "email": "support@weclapp.com",
      "name": "weclapp",
      "url": "https://www.weclapp.com"
    },
    "title": "weclapp API",
    "version": "1"
  },
  "servers": [
    {
      "url": "{protocol}://{host}:{port}/webapp/api/v1",
      "variables": {
        "host": {
          "default": "localhost"
        },
        "port": {
          "default": "80"
        },
        "protocol": {
          "default": "https",
          "enum": [
            "http",
            "https"
          ]
        }
      }
    }
  ],
  "security": [
    {
      "api-token": []
    }
  ],
  "tags": [],
  "paths": {
    "/accountingTransaction": {
      "get": {
        "description": "query accountingTransaction",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/accountingTransaction"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "accountingTransaction response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query accountingTransaction",
        "tags": [
          "accountingTransaction"
        ]
      }
    },
    "/accountingTransaction/count": {
      "get": {
        "description": "count accountingTransaction",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count accountingTransaction",
        "tags": [
          "accountingTransaction"
        ]
      }
    },
    "/accountingTransaction/id/{id}": {
      "get": {
        "description": "query a specific accountingTransaction",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/accountingTransaction"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific accountingTransaction",
        "tags": [
          "accountingTransaction"
        ]
      }
    },
    "/archivedEmail": {
      "get": {
        "description": "query archivedEmail",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/archivedEmail"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "archivedEmail response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query archivedEmail",
        "tags": [
          "archivedEmail"
        ]
      }
    },
    "/archivedEmail/count": {
      "get": {
        "description": "count archivedEmail",
        "parameters": [
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count archivedEmail",
        "tags": [
          "archivedEmail"
        ]
      }
    },
    "/archivedEmail/id/{id}": {
      "get": {
        "description": "query a specific archivedEmail",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/archivedEmail"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific archivedEmail",
        "tags": [
          "archivedEmail"
        ]
      }
    },
    "/archivedEmail/id/{id}/removeReference": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entityId": {
                    "type": "string"
                  },
                  "entityName": {
                    "type": "string"
                  }
                },
                "required": [
                  "entityId",
                  "entityName"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "removeReference response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "archivedEmail"
        ]
      }
    },
    "/article": {
      "get": {
        "description": "query article",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "additionalProperties",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "additionalProperties": {
                      "properties": {
                        "averagePrice": {
                          "items": {
                            "$ref": "#/components/schemas/amount"
                          },
                          "type": "array"
                        },
                        "currentSalesPrice": {
                          "items": {
                            "$ref": "#/components/schemas/priceData"
                          },
                          "type": "array"
                        },
                        "pickableStockQuantity": {
                          "items": {
                            "items": {
                              "$ref": "#/components/schemas/warehouseQuantity"
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "reservedStockQuantity": {
                          "items": {
                            "items": {
                              "$ref": "#/components/schemas/warehouseQuantity"
                            },
                            "type": "array"
                          },
                          "type": "array"
                        },
                        "totalStockQuantity": {
                          "items": {
                            "items": {
                              "$ref": "#/components/schemas/warehouseQuantity"
                            },
                            "type": "array"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/article"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "article response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query article",
        "tags": [
          "article"
        ]
      },
      "post": {
        "description": "create a article",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/article"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/article"
                }
              }
            },
            "description": "article create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a article",
        "tags": [
          "article"
        ]
      }
    },
    "/article/count": {
      "get": {
        "description": "count article",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count article",
        "tags": [
          "article"
        ]
      }
    },
    "/article/id/{id}": {
      "delete": {
        "description": "delete a article",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "article delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a article",
        "tags": [
          "article"
        ]
      },
      "get": {
        "description": "query a specific article",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/article"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific article",
        "tags": [
          "article"
        ]
      },
      "put": {
        "description": "update article",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/article"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/article"
                }
              }
            },
            "description": "article update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a article",
        "tags": [
          "article"
        ]
      }
    },
    "/article/id/{id}/createDatasheetPdf": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "commercialLanguageId": {
                    "type": "string"
                  },
                  "salesChannel": {
                    "enum": [
                      "GROSS1",
                      "GROSS10",
                      "GROSS100",
                      "GROSS101",
                      "GROSS102",
                      "GROSS103",
                      "GROSS104",
                      "GROSS105",
                      "GROSS106",
                      "GROSS107",
                      "GROSS108",
                      "GROSS109",
                      "GROSS11",
                      "GROSS110",
                      "GROSS111",
                      "GROSS112",
                      "GROSS113",
                      "GROSS114",
                      "GROSS115",
                      "GROSS116",
                      "GROSS117",
                      "GROSS118",
                      "GROSS119",
                      "GROSS12",
                      "GROSS120",
                      "GROSS121",
                      "GROSS122",
                      "GROSS123",
                      "GROSS124",
                      "GROSS125",
                      "GROSS126",
                      "GROSS127",
                      "GROSS128",
                      "GROSS129",
                      "GROSS13",
                      "GROSS130",
                      "GROSS131",
                      "GROSS132",
                      "GROSS133",
                      "GROSS134",
                      "GROSS135",
                      "GROSS136",
                      "GROSS137",
                      "GROSS138",
                      "GROSS139",
                      "GROSS14",
                      "GROSS140",
                      "GROSS141",
                      "GROSS142",
                      "GROSS143",
                      "GROSS144",
                      "GROSS145",
                      "GROSS146",
                      "GROSS147",
                      "GROSS148",
                      "GROSS149",
                      "GROSS15",
                      "GROSS150",
                      "GROSS151",
                      "GROSS152",
                      "GROSS153",
                      "GROSS154",
                      "GROSS155",
                      "GROSS156",
                      "GROSS157",
                      "GROSS158",
                      "GROSS159",
                      "GROSS16",
                      "GROSS160",
                      "GROSS161",
                      "GROSS162",
                      "GROSS163",
                      "GROSS164",
                      "GROSS165",
                      "GROSS166",
                      "GROSS167",
                      "GROSS168",
                      "GROSS169",
                      "GROSS17",
                      "GROSS170",
                      "GROSS171",
                      "GROSS172",
                      "GROSS173",
                      "GROSS174",
                      "GROSS175",
                      "GROSS176",
                      "GROSS177",
                      "GROSS178",
                      "GROSS179",
                      "GROSS18",
                      "GROSS180",
                      "GROSS181",
                      "GROSS182",
                      "GROSS183",
                      "GROSS184",
                      "GROSS185",
                      "GROSS186",
                      "GROSS187",
                      "GROSS188",
                      "GROSS189",
                      "GROSS19",
                      "GROSS190",
                      "GROSS191",
                      "GROSS192",
                      "GROSS193",
                      "GROSS194",
                      "GROSS195",
                      "GROSS196",
                      "GROSS197",
                      "GROSS198",
                      "GROSS199",
                      "GROSS2",
                      "GROSS20",
                      "GROSS200",
                      "GROSS201",
                      "GROSS202",
                      "GROSS203",
                      "GROSS204",
                      "GROSS205",
                      "GROSS206",
                      "GROSS207",
                      "GROSS208",
                      "GROSS209",
                      "GROSS21",
                      "GROSS210",
                      "GROSS211",
                      "GROSS212",
                      "GROSS213",
                      "GROSS214",
                      "GROSS215",
                      "GROSS216",
                      "GROSS217",
                      "GROSS218",
                      "GROSS219",
                      "GROSS22",
                      "GROSS220",
                      "GROSS221",
                      "GROSS222",
                      "GROSS223",
                      "GROSS224",
                      "GROSS225",
                      "GROSS226",
                      "GROSS227",
                      "GROSS228",
                      "GROSS229",
                      "GROSS23",
                      "GROSS230",
                      "GROSS231",
                      "GROSS232",
                      "GROSS233",
                      "GROSS234",
                      "GROSS235",
                      "GROSS236",
                      "GROSS237",
                      "GROSS238",
                      "GROSS239",
                      "GROSS24",
                      "GROSS240",
                      "GROSS241",
                      "GROSS242",
                      "GROSS243",
                      "GROSS244",
                      "GROSS245",
                      "GROSS246",
                      "GROSS247",
                      "GROSS248",
                      "GROSS249",
                      "GROSS25",
                      "GROSS250",
                      "GROSS251",
                      "GROSS252",
                      "GROSS253",
                      "GROSS254",
                      "GROSS255",
                      "GROSS256",
                      "GROSS257",
                      "GROSS258",
                      "GROSS259",
                      "GROSS26",
                      "GROSS260",
                      "GROSS261",
                      "GROSS262",
                      "GROSS263",
                      "GROSS264",
                      "GROSS265",
                      "GROSS266",
                      "GROSS267",
                      "GROSS268",
                      "GROSS269",
                      "GROSS27",
                      "GROSS270",
                      "GROSS271",
                      "GROSS272",
                      "GROSS273",
                      "GROSS274",
                      "GROSS275",
                      "GROSS276",
                      "GROSS277",
                      "GROSS278",
                      "GROSS279",
                      "GROSS28",
                      "GROSS280",
                      "GROSS281",
                      "GROSS282",
                      "GROSS283",
                      "GROSS284",
                      "GROSS285",
                      "GROSS286",
                      "GROSS287",
                      "GROSS288",
                      "GROSS289",
                      "GROSS29",
                      "GROSS290",
                      "GROSS291",
                      "GROSS292",
                      "GROSS293",
                      "GROSS294",
                      "GROSS295",
                      "GROSS296",
                      "GROSS297",
                      "GROSS298",
                      "GROSS299",
                      "GROSS3",
                      "GROSS30",
                      "GROSS300",
                      "GROSS31",
                      "GROSS32",
                      "GROSS33",
                      "GROSS34",
                      "GROSS35",
                      "GROSS36",
                      "GROSS37",
                      "GROSS38",
                      "GROSS39",
                      "GROSS4",
                      "GROSS40",
                      "GROSS41",
                      "GROSS42",
                      "GROSS43",
                      "GROSS44",
                      "GROSS45",
                      "GROSS46",
                      "GROSS47",
                      "GROSS48",
                      "GROSS49",
                      "GROSS5",
                      "GROSS50",
                      "GROSS51",
                      "GROSS52",
                      "GROSS53",
                      "GROSS54",
                      "GROSS55",
                      "GROSS56",
                      "GROSS57",
                      "GROSS58",
                      "GROSS59",
                      "GROSS6",
                      "GROSS60",
                      "GROSS61",
                      "GROSS62",
                      "GROSS63",
                      "GROSS64",
                      "GROSS65",
                      "GROSS66",
                      "GROSS67",
                      "GROSS68",
                      "GROSS69",
                      "GROSS7",
                      "GROSS70",
                      "GROSS71",
                      "GROSS72",
                      "GROSS73",
                      "GROSS74",
                      "GROSS75",
                      "GROSS76",
                      "GROSS77",
                      "GROSS78",
                      "GROSS79",
                      "GROSS8",
                      "GROSS80",
                      "GROSS81",
                      "GROSS82",
                      "GROSS83",
                      "GROSS84",
                      "GROSS85",
                      "GROSS86",
                      "GROSS87",
                      "GROSS88",
                      "GROSS89",
                      "GROSS9",
                      "GROSS90",
                      "GROSS91",
                      "GROSS92",
                      "GROSS93",
                      "GROSS94",
                      "GROSS95",
                      "GROSS96",
                      "GROSS97",
                      "GROSS98",
                      "GROSS99",
                      "NET1",
                      "NET10",
                      "NET100",
                      "NET101",
                      "NET102",
                      "NET103",
                      "NET104",
                      "NET105",
                      "NET106",
                      "NET107",
                      "NET108",
                      "NET109",
                      "NET11",
                      "NET110",
                      "NET111",
                      "NET112",
                      "NET113",
                      "NET114",
                      "NET115",
                      "NET116",
                      "NET117",
                      "NET118",
                      "NET119",
                      "NET12",
                      "NET120",
                      "NET121",
                      "NET122",
                      "NET123",
                      "NET124",
                      "NET125",
                      "NET126",
                      "NET127",
                      "NET128",
                      "NET129",
                      "NET13",
                      "NET130",
                      "NET131",
                      "NET132",
                      "NET133",
                      "NET134",
                      "NET135",
                      "NET136",
                      "NET137",
                      "NET138",
                      "NET139",
                      "NET14",
                      "NET140",
                      "NET141",
                      "NET142",
                      "NET143",
                      "NET144",
                      "NET145",
                      "NET146",
                      "NET147",
                      "NET148",
                      "NET149",
                      "NET15",
                      "NET150",
                      "NET151",
                      "NET152",
                      "NET153",
                      "NET154",
                      "NET155",
                      "NET156",
                      "NET157",
                      "NET158",
                      "NET159",
                      "NET16",
                      "NET160",
                      "NET161",
                      "NET162",
                      "NET163",
                      "NET164",
                      "NET165",
                      "NET166",
                      "NET167",
                      "NET168",
                      "NET169",
                      "NET17",
                      "NET170",
                      "NET171",
                      "NET172",
                      "NET173",
                      "NET174",
                      "NET175",
                      "NET176",
                      "NET177",
                      "NET178",
                      "NET179",
                      "NET18",
                      "NET180",
                      "NET181",
                      "NET182",
                      "NET183",
                      "NET184",
                      "NET185",
                      "NET186",
                      "NET187",
                      "NET188",
                      "NET189",
                      "NET19",
                      "NET190",
                      "NET191",
                      "NET192",
                      "NET193",
                      "NET194",
                      "NET195",
                      "NET196",
                      "NET197",
                      "NET198",
                      "NET199",
                      "NET2",
                      "NET20",
                      "NET200",
                      "NET201",
                      "NET202",
                      "NET203",
                      "NET204",
                      "NET205",
                      "NET206",
                      "NET207",
                      "NET208",
                      "NET209",
                      "NET21",
                      "NET210",
                      "NET211",
                      "NET212",
                      "NET213",
                      "NET214",
                      "NET215",
                      "NET216",
                      "NET217",
                      "NET218",
                      "NET219",
                      "NET22",
                      "NET220",
                      "NET221",
                      "NET222",
                      "NET223",
                      "NET224",
                      "NET225",
                      "NET226",
                      "NET227",
                      "NET228",
                      "NET229",
                      "NET23",
                      "NET230",
                      "NET231",
                      "NET232",
                      "NET233",
                      "NET234",
                      "NET235",
                      "NET236",
                      "NET237",
                      "NET238",
                      "NET239",
                      "NET24",
                      "NET240",
                      "NET241",
                      "NET242",
                      "NET243",
                      "NET244",
                      "NET245",
                      "NET246",
                      "NET247",
                      "NET248",
                      "NET249",
                      "NET25",
                      "NET250",
                      "NET251",
                      "NET252",
                      "NET253",
                      "NET254",
                      "NET255",
                      "NET256",
                      "NET257",
                      "NET258",
                      "NET259",
                      "NET26",
                      "NET260",
                      "NET261",
                      "NET262",
                      "NET263",
                      "NET264",
                      "NET265",
                      "NET266",
                      "NET267",
                      "NET268",
                      "NET269",
                      "NET27",
                      "NET270",
                      "NET271",
                      "NET272",
                      "NET273",
                      "NET274",
                      "NET275",
                      "NET276",
                      "NET277",
                      "NET278",
                      "NET279",
                      "NET28",
                      "NET280",
                      "NET281",
                      "NET282",
                      "NET283",
                      "NET284",
                      "NET285",
                      "NET286",
                      "NET287",
                      "NET288",
                      "NET289",
                      "NET29",
                      "NET290",
                      "NET291",
                      "NET292",
                      "NET293",
                      "NET294",
                      "NET295",
                      "NET296",
                      "NET297",
                      "NET298",
                      "NET299",
                      "NET3",
                      "NET30",
                      "NET300",
                      "NET31",
                      "NET32",
                      "NET33",
                      "NET34",
                      "NET35",
                      "NET36",
                      "NET37",
                      "NET38",
                      "NET39",
                      "NET4",
                      "NET40",
                      "NET41",
                      "NET42",
                      "NET43",
                      "NET44",
                      "NET45",
                      "NET46",
                      "NET47",
                      "NET48",
                      "NET49",
                      "NET5",
                      "NET50",
                      "NET51",
                      "NET52",
                      "NET53",
                      "NET54",
                      "NET55",
                      "NET56",
                      "NET57",
                      "NET58",
                      "NET59",
                      "NET6",
                      "NET60",
                      "NET61",
                      "NET62",
                      "NET63",
                      "NET64",
                      "NET65",
                      "NET66",
                      "NET67",
                      "NET68",
                      "NET69",
                      "NET7",
                      "NET70",
                      "NET71",
                      "NET72",
                      "NET73",
                      "NET74",
                      "NET75",
                      "NET76",
                      "NET77",
                      "NET78",
                      "NET79",
                      "NET8",
                      "NET80",
                      "NET81",
                      "NET82",
                      "NET83",
                      "NET84",
                      "NET85",
                      "NET86",
                      "NET87",
                      "NET88",
                      "NET89",
                      "NET9",
                      "NET90",
                      "NET91",
                      "NET92",
                      "NET93",
                      "NET94",
                      "NET95",
                      "NET96",
                      "NET97",
                      "NET98",
                      "NET99"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "commercialLanguageId",
                  "salesChannel"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createDatasheetPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "article"
        ]
      }
    },
    "/article/id/{id}/createLabelPdf": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "printCount": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "startPosition": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "printCount",
                  "startPosition"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createLabelPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "article"
        ]
      }
    },
    "/article/id/{id}/downloadArticleImage": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "articleImageId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "preview",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadArticleImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "article"
        ]
      }
    },
    "/article/id/{id}/downloadMainArticleImage": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "preview",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadMainArticleImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "article"
        ]
      }
    },
    "/article/id/{id}/packagingUnitStructure": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/article"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "packagingUnitStructure response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "article"
        ]
      }
    },
    "/article/id/{id}/uploadArticleImage": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "mainImage",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "articleImageId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "uploadArticleImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "article"
        ]
      }
    },
    "/articleAccountingCode": {
      "get": {
        "description": "query articleAccountingCode",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "articleAccountingCode response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query articleAccountingCode",
        "tags": [
          "articleAccountingCode"
        ]
      },
      "post": {
        "description": "create a articleAccountingCode",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "articleAccountingCode create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a articleAccountingCode",
        "tags": [
          "articleAccountingCode"
        ]
      }
    },
    "/articleAccountingCode/count": {
      "get": {
        "description": "count articleAccountingCode",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count articleAccountingCode",
        "tags": [
          "articleAccountingCode"
        ]
      }
    },
    "/articleAccountingCode/id/{id}": {
      "delete": {
        "description": "delete a articleAccountingCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "articleAccountingCode delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a articleAccountingCode",
        "tags": [
          "articleAccountingCode"
        ]
      },
      "get": {
        "description": "query a specific articleAccountingCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific articleAccountingCode",
        "tags": [
          "articleAccountingCode"
        ]
      },
      "put": {
        "description": "update articleAccountingCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "articleAccountingCode update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a articleAccountingCode",
        "tags": [
          "articleAccountingCode"
        ]
      }
    },
    "/articleCategory": {
      "get": {
        "description": "query articleCategory",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/articleCategory"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "articleCategory response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query articleCategory",
        "tags": [
          "articleCategory"
        ]
      },
      "post": {
        "description": "create a articleCategory",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleCategory"
                }
              }
            },
            "description": "articleCategory create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a articleCategory",
        "tags": [
          "articleCategory"
        ]
      }
    },
    "/articleCategory/count": {
      "get": {
        "description": "count articleCategory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count articleCategory",
        "tags": [
          "articleCategory"
        ]
      }
    },
    "/articleCategory/id/{id}": {
      "delete": {
        "description": "delete a articleCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "articleCategory delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a articleCategory",
        "tags": [
          "articleCategory"
        ]
      },
      "get": {
        "description": "query a specific articleCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleCategory"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific articleCategory",
        "tags": [
          "articleCategory"
        ]
      },
      "put": {
        "description": "update articleCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleCategory"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleCategory"
                }
              }
            },
            "description": "articleCategory update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a articleCategory",
        "tags": [
          "articleCategory"
        ]
      }
    },
    "/articleCategory/id/{id}/downloadImage": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "imageId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "articleCategory"
        ]
      }
    },
    "/articleCategory/id/{id}/uploadImage": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "uploadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "articleCategory"
        ]
      }
    },
    "/articleItemGroup": {
      "get": {
        "description": "query articleItemGroup",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/articleItemGroup"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "articleItemGroup response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query articleItemGroup",
        "tags": [
          "articleItemGroup"
        ]
      },
      "post": {
        "description": "create a articleItemGroup",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleItemGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleItemGroup"
                }
              }
            },
            "description": "articleItemGroup create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a articleItemGroup",
        "tags": [
          "articleItemGroup"
        ]
      }
    },
    "/articleItemGroup/count": {
      "get": {
        "description": "count articleItemGroup",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count articleItemGroup",
        "tags": [
          "articleItemGroup"
        ]
      }
    },
    "/articleItemGroup/id/{id}": {
      "delete": {
        "description": "delete a articleItemGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "articleItemGroup delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a articleItemGroup",
        "tags": [
          "articleItemGroup"
        ]
      },
      "get": {
        "description": "query a specific articleItemGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleItemGroup"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific articleItemGroup",
        "tags": [
          "articleItemGroup"
        ]
      },
      "put": {
        "description": "update articleItemGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleItemGroup"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleItemGroup"
                }
              }
            },
            "description": "articleItemGroup update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a articleItemGroup",
        "tags": [
          "articleItemGroup"
        ]
      }
    },
    "/articlePrice": {
      "get": {
        "description": "query articlePrice",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/articlePrice"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "articlePrice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query articlePrice",
        "tags": [
          "articlePrice"
        ]
      }
    },
    "/articlePrice/count": {
      "get": {
        "description": "count articlePrice",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count articlePrice",
        "tags": [
          "articlePrice"
        ]
      }
    },
    "/articlePrice/id/{id}": {
      "get": {
        "description": "query a specific articlePrice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articlePrice"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific articlePrice",
        "tags": [
          "articlePrice"
        ]
      }
    },
    "/articleRating": {
      "get": {
        "description": "query articleRating",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "articleRating response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query articleRating",
        "tags": [
          "articleRating"
        ]
      },
      "post": {
        "description": "create a articleRating",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "articleRating create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a articleRating",
        "tags": [
          "articleRating"
        ]
      }
    },
    "/articleRating/count": {
      "get": {
        "description": "count articleRating",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count articleRating",
        "tags": [
          "articleRating"
        ]
      }
    },
    "/articleRating/id/{id}": {
      "delete": {
        "description": "delete a articleRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "articleRating delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a articleRating",
        "tags": [
          "articleRating"
        ]
      },
      "get": {
        "description": "query a specific articleRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific articleRating",
        "tags": [
          "articleRating"
        ]
      },
      "put": {
        "description": "update articleRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "articleRating update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a articleRating",
        "tags": [
          "articleRating"
        ]
      }
    },
    "/articleStatus": {
      "get": {
        "description": "query articleStatus",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "articleStatus response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query articleStatus",
        "tags": [
          "articleStatus"
        ]
      },
      "post": {
        "description": "create a articleStatus",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "articleStatus create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a articleStatus",
        "tags": [
          "articleStatus"
        ]
      }
    },
    "/articleStatus/count": {
      "get": {
        "description": "count articleStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count articleStatus",
        "tags": [
          "articleStatus"
        ]
      }
    },
    "/articleStatus/id/{id}": {
      "delete": {
        "description": "delete a articleStatus",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "articleStatus delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a articleStatus",
        "tags": [
          "articleStatus"
        ]
      },
      "get": {
        "description": "query a specific articleStatus",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific articleStatus",
        "tags": [
          "articleStatus"
        ]
      },
      "put": {
        "description": "update articleStatus",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "articleStatus update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a articleStatus",
        "tags": [
          "articleStatus"
        ]
      }
    },
    "/articleSupplySource": {
      "get": {
        "description": "query articleSupplySource",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/articleSupplySource"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "articleSupplySource response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query articleSupplySource",
        "tags": [
          "articleSupplySource"
        ]
      },
      "post": {
        "description": "create a articleSupplySource",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleSupplySource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleSupplySource"
                }
              }
            },
            "description": "articleSupplySource create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a articleSupplySource",
        "tags": [
          "articleSupplySource"
        ]
      }
    },
    "/articleSupplySource/count": {
      "get": {
        "description": "count articleSupplySource",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count articleSupplySource",
        "tags": [
          "articleSupplySource"
        ]
      }
    },
    "/articleSupplySource/id/{id}": {
      "delete": {
        "description": "delete a articleSupplySource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "articleSupplySource delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a articleSupplySource",
        "tags": [
          "articleSupplySource"
        ]
      },
      "get": {
        "description": "query a specific articleSupplySource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleSupplySource"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific articleSupplySource",
        "tags": [
          "articleSupplySource"
        ]
      },
      "put": {
        "description": "update articleSupplySource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/articleSupplySource"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/articleSupplySource"
                }
              }
            },
            "description": "articleSupplySource update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a articleSupplySource",
        "tags": [
          "articleSupplySource"
        ]
      }
    },
    "/attendance": {
      "get": {
        "description": "query attendance",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/attendance"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "attendance response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query attendance",
        "tags": [
          "attendance"
        ]
      },
      "post": {
        "description": "create a attendance",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attendance"
                }
              }
            },
            "description": "attendance create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a attendance",
        "tags": [
          "attendance"
        ]
      }
    },
    "/attendance/count": {
      "get": {
        "description": "count attendance",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count attendance",
        "tags": [
          "attendance"
        ]
      }
    },
    "/attendance/currentAttendance": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/attendance"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "currentAttendance response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "attendance"
        ]
      }
    },
    "/attendance/id/{id}": {
      "delete": {
        "description": "delete a attendance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "attendance delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a attendance",
        "tags": [
          "attendance"
        ]
      },
      "get": {
        "description": "query a specific attendance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attendance"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific attendance",
        "tags": [
          "attendance"
        ]
      },
      "put": {
        "description": "update attendance",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attendance"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/attendance"
                }
              }
            },
            "description": "attendance update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a attendance",
        "tags": [
          "attendance"
        ]
      }
    },
    "/attendance/logOff": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/attendance"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "logOff response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "attendance"
        ]
      }
    },
    "/attendance/logOn": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/attendance"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "logOn response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "attendance"
        ]
      }
    },
    "/bankAccount": {
      "get": {
        "description": "query bankAccount",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/bankAccount"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bankAccount response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query bankAccount",
        "tags": [
          "bankAccount"
        ]
      },
      "post": {
        "description": "create a bankAccount",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bankAccount"
                }
              }
            },
            "description": "bankAccount create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a bankAccount",
        "tags": [
          "bankAccount"
        ]
      }
    },
    "/bankAccount/count": {
      "get": {
        "description": "count bankAccount",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count bankAccount",
        "tags": [
          "bankAccount"
        ]
      }
    },
    "/bankAccount/id/{id}": {
      "delete": {
        "description": "delete a bankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "bankAccount delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a bankAccount",
        "tags": [
          "bankAccount"
        ]
      },
      "get": {
        "description": "query a specific bankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bankAccount"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific bankAccount",
        "tags": [
          "bankAccount"
        ]
      },
      "put": {
        "description": "update bankAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/bankAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/bankAccount"
                }
              }
            },
            "description": "bankAccount update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a bankAccount",
        "tags": [
          "bankAccount"
        ]
      }
    },
    "/batchNumber": {
      "get": {
        "description": "query batchNumber",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/batchNumber"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "batchNumber response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query batchNumber",
        "tags": [
          "batchNumber"
        ]
      }
    },
    "/batchNumber/count": {
      "get": {
        "description": "count batchNumber",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count batchNumber",
        "tags": [
          "batchNumber"
        ]
      }
    },
    "/batchNumber/id/{id}": {
      "get": {
        "description": "query a specific batchNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/batchNumber"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific batchNumber",
        "tags": [
          "batchNumber"
        ]
      }
    },
    "/blanketPurchaseOrder": {
      "get": {
        "description": "query blanketPurchaseOrder",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/blanketPurchaseOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "blanketPurchaseOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query blanketPurchaseOrder",
        "tags": [
          "blanketPurchaseOrder"
        ]
      },
      "post": {
        "description": "create a blanketPurchaseOrder",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/blanketPurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blanketPurchaseOrder"
                }
              }
            },
            "description": "blanketPurchaseOrder create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a blanketPurchaseOrder",
        "tags": [
          "blanketPurchaseOrder"
        ]
      }
    },
    "/blanketPurchaseOrder/count": {
      "get": {
        "description": "count blanketPurchaseOrder",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count blanketPurchaseOrder",
        "tags": [
          "blanketPurchaseOrder"
        ]
      }
    },
    "/blanketPurchaseOrder/id/{id}": {
      "delete": {
        "description": "delete a blanketPurchaseOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "blanketPurchaseOrder delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a blanketPurchaseOrder",
        "tags": [
          "blanketPurchaseOrder"
        ]
      },
      "get": {
        "description": "query a specific blanketPurchaseOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blanketPurchaseOrder"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific blanketPurchaseOrder",
        "tags": [
          "blanketPurchaseOrder"
        ]
      },
      "put": {
        "description": "update blanketPurchaseOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/blanketPurchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/blanketPurchaseOrder"
                }
              }
            },
            "description": "blanketPurchaseOrder update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a blanketPurchaseOrder",
        "tags": [
          "blanketPurchaseOrder"
        ]
      }
    },
    "/blanketPurchaseOrder/id/{id}/downloadLatestBlanketPurchaseOrderPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestBlanketPurchaseOrderPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "blanketPurchaseOrder"
        ]
      }
    },
    "/blanketPurchaseOrder/id/{id}/generateReleases": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "firstScheduledDeliveryDate": {
                    "format": "timestamp",
                    "type": "integer"
                  },
                  "fixReleasedQuantity": {
                    "type": "boolean"
                  },
                  "releasedQuantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "repeatInterval": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "repeatType": {
                    "enum": [
                      "DAY",
                      "MONTH",
                      "WEEK",
                      "YEAR"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "firstScheduledDeliveryDate",
                  "fixReleasedQuantity",
                  "repeatInterval",
                  "repeatType"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/blanketPurchaseOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "generateReleases response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "blanketPurchaseOrder"
        ]
      }
    },
    "/calendar": {
      "get": {
        "description": "query calendar",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/calendar"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "calendar response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query calendar",
        "tags": [
          "calendar"
        ]
      },
      "post": {
        "description": "create a calendar",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/calendar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendar"
                }
              }
            },
            "description": "calendar create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a calendar",
        "tags": [
          "calendar"
        ]
      }
    },
    "/calendar/count": {
      "get": {
        "description": "count calendar",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count calendar",
        "tags": [
          "calendar"
        ]
      }
    },
    "/calendar/id/{id}": {
      "delete": {
        "description": "delete a calendar",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "calendar delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a calendar",
        "tags": [
          "calendar"
        ]
      },
      "get": {
        "description": "query a specific calendar",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendar"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific calendar",
        "tags": [
          "calendar"
        ]
      },
      "put": {
        "description": "update calendar",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/calendar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendar"
                }
              }
            },
            "description": "calendar update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a calendar",
        "tags": [
          "calendar"
        ]
      }
    },
    "/calendar/id/{id}/deleteCalendarAndMoveEvents": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "replacementCalendarId": {
                    "type": "string"
                  }
                },
                "required": [
                  "replacementCalendarId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "deleteCalendarAndMoveEvents response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "calendar"
        ]
      }
    },
    "/calendar/id/{id}/importiCal": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "importiCal response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "calendar"
        ]
      }
    },
    "/calendarEvent": {
      "get": {
        "description": "query calendarEvent",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/calendarEvent"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "calendarEvent response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query calendarEvent",
        "tags": [
          "calendarEvent"
        ]
      },
      "post": {
        "description": "create a calendarEvent",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/calendarEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarEvent"
                }
              }
            },
            "description": "calendarEvent create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a calendarEvent",
        "tags": [
          "calendarEvent"
        ]
      }
    },
    "/calendarEvent/count": {
      "get": {
        "description": "count calendarEvent",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count calendarEvent",
        "tags": [
          "calendarEvent"
        ]
      }
    },
    "/calendarEvent/id/{id}": {
      "delete": {
        "description": "delete a calendarEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "calendarEvent delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a calendarEvent",
        "tags": [
          "calendarEvent"
        ]
      },
      "get": {
        "description": "query a specific calendarEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarEvent"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific calendarEvent",
        "tags": [
          "calendarEvent"
        ]
      },
      "put": {
        "description": "update calendarEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/calendarEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/calendarEvent"
                }
              }
            },
            "description": "calendarEvent update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a calendarEvent",
        "tags": [
          "calendarEvent"
        ]
      }
    },
    "/campaign": {
      "get": {
        "description": "query campaign",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/campaign"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "campaign response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query campaign",
        "tags": [
          "campaign"
        ]
      },
      "post": {
        "description": "create a campaign",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/campaign"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/campaign"
                }
              }
            },
            "description": "campaign create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a campaign",
        "tags": [
          "campaign"
        ]
      }
    },
    "/campaign/count": {
      "get": {
        "description": "count campaign",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count campaign",
        "tags": [
          "campaign"
        ]
      }
    },
    "/campaign/id/{id}": {
      "delete": {
        "description": "delete a campaign",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "campaign delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a campaign",
        "tags": [
          "campaign"
        ]
      },
      "get": {
        "description": "query a specific campaign",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/campaign"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific campaign",
        "tags": [
          "campaign"
        ]
      },
      "put": {
        "description": "update campaign",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/campaign"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/campaign"
                }
              }
            },
            "description": "campaign update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a campaign",
        "tags": [
          "campaign"
        ]
      }
    },
    "/campaignParticipant": {
      "get": {
        "description": "query campaignParticipant",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/campaignParticipant"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "campaignParticipant response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query campaignParticipant",
        "tags": [
          "campaignParticipant"
        ]
      },
      "post": {
        "description": "create a campaignParticipant",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/campaignParticipant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/campaignParticipant"
                }
              }
            },
            "description": "campaignParticipant create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a campaignParticipant",
        "tags": [
          "campaignParticipant"
        ]
      }
    },
    "/campaignParticipant/count": {
      "get": {
        "description": "count campaignParticipant",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count campaignParticipant",
        "tags": [
          "campaignParticipant"
        ]
      }
    },
    "/campaignParticipant/id/{id}": {
      "delete": {
        "description": "delete a campaignParticipant",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "campaignParticipant delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a campaignParticipant",
        "tags": [
          "campaignParticipant"
        ]
      },
      "get": {
        "description": "query a specific campaignParticipant",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/campaignParticipant"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific campaignParticipant",
        "tags": [
          "campaignParticipant"
        ]
      },
      "put": {
        "description": "update campaignParticipant",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/campaignParticipant"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/campaignParticipant"
                }
              }
            },
            "description": "campaignParticipant update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a campaignParticipant",
        "tags": [
          "campaignParticipant"
        ]
      }
    },
    "/cashAccount": {
      "get": {
        "description": "query cashAccount",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/cashAccount"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "cashAccount response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query cashAccount",
        "tags": [
          "cashAccount"
        ]
      },
      "post": {
        "description": "create a cashAccount",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cashAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cashAccount"
                }
              }
            },
            "description": "cashAccount create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a cashAccount",
        "tags": [
          "cashAccount"
        ]
      }
    },
    "/cashAccount/count": {
      "get": {
        "description": "count cashAccount",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count cashAccount",
        "tags": [
          "cashAccount"
        ]
      }
    },
    "/cashAccount/id/{id}": {
      "get": {
        "description": "query a specific cashAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cashAccount"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific cashAccount",
        "tags": [
          "cashAccount"
        ]
      },
      "put": {
        "description": "update cashAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/cashAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/cashAccount"
                }
              }
            },
            "description": "cashAccount update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a cashAccount",
        "tags": [
          "cashAccount"
        ]
      }
    },
    "/comment": {
      "get": {
        "description": "query comment",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/comment"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "comment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query comment",
        "tags": [
          "comment"
        ]
      },
      "post": {
        "description": "create a comment",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/comment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "comment create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a comment",
        "tags": [
          "comment"
        ]
      }
    },
    "/comment/count": {
      "get": {
        "description": "count comment",
        "parameters": [
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count comment",
        "tags": [
          "comment"
        ]
      }
    },
    "/comment/id/{id}": {
      "delete": {
        "description": "delete a comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "comment delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a comment",
        "tags": [
          "comment"
        ]
      },
      "get": {
        "description": "query a specific comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific comment",
        "tags": [
          "comment"
        ]
      },
      "put": {
        "description": "update comment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/comment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/comment"
                }
              }
            },
            "description": "comment update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a comment",
        "tags": [
          "comment"
        ]
      }
    },
    "/commercialLanguage": {
      "get": {
        "description": "query commercialLanguage",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/commercialLanguage"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "commercialLanguage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query commercialLanguage",
        "tags": [
          "commercialLanguage"
        ]
      }
    },
    "/commercialLanguage/count": {
      "get": {
        "description": "count commercialLanguage",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count commercialLanguage",
        "tags": [
          "commercialLanguage"
        ]
      }
    },
    "/commercialLanguage/id/{id}": {
      "get": {
        "description": "query a specific commercialLanguage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/commercialLanguage"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific commercialLanguage",
        "tags": [
          "commercialLanguage"
        ]
      }
    },
    "/companySize": {
      "get": {
        "description": "query companySize",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "companySize response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query companySize",
        "tags": [
          "companySize"
        ]
      },
      "post": {
        "description": "create a companySize",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "companySize create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a companySize",
        "tags": [
          "companySize"
        ]
      }
    },
    "/companySize/count": {
      "get": {
        "description": "count companySize",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count companySize",
        "tags": [
          "companySize"
        ]
      }
    },
    "/companySize/id/{id}": {
      "delete": {
        "description": "delete a companySize",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "companySize delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a companySize",
        "tags": [
          "companySize"
        ]
      },
      "get": {
        "description": "query a specific companySize",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific companySize",
        "tags": [
          "companySize"
        ]
      },
      "put": {
        "description": "update companySize",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "companySize update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a companySize",
        "tags": [
          "companySize"
        ]
      }
    },
    "/contact": {
      "get": {
        "deprecated": true,
        "description": "query contact",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/contact"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "contact response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query contact",
        "tags": [
          "contact"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "create a contact",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            },
            "description": "contact create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a contact",
        "tags": [
          "contact"
        ]
      }
    },
    "/contact/count": {
      "get": {
        "deprecated": true,
        "description": "count contact",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count contact",
        "tags": [
          "contact"
        ]
      }
    },
    "/contact/id/{id}": {
      "delete": {
        "deprecated": true,
        "description": "delete a contact",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "contact delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a contact",
        "tags": [
          "contact"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "query a specific contact",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific contact",
        "tags": [
          "contact"
        ]
      },
      "put": {
        "deprecated": true,
        "description": "update contact",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contact"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contact"
                }
              }
            },
            "description": "contact update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a contact",
        "tags": [
          "contact"
        ]
      }
    },
    "/contact/id/{id}/downloadImage": {
      "get": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "contact"
        ]
      }
    },
    "/contact/id/{id}/uploadImage": {
      "post": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "uploadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "contact"
        ]
      }
    },
    "/contract": {
      "get": {
        "description": "query contract",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/contract"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "contract response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query contract",
        "tags": [
          "contract"
        ]
      },
      "post": {
        "description": "create a contract",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contract"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contract"
                }
              }
            },
            "description": "contract create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a contract",
        "tags": [
          "contract"
        ]
      }
    },
    "/contract/count": {
      "get": {
        "description": "count contract",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count contract",
        "tags": [
          "contract"
        ]
      }
    },
    "/contract/id/{id}": {
      "delete": {
        "description": "delete a contract",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "contract delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a contract",
        "tags": [
          "contract"
        ]
      },
      "get": {
        "description": "query a specific contract",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contract"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific contract",
        "tags": [
          "contract"
        ]
      },
      "put": {
        "description": "update contract",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/contract"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contract"
                }
              }
            },
            "description": "contract update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a contract",
        "tags": [
          "contract"
        ]
      }
    },
    "/contract/id/{id}/createContractDocument": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createContractDocument response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "contract"
        ]
      }
    },
    "/contract/id/{id}/downloadLatestContractDocumentPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestContractDocumentPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "contract"
        ]
      }
    },
    "/contractAuthorizationUnit": {
      "get": {
        "description": "query contractAuthorizationUnit",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/contractAuthorizationUnit"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "contractAuthorizationUnit response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query contractAuthorizationUnit",
        "tags": [
          "contractAuthorizationUnit"
        ]
      }
    },
    "/contractAuthorizationUnit/count": {
      "get": {
        "description": "count contractAuthorizationUnit",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count contractAuthorizationUnit",
        "tags": [
          "contractAuthorizationUnit"
        ]
      }
    },
    "/contractAuthorizationUnit/id/{id}": {
      "get": {
        "description": "query a specific contractAuthorizationUnit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/contractAuthorizationUnit"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific contractAuthorizationUnit",
        "tags": [
          "contractAuthorizationUnit"
        ]
      }
    },
    "/contractBillingGroup": {
      "get": {
        "description": "query contractBillingGroup",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "contractBillingGroup response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query contractBillingGroup",
        "tags": [
          "contractBillingGroup"
        ]
      },
      "post": {
        "description": "create a contractBillingGroup",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "contractBillingGroup create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a contractBillingGroup",
        "tags": [
          "contractBillingGroup"
        ]
      }
    },
    "/contractBillingGroup/count": {
      "get": {
        "description": "count contractBillingGroup",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count contractBillingGroup",
        "tags": [
          "contractBillingGroup"
        ]
      }
    },
    "/contractBillingGroup/id/{id}": {
      "delete": {
        "description": "delete a contractBillingGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "contractBillingGroup delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a contractBillingGroup",
        "tags": [
          "contractBillingGroup"
        ]
      },
      "get": {
        "description": "query a specific contractBillingGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific contractBillingGroup",
        "tags": [
          "contractBillingGroup"
        ]
      },
      "put": {
        "description": "update contractBillingGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "contractBillingGroup update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a contractBillingGroup",
        "tags": [
          "contractBillingGroup"
        ]
      }
    },
    "/contractTerminationReason": {
      "get": {
        "description": "query contractTerminationReason",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "contractTerminationReason response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query contractTerminationReason",
        "tags": [
          "contractTerminationReason"
        ]
      },
      "post": {
        "description": "create a contractTerminationReason",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "contractTerminationReason create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a contractTerminationReason",
        "tags": [
          "contractTerminationReason"
        ]
      }
    },
    "/contractTerminationReason/count": {
      "get": {
        "description": "count contractTerminationReason",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count contractTerminationReason",
        "tags": [
          "contractTerminationReason"
        ]
      }
    },
    "/contractTerminationReason/id/{id}": {
      "delete": {
        "description": "delete a contractTerminationReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "contractTerminationReason delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a contractTerminationReason",
        "tags": [
          "contractTerminationReason"
        ]
      },
      "get": {
        "description": "query a specific contractTerminationReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific contractTerminationReason",
        "tags": [
          "contractTerminationReason"
        ]
      },
      "put": {
        "description": "update contractTerminationReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "contractTerminationReason update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a contractTerminationReason",
        "tags": [
          "contractTerminationReason"
        ]
      }
    },
    "/costCenter": {
      "get": {
        "description": "query costCenter",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/costCenter"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "costCenter response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query costCenter",
        "tags": [
          "costCenter"
        ]
      },
      "post": {
        "description": "create a costCenter",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/costCenter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/costCenter"
                }
              }
            },
            "description": "costCenter create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a costCenter",
        "tags": [
          "costCenter"
        ]
      }
    },
    "/costCenter/count": {
      "get": {
        "description": "count costCenter",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count costCenter",
        "tags": [
          "costCenter"
        ]
      }
    },
    "/costCenter/id/{id}": {
      "delete": {
        "description": "delete a costCenter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "costCenter delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a costCenter",
        "tags": [
          "costCenter"
        ]
      },
      "get": {
        "description": "query a specific costCenter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/costCenter"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific costCenter",
        "tags": [
          "costCenter"
        ]
      },
      "put": {
        "description": "update costCenter",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/costCenter"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/costCenter"
                }
              }
            },
            "description": "costCenter update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a costCenter",
        "tags": [
          "costCenter"
        ]
      }
    },
    "/costCenterGroup": {
      "get": {
        "description": "query costCenterGroup",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "costCenterGroup response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query costCenterGroup",
        "tags": [
          "costCenterGroup"
        ]
      },
      "post": {
        "description": "create a costCenterGroup",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "costCenterGroup create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a costCenterGroup",
        "tags": [
          "costCenterGroup"
        ]
      }
    },
    "/costCenterGroup/count": {
      "get": {
        "description": "count costCenterGroup",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count costCenterGroup",
        "tags": [
          "costCenterGroup"
        ]
      }
    },
    "/costCenterGroup/id/{id}": {
      "delete": {
        "description": "delete a costCenterGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "costCenterGroup delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a costCenterGroup",
        "tags": [
          "costCenterGroup"
        ]
      },
      "get": {
        "description": "query a specific costCenterGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific costCenterGroup",
        "tags": [
          "costCenterGroup"
        ]
      },
      "put": {
        "description": "update costCenterGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "costCenterGroup update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a costCenterGroup",
        "tags": [
          "costCenterGroup"
        ]
      }
    },
    "/costType": {
      "get": {
        "description": "query costType",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/costType"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "costType response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query costType",
        "tags": [
          "costType"
        ]
      },
      "post": {
        "description": "create a costType",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/costType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/costType"
                }
              }
            },
            "description": "costType create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a costType",
        "tags": [
          "costType"
        ]
      }
    },
    "/costType/count": {
      "get": {
        "description": "count costType",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count costType",
        "tags": [
          "costType"
        ]
      }
    },
    "/costType/id/{id}": {
      "delete": {
        "description": "delete a costType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "costType delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a costType",
        "tags": [
          "costType"
        ]
      },
      "get": {
        "description": "query a specific costType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/costType"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific costType",
        "tags": [
          "costType"
        ]
      },
      "put": {
        "description": "update costType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/costType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/costType"
                }
              }
            },
            "description": "costType update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a costType",
        "tags": [
          "costType"
        ]
      }
    },
    "/crmCallCategory": {
      "get": {
        "description": "query crmCallCategory",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "crmCallCategory response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query crmCallCategory",
        "tags": [
          "crmCallCategory"
        ]
      },
      "post": {
        "description": "create a crmCallCategory",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "crmCallCategory create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a crmCallCategory",
        "tags": [
          "crmCallCategory"
        ]
      }
    },
    "/crmCallCategory/count": {
      "get": {
        "description": "count crmCallCategory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count crmCallCategory",
        "tags": [
          "crmCallCategory"
        ]
      }
    },
    "/crmCallCategory/id/{id}": {
      "delete": {
        "description": "delete a crmCallCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "crmCallCategory delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a crmCallCategory",
        "tags": [
          "crmCallCategory"
        ]
      },
      "get": {
        "description": "query a specific crmCallCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific crmCallCategory",
        "tags": [
          "crmCallCategory"
        ]
      },
      "put": {
        "description": "update crmCallCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "crmCallCategory update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a crmCallCategory",
        "tags": [
          "crmCallCategory"
        ]
      }
    },
    "/crmEvent": {
      "get": {
        "description": "query crmEvent",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/crmEvent"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "crmEvent response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query crmEvent",
        "tags": [
          "crmEvent"
        ]
      },
      "post": {
        "description": "create a crmEvent",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/crmEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/crmEvent"
                }
              }
            },
            "description": "crmEvent create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a crmEvent",
        "tags": [
          "crmEvent"
        ]
      }
    },
    "/crmEvent/count": {
      "get": {
        "description": "count crmEvent",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count crmEvent",
        "tags": [
          "crmEvent"
        ]
      }
    },
    "/crmEvent/id/{id}": {
      "delete": {
        "description": "delete a crmEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "crmEvent delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a crmEvent",
        "tags": [
          "crmEvent"
        ]
      },
      "get": {
        "description": "query a specific crmEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/crmEvent"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific crmEvent",
        "tags": [
          "crmEvent"
        ]
      },
      "put": {
        "description": "update crmEvent",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/crmEvent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/crmEvent"
                }
              }
            },
            "description": "crmEvent update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a crmEvent",
        "tags": [
          "crmEvent"
        ]
      }
    },
    "/crmEventCategory": {
      "get": {
        "description": "query crmEventCategory",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "crmEventCategory response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query crmEventCategory",
        "tags": [
          "crmEventCategory"
        ]
      },
      "post": {
        "description": "create a crmEventCategory",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "crmEventCategory create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a crmEventCategory",
        "tags": [
          "crmEventCategory"
        ]
      }
    },
    "/crmEventCategory/count": {
      "get": {
        "description": "count crmEventCategory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count crmEventCategory",
        "tags": [
          "crmEventCategory"
        ]
      }
    },
    "/crmEventCategory/id/{id}": {
      "delete": {
        "description": "delete a crmEventCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "crmEventCategory delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a crmEventCategory",
        "tags": [
          "crmEventCategory"
        ]
      },
      "get": {
        "description": "query a specific crmEventCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific crmEventCategory",
        "tags": [
          "crmEventCategory"
        ]
      },
      "put": {
        "description": "update crmEventCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "crmEventCategory update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a crmEventCategory",
        "tags": [
          "crmEventCategory"
        ]
      }
    },
    "/currency": {
      "get": {
        "description": "query currency",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/currency"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "currency response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query currency",
        "tags": [
          "currency"
        ]
      }
    },
    "/currency/companyCurrency": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/currency"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "companyCurrency response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "currency"
        ]
      }
    },
    "/currency/count": {
      "get": {
        "description": "count currency",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count currency",
        "tags": [
          "currency"
        ]
      }
    },
    "/currency/id/{id}": {
      "get": {
        "description": "query a specific currency",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/currency"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific currency",
        "tags": [
          "currency"
        ]
      }
    },
    "/customAttributeDefinition": {
      "get": {
        "description": "query customAttributeDefinition",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customAttributeDefinition"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "customAttributeDefinition response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query customAttributeDefinition",
        "tags": [
          "customAttributeDefinition"
        ]
      },
      "post": {
        "description": "create a customAttributeDefinition",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customAttributeDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customAttributeDefinition"
                }
              }
            },
            "description": "customAttributeDefinition create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a customAttributeDefinition",
        "tags": [
          "customAttributeDefinition"
        ]
      }
    },
    "/customAttributeDefinition/count": {
      "get": {
        "description": "count customAttributeDefinition",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count customAttributeDefinition",
        "tags": [
          "customAttributeDefinition"
        ]
      }
    },
    "/customAttributeDefinition/id/{id}": {
      "delete": {
        "description": "delete a customAttributeDefinition",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "customAttributeDefinition delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a customAttributeDefinition",
        "tags": [
          "customAttributeDefinition"
        ]
      },
      "get": {
        "description": "query a specific customAttributeDefinition",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customAttributeDefinition"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific customAttributeDefinition",
        "tags": [
          "customAttributeDefinition"
        ]
      },
      "put": {
        "description": "update customAttributeDefinition",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customAttributeDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customAttributeDefinition"
                }
              }
            },
            "description": "customAttributeDefinition update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a customAttributeDefinition",
        "tags": [
          "customAttributeDefinition"
        ]
      }
    },
    "/customAttributeDefinition/readOrder": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "entityType",
            "required": true,
            "schema": {
              "enum": [
                "article",
                "articleSupplySource",
                "batchNumber",
                "blanketPurchaseOrder",
                "campaign",
                "competitor",
                "contract",
                "contractItem",
                "crmEvent",
                "customer",
                "incomingGoods",
                "incomingGoodsItem",
                "opportunity",
                "party",
                "performanceRecord",
                "performanceRecordItem",
                "productionOrder",
                "productionOrderItem",
                "project",
                "purchaseInvoice",
                "purchaseInvoiceItem",
                "purchaseOrder",
                "purchaseOrderItem",
                "purchaseOrderRequest",
                "purchaseRequisition",
                "quotation",
                "quotationItem",
                "recurringInvoice",
                "recurringInvoiceItem",
                "salesInvoice",
                "salesInvoiceItem",
                "salesOrder",
                "salesOrderItem",
                "serialNumber",
                "shipment",
                "shipmentItem",
                "storageLocation",
                "storagePlace",
                "supplier",
                "task",
                "ticket",
                "timeRecord",
                "transportationOrder",
                "user",
                "warehouse",
                "warehouseStockMovement"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customAttributeDefinitionOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "readOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "customAttributeDefinition"
        ]
      }
    },
    "/customAttributeDefinition/updateOrder": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entityType": {
                    "enum": [
                      "article",
                      "articleSupplySource",
                      "batchNumber",
                      "blanketPurchaseOrder",
                      "campaign",
                      "competitor",
                      "contract",
                      "contractItem",
                      "crmEvent",
                      "customer",
                      "incomingGoods",
                      "incomingGoodsItem",
                      "opportunity",
                      "party",
                      "performanceRecord",
                      "performanceRecordItem",
                      "productionOrder",
                      "productionOrderItem",
                      "project",
                      "purchaseInvoice",
                      "purchaseInvoiceItem",
                      "purchaseOrder",
                      "purchaseOrderItem",
                      "purchaseOrderRequest",
                      "purchaseRequisition",
                      "quotation",
                      "quotationItem",
                      "recurringInvoice",
                      "recurringInvoiceItem",
                      "salesInvoice",
                      "salesInvoiceItem",
                      "salesOrder",
                      "salesOrderItem",
                      "serialNumber",
                      "shipment",
                      "shipmentItem",
                      "storageLocation",
                      "storagePlace",
                      "supplier",
                      "task",
                      "ticket",
                      "timeRecord",
                      "transportationOrder",
                      "user",
                      "warehouse",
                      "warehouseStockMovement"
                    ],
                    "type": "string"
                  },
                  "order": {
                    "items": {
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "overrideGroupName": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "entityType",
                  "order"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customAttributeDefinitionOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "updateOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "customAttributeDefinition"
        ]
      }
    },
    "/customer": {
      "get": {
        "deprecated": true,
        "description": "query customer",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customer"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "customer response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query customer",
        "tags": [
          "customer"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "create a customer",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            },
            "description": "customer create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a customer",
        "tags": [
          "customer"
        ]
      }
    },
    "/customer/count": {
      "get": {
        "deprecated": true,
        "description": "count customer",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count customer",
        "tags": [
          "customer"
        ]
      }
    },
    "/customer/id/{id}": {
      "delete": {
        "deprecated": true,
        "description": "delete a customer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "customer delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a customer",
        "tags": [
          "customer"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "query a specific customer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific customer",
        "tags": [
          "customer"
        ]
      },
      "put": {
        "deprecated": true,
        "description": "update customer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer"
                }
              }
            },
            "description": "customer update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a customer",
        "tags": [
          "customer"
        ]
      }
    },
    "/customer/id/{id}/downloadImage": {
      "get": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "customer"
        ]
      }
    },
    "/customer/id/{id}/uploadImage": {
      "post": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "uploadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "customer"
        ]
      }
    },
    "/customerCategory": {
      "get": {
        "description": "query customerCategory",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "customerCategory response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query customerCategory",
        "tags": [
          "customerCategory"
        ]
      },
      "post": {
        "description": "create a customerCategory",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customerCategory create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a customerCategory",
        "tags": [
          "customerCategory"
        ]
      }
    },
    "/customerCategory/count": {
      "get": {
        "description": "count customerCategory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count customerCategory",
        "tags": [
          "customerCategory"
        ]
      }
    },
    "/customerCategory/id/{id}": {
      "delete": {
        "description": "delete a customerCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "customerCategory delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a customerCategory",
        "tags": [
          "customerCategory"
        ]
      },
      "get": {
        "description": "query a specific customerCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific customerCategory",
        "tags": [
          "customerCategory"
        ]
      },
      "put": {
        "description": "update customerCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customerCategory update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a customerCategory",
        "tags": [
          "customerCategory"
        ]
      }
    },
    "/customerLeadLossReason": {
      "get": {
        "description": "query customerLeadLossReason",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "customerLeadLossReason response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query customerLeadLossReason",
        "tags": [
          "customerLeadLossReason"
        ]
      },
      "post": {
        "description": "create a customerLeadLossReason",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customerLeadLossReason create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a customerLeadLossReason",
        "tags": [
          "customerLeadLossReason"
        ]
      }
    },
    "/customerLeadLossReason/count": {
      "get": {
        "description": "count customerLeadLossReason",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count customerLeadLossReason",
        "tags": [
          "customerLeadLossReason"
        ]
      }
    },
    "/customerLeadLossReason/id/{id}": {
      "delete": {
        "description": "delete a customerLeadLossReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "customerLeadLossReason delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a customerLeadLossReason",
        "tags": [
          "customerLeadLossReason"
        ]
      },
      "get": {
        "description": "query a specific customerLeadLossReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific customerLeadLossReason",
        "tags": [
          "customerLeadLossReason"
        ]
      },
      "put": {
        "description": "update customerLeadLossReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customerLeadLossReason update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a customerLeadLossReason",
        "tags": [
          "customerLeadLossReason"
        ]
      }
    },
    "/customerTopic": {
      "get": {
        "description": "query customerTopic",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "customerTopic response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query customerTopic",
        "tags": [
          "customerTopic"
        ]
      },
      "post": {
        "description": "create a customerTopic",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customerTopic create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a customerTopic",
        "tags": [
          "customerTopic"
        ]
      }
    },
    "/customerTopic/count": {
      "get": {
        "description": "count customerTopic",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count customerTopic",
        "tags": [
          "customerTopic"
        ]
      }
    },
    "/customerTopic/id/{id}": {
      "delete": {
        "description": "delete a customerTopic",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "customerTopic delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a customerTopic",
        "tags": [
          "customerTopic"
        ]
      },
      "get": {
        "description": "query a specific customerTopic",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific customerTopic",
        "tags": [
          "customerTopic"
        ]
      },
      "put": {
        "description": "update customerTopic",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customerTopic update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a customerTopic",
        "tags": [
          "customerTopic"
        ]
      }
    },
    "/customsTariffNumber": {
      "get": {
        "description": "query customsTariffNumber",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "customsTariffNumber response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query customsTariffNumber",
        "tags": [
          "customsTariffNumber"
        ]
      },
      "post": {
        "description": "create a customsTariffNumber",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customsTariffNumber create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a customsTariffNumber",
        "tags": [
          "customsTariffNumber"
        ]
      }
    },
    "/customsTariffNumber/count": {
      "get": {
        "description": "count customsTariffNumber",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count customsTariffNumber",
        "tags": [
          "customsTariffNumber"
        ]
      }
    },
    "/customsTariffNumber/id/{id}": {
      "delete": {
        "description": "delete a customsTariffNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "customsTariffNumber delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a customsTariffNumber",
        "tags": [
          "customsTariffNumber"
        ]
      },
      "get": {
        "description": "query a specific customsTariffNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific customsTariffNumber",
        "tags": [
          "customsTariffNumber"
        ]
      },
      "put": {
        "description": "update customsTariffNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "customsTariffNumber update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a customsTariffNumber",
        "tags": [
          "customsTariffNumber"
        ]
      }
    },
    "/document": {
      "get": {
        "description": "query document",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/document"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "document response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query document",
        "tags": [
          "document"
        ]
      }
    },
    "/document/copy": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entityId": {
                    "type": "string"
                  },
                  "entityName": {
                    "type": "string"
                  },
                  "sourceDocumentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "entityId",
                  "entityName",
                  "sourceDocumentId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/document"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "copy response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "document"
        ]
      }
    },
    "/document/count": {
      "get": {
        "description": "count document",
        "parameters": [
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count document",
        "tags": [
          "document"
        ]
      }
    },
    "/document/id/{id}": {
      "delete": {
        "description": "delete a document",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "document delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a document",
        "tags": [
          "document"
        ]
      },
      "get": {
        "description": "query a specific document",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific document",
        "tags": [
          "document"
        ]
      },
      "put": {
        "description": "update document",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/document"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/document"
                }
              }
            },
            "description": "document update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a document",
        "tags": [
          "document"
        ]
      }
    },
    "/document/id/{id}/copy": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "comment": {
                    "type": "string"
                  },
                  "sourceDocumentId": {
                    "type": "string"
                  }
                },
                "required": [
                  "sourceDocumentId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/document"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "copy response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "document"
        ]
      }
    },
    "/document/id/{id}/download": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "download response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "document"
        ]
      }
    },
    "/document/id/{id}/downloadDocumentVersion": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadDocumentVersion response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "document"
        ]
      }
    },
    "/document/id/{id}/downloadDocumentVersionsZipped": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "filename",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ids",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadDocumentVersionsZipped response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "document"
        ]
      }
    },
    "/document/id/{id}/upload": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "comment",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/document"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "upload response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "document"
        ]
      }
    },
    "/document/upload": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "documentType",
            "required": false,
            "schema": {
              "enum": [
                "ARTICLE_DATASHEET",
                "ARTICLE_LABEL",
                "BLANKET_PURCHASE_ORDER",
                "CONTRACT",
                "CREDIT_ADVICE",
                "CREDIT_ADVICE_CANCELLATION",
                "CREDIT_ADVICE_PRELIMINARY_INVOICE",
                "CREDIT_ADVICE_UBL",
                "CREDIT_ADVICE_XR",
                "CRM_EVENT_LETTER",
                "CUSTOMER_ARTICLE_PRICE_LIST",
                "DUNNING",
                "INCOMING_GOODS",
                "INCOMING_GOODS_FROM_RETURN",
                "INCOMING_GOODS_RETURNS_PICKUP_NOTE",
                "INVENTORY_TAKING",
                "PERFORMANCE_RECORD",
                "PRODUCTION_ORDER",
                "PURCHASE_INVOICE",
                "PURCHASE_INVOICE_FATTURAPA",
                "PURCHASE_INVOICE_ZUGFERD",
                "PURCHASE_ORDER",
                "PURCHASE_ORDER_CANCELLATION",
                "PURCHASE_ORDER_DEFAULT",
                "PURCHASE_ORDER_REQUEST",
                "PURCHASE_ORDER_REQUEST_SUPPLIER_DOCUMENT",
                "QUOTATION",
                "QUOTATION_DEFAULT",
                "SALES_INVOICE",
                "SALES_INVOICE_CANCELLATION",
                "SALES_INVOICE_DEFAULT",
                "SALES_INVOICE_FATTURAPA",
                "SALES_INVOICE_PRELIMINARY",
                "SALES_INVOICE_QR",
                "SALES_INVOICE_UBL",
                "SALES_INVOICE_XR",
                "SALES_ORDER",
                "SALES_ORDER_DEFAULT",
                "SHIPMENT_CUSTOMS_DECLARATION",
                "SHIPMENT_DELIVERY_LABEL",
                "SHIPMENT_DELIVERY_NOTE",
                "SHIPMENT_DELIVERY_NOTE_DEFAULT",
                "SHIPMENT_PICKING_LIST",
                "SHIPMENT_PROFORMA_INVOICE",
                "SHIPMENT_RETURN_DELIVERY_NOTE",
                "SHIPMENT_RETURN_LABEL",
                "SHIPMENT_SERIAL_NUMBERS_CSV",
                "TICKET"
              ],
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/document"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "upload response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "document"
        ]
      }
    },
    "/externalConnection": {
      "get": {
        "description": "query externalConnection",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/externalConnection"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "externalConnection response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query externalConnection",
        "tags": [
          "externalConnection"
        ]
      }
    },
    "/externalConnection/count": {
      "get": {
        "description": "count externalConnection",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count externalConnection",
        "tags": [
          "externalConnection"
        ]
      }
    },
    "/externalConnection/id/{id}": {
      "get": {
        "description": "query a specific externalConnection",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/externalConnection"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific externalConnection",
        "tags": [
          "externalConnection"
        ]
      }
    },
    "/financialYear": {
      "get": {
        "description": "query financialYear",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/financialYear"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "financialYear response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query financialYear",
        "tags": [
          "financialYear"
        ]
      },
      "post": {
        "description": "create a financialYear",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/financialYear"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/financialYear"
                }
              }
            },
            "description": "financialYear create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a financialYear",
        "tags": [
          "financialYear"
        ]
      }
    },
    "/financialYear/count": {
      "get": {
        "description": "count financialYear",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count financialYear",
        "tags": [
          "financialYear"
        ]
      }
    },
    "/financialYear/id/{id}": {
      "delete": {
        "description": "delete a financialYear",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "financialYear delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a financialYear",
        "tags": [
          "financialYear"
        ]
      },
      "get": {
        "description": "query a specific financialYear",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/financialYear"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific financialYear",
        "tags": [
          "financialYear"
        ]
      },
      "put": {
        "description": "update financialYear",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/financialYear"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/financialYear"
                }
              }
            },
            "description": "financialYear update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a financialYear",
        "tags": [
          "financialYear"
        ]
      }
    },
    "/financialYear/id/{id}/generatePeriods": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/financialYear"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "generatePeriods response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "financialYear"
        ]
      }
    },
    "/fulfillmentProvider": {
      "get": {
        "description": "query fulfillmentProvider",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/fulfillmentProvider"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "fulfillmentProvider response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query fulfillmentProvider",
        "tags": [
          "fulfillmentProvider"
        ]
      }
    },
    "/fulfillmentProvider/count": {
      "get": {
        "description": "count fulfillmentProvider",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count fulfillmentProvider",
        "tags": [
          "fulfillmentProvider"
        ]
      }
    },
    "/fulfillmentProvider/id/{id}": {
      "get": {
        "description": "query a specific fulfillmentProvider",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/fulfillmentProvider"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific fulfillmentProvider",
        "tags": [
          "fulfillmentProvider"
        ]
      }
    },
    "/incomingGoods": {
      "get": {
        "description": "query incomingGoods",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/incomingGoods"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "incomingGoods response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query incomingGoods",
        "tags": [
          "incomingGoods"
        ]
      },
      "post": {
        "description": "create a incomingGoods",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/incomingGoods"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incomingGoods"
                }
              }
            },
            "description": "incomingGoods create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a incomingGoods",
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/count": {
      "get": {
        "description": "count incomingGoods",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count incomingGoods",
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/id/{id}": {
      "delete": {
        "description": "delete a incomingGoods",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "incomingGoods delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a incomingGoods",
        "tags": [
          "incomingGoods"
        ]
      },
      "get": {
        "description": "query a specific incomingGoods",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incomingGoods"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific incomingGoods",
        "tags": [
          "incomingGoods"
        ]
      },
      "put": {
        "description": "update incomingGoods",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/incomingGoods"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/incomingGoods"
                }
              }
            },
            "description": "incomingGoods update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a incomingGoods",
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/id/{id}/addPurchaseOrders": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "ids": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "ids"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/incomingGoods"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "addPurchaseOrders response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/id/{id}/createCompensationShipment": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/shipment"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createCompensationShipment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/id/{id}/createCreditNote": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createCreditNote response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/id/{id}/createSupplierReturn": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "purchaseOrderId": {
                    "type": "string"
                  },
                  "supplierId": {
                    "type": "string"
                  }
                },
                "required": [
                  "supplierId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/shipment"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createSupplierReturn response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/id/{id}/incomingBookings": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/incomingBooking"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "incomingBookings response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/incomingGoods/id/{id}/updateIncomingBookings": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "incomingBookings": {
                    "items": {
                      "properties": {
                        "articleValuationPrice": {
                          "format": "decimal",
                          "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                          "type": "string"
                        },
                        "batchNumber": {
                          "maxLength": 1000,
                          "type": "string"
                        },
                        "bookIntoWarehouse": {
                          "type": "boolean"
                        },
                        "confirmedByUserId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "user",
                            "service": "user"
                          }
                        },
                        "confirmedByUserIdDeprecated": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "user",
                            "service": "user"
                          }
                        },
                        "confirmedDate": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "confirmedDateDeprecated": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "confirmedQuantityDeprecated": {
                          "format": "decimal",
                          "pattern": "^([0-9]{1,13})",
                          "type": "string"
                        },
                        "createdDate": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "expirationDate": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "id": {
                          "type": "string"
                        },
                        "incomingGoodsItemId": {
                          "type": "string"
                        },
                        "internalTransportReferenceId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "internalTransportReference",
                            "service": "internalTransportReference"
                          }
                        },
                        "lastModifiedDate": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "loadingEquipmentIdentifierId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "loadingEquipmentIdentifier",
                            "service": "loadingEquipmentIdentifier"
                          }
                        },
                        "quantity": {
                          "format": "decimal",
                          "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                          "type": "string"
                        },
                        "serialNumbers": {
                          "items": {
                            "type": "string"
                          },
                          "type": "array"
                        },
                        "storagePlaceId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "storagePlace",
                            "service": "storagePlace"
                          }
                        },
                        "version": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "incomingBookings"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/incomingBooking"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "updateIncomingBookings response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "incomingGoods"
        ]
      }
    },
    "/internalTransportReference": {
      "get": {
        "description": "query internalTransportReference",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/internalTransportReference"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "internalTransportReference response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query internalTransportReference",
        "tags": [
          "internalTransportReference"
        ]
      },
      "post": {
        "description": "create a internalTransportReference",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/internalTransportReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internalTransportReference"
                }
              }
            },
            "description": "internalTransportReference create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a internalTransportReference",
        "tags": [
          "internalTransportReference"
        ]
      }
    },
    "/internalTransportReference/count": {
      "get": {
        "description": "count internalTransportReference",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count internalTransportReference",
        "tags": [
          "internalTransportReference"
        ]
      }
    },
    "/internalTransportReference/id/{id}": {
      "delete": {
        "description": "delete a internalTransportReference",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "internalTransportReference delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a internalTransportReference",
        "tags": [
          "internalTransportReference"
        ]
      },
      "get": {
        "description": "query a specific internalTransportReference",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internalTransportReference"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific internalTransportReference",
        "tags": [
          "internalTransportReference"
        ]
      },
      "put": {
        "description": "update internalTransportReference",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/internalTransportReference"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/internalTransportReference"
                }
              }
            },
            "description": "internalTransportReference update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a internalTransportReference",
        "tags": [
          "internalTransportReference"
        ]
      }
    },
    "/internalTransportReference/id/{id}/createLabel": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createLabel response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "internalTransportReference"
        ]
      }
    },
    "/internalTransportReference/id/{id}/downloadLatestLabel": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestLabel response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "internalTransportReference"
        ]
      }
    },
    "/job/abort": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/jobStatus"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "abort response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "job"
        ]
      }
    },
    "/job/status": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "type",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/jobStatus"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "status response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "job"
        ]
      }
    },
    "/lead": {
      "get": {
        "deprecated": true,
        "description": "query lead",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/lead"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "lead response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query lead",
        "tags": [
          "lead"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "create a lead",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lead"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lead"
                }
              }
            },
            "description": "lead create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a lead",
        "tags": [
          "lead"
        ]
      }
    },
    "/lead/count": {
      "get": {
        "deprecated": true,
        "description": "count lead",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count lead",
        "tags": [
          "lead"
        ]
      }
    },
    "/lead/id/{id}": {
      "delete": {
        "deprecated": true,
        "description": "delete a lead",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "lead delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a lead",
        "tags": [
          "lead"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "query a specific lead",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lead"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific lead",
        "tags": [
          "lead"
        ]
      },
      "put": {
        "deprecated": true,
        "description": "update lead",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/lead"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/lead"
                }
              }
            },
            "description": "lead update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a lead",
        "tags": [
          "lead"
        ]
      }
    },
    "/lead/id/{id}/convertLeadToCustomer": {
      "get": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/customer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "convertLeadToCustomer response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "lead"
        ]
      }
    },
    "/lead/id/{id}/downloadImage": {
      "get": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "lead"
        ]
      }
    },
    "/lead/id/{id}/uploadImage": {
      "post": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "uploadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "lead"
        ]
      }
    },
    "/leadRating": {
      "get": {
        "description": "query leadRating",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "leadRating response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query leadRating",
        "tags": [
          "leadRating"
        ]
      },
      "post": {
        "description": "create a leadRating",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "leadRating create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a leadRating",
        "tags": [
          "leadRating"
        ]
      }
    },
    "/leadRating/count": {
      "get": {
        "description": "count leadRating",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count leadRating",
        "tags": [
          "leadRating"
        ]
      }
    },
    "/leadRating/id/{id}": {
      "delete": {
        "description": "delete a leadRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "leadRating delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a leadRating",
        "tags": [
          "leadRating"
        ]
      },
      "get": {
        "description": "query a specific leadRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific leadRating",
        "tags": [
          "leadRating"
        ]
      },
      "put": {
        "description": "update leadRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "leadRating update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a leadRating",
        "tags": [
          "leadRating"
        ]
      }
    },
    "/leadSource": {
      "get": {
        "description": "query leadSource",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "leadSource response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query leadSource",
        "tags": [
          "leadSource"
        ]
      },
      "post": {
        "description": "create a leadSource",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "leadSource create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a leadSource",
        "tags": [
          "leadSource"
        ]
      }
    },
    "/leadSource/count": {
      "get": {
        "description": "count leadSource",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count leadSource",
        "tags": [
          "leadSource"
        ]
      }
    },
    "/leadSource/id/{id}": {
      "delete": {
        "description": "delete a leadSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "leadSource delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a leadSource",
        "tags": [
          "leadSource"
        ]
      },
      "get": {
        "description": "query a specific leadSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific leadSource",
        "tags": [
          "leadSource"
        ]
      },
      "put": {
        "description": "update leadSource",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "leadSource update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a leadSource",
        "tags": [
          "leadSource"
        ]
      }
    },
    "/ledgerAccount": {
      "get": {
        "description": "query ledgerAccount",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ledgerAccount"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ledgerAccount response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ledgerAccount",
        "tags": [
          "ledgerAccount"
        ]
      },
      "post": {
        "description": "create a ledgerAccount",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ledgerAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ledgerAccount"
                }
              }
            },
            "description": "ledgerAccount create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ledgerAccount",
        "tags": [
          "ledgerAccount"
        ]
      }
    },
    "/ledgerAccount/count": {
      "get": {
        "description": "count ledgerAccount",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ledgerAccount",
        "tags": [
          "ledgerAccount"
        ]
      }
    },
    "/ledgerAccount/id/{id}": {
      "delete": {
        "description": "delete a ledgerAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ledgerAccount delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ledgerAccount",
        "tags": [
          "ledgerAccount"
        ]
      },
      "get": {
        "description": "query a specific ledgerAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ledgerAccount"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ledgerAccount",
        "tags": [
          "ledgerAccount"
        ]
      },
      "put": {
        "description": "update ledgerAccount",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ledgerAccount"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ledgerAccount"
                }
              }
            },
            "description": "ledgerAccount update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ledgerAccount",
        "tags": [
          "ledgerAccount"
        ]
      }
    },
    "/legalForm": {
      "get": {
        "description": "query legalForm",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "legalForm response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query legalForm",
        "tags": [
          "legalForm"
        ]
      },
      "post": {
        "description": "create a legalForm",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "legalForm create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a legalForm",
        "tags": [
          "legalForm"
        ]
      }
    },
    "/legalForm/count": {
      "get": {
        "description": "count legalForm",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count legalForm",
        "tags": [
          "legalForm"
        ]
      }
    },
    "/legalForm/id/{id}": {
      "delete": {
        "description": "delete a legalForm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "legalForm delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a legalForm",
        "tags": [
          "legalForm"
        ]
      },
      "get": {
        "description": "query a specific legalForm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific legalForm",
        "tags": [
          "legalForm"
        ]
      },
      "put": {
        "description": "update legalForm",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "legalForm update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a legalForm",
        "tags": [
          "legalForm"
        ]
      }
    },
    "/loadingEquipmentIdentifier": {
      "get": {
        "description": "query loadingEquipmentIdentifier",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/loadingEquipmentIdentifier"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "loadingEquipmentIdentifier response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query loadingEquipmentIdentifier",
        "tags": [
          "loadingEquipmentIdentifier"
        ]
      },
      "post": {
        "description": "create a loadingEquipmentIdentifier",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loadingEquipmentIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loadingEquipmentIdentifier"
                }
              }
            },
            "description": "loadingEquipmentIdentifier create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a loadingEquipmentIdentifier",
        "tags": [
          "loadingEquipmentIdentifier"
        ]
      }
    },
    "/loadingEquipmentIdentifier/count": {
      "get": {
        "description": "count loadingEquipmentIdentifier",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count loadingEquipmentIdentifier",
        "tags": [
          "loadingEquipmentIdentifier"
        ]
      }
    },
    "/loadingEquipmentIdentifier/id/{id}": {
      "delete": {
        "description": "delete a loadingEquipmentIdentifier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "loadingEquipmentIdentifier delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a loadingEquipmentIdentifier",
        "tags": [
          "loadingEquipmentIdentifier"
        ]
      },
      "get": {
        "description": "query a specific loadingEquipmentIdentifier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loadingEquipmentIdentifier"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific loadingEquipmentIdentifier",
        "tags": [
          "loadingEquipmentIdentifier"
        ]
      },
      "put": {
        "description": "update loadingEquipmentIdentifier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loadingEquipmentIdentifier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/loadingEquipmentIdentifier"
                }
              }
            },
            "description": "loadingEquipmentIdentifier update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a loadingEquipmentIdentifier",
        "tags": [
          "loadingEquipmentIdentifier"
        ]
      }
    },
    "/mailTemplate": {
      "get": {
        "description": "query mailTemplate",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/mailTemplate"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "mailTemplate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query mailTemplate",
        "tags": [
          "mailTemplate"
        ]
      },
      "post": {
        "description": "create a mailTemplate",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mailTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mailTemplate"
                }
              }
            },
            "description": "mailTemplate create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a mailTemplate",
        "tags": [
          "mailTemplate"
        ]
      }
    },
    "/mailTemplate/count": {
      "get": {
        "description": "count mailTemplate",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count mailTemplate",
        "tags": [
          "mailTemplate"
        ]
      }
    },
    "/mailTemplate/id/{id}": {
      "delete": {
        "description": "delete a mailTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "mailTemplate delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a mailTemplate",
        "tags": [
          "mailTemplate"
        ]
      },
      "get": {
        "description": "query a specific mailTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mailTemplate"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific mailTemplate",
        "tags": [
          "mailTemplate"
        ]
      },
      "put": {
        "description": "update mailTemplate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/mailTemplate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/mailTemplate"
                }
              }
            },
            "description": "mailTemplate update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a mailTemplate",
        "tags": [
          "mailTemplate"
        ]
      }
    },
    "/manufacturer": {
      "get": {
        "description": "query manufacturer",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "manufacturer response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query manufacturer",
        "tags": [
          "manufacturer"
        ]
      },
      "post": {
        "description": "create a manufacturer",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "manufacturer create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a manufacturer",
        "tags": [
          "manufacturer"
        ]
      }
    },
    "/manufacturer/count": {
      "get": {
        "description": "count manufacturer",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count manufacturer",
        "tags": [
          "manufacturer"
        ]
      }
    },
    "/manufacturer/id/{id}": {
      "delete": {
        "description": "delete a manufacturer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "manufacturer delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a manufacturer",
        "tags": [
          "manufacturer"
        ]
      },
      "get": {
        "description": "query a specific manufacturer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific manufacturer",
        "tags": [
          "manufacturer"
        ]
      },
      "put": {
        "description": "update manufacturer",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "manufacturer update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a manufacturer",
        "tags": [
          "manufacturer"
        ]
      }
    },
    "/meta/queryFilterProperties": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "queryFilterProperties response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "meta"
        ]
      }
    },
    "/meta/querySortProperties": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "resource",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "type": "object"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "querySortProperties response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "meta"
        ]
      }
    },
    "/meta/resources": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "object"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "resources response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "meta"
        ]
      }
    },
    "/notification": {
      "get": {
        "description": "query notification",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/notification"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "notification response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query notification",
        "tags": [
          "notification"
        ]
      }
    },
    "/notification/count": {
      "get": {
        "description": "count notification",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count notification",
        "tags": [
          "notification"
        ]
      }
    },
    "/notification/id/{id}": {
      "get": {
        "description": "query a specific notification",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/notification"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific notification",
        "tags": [
          "notification"
        ]
      }
    },
    "/notification/id/{id}/markRead": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/notification"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "markRead response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "notification"
        ]
      }
    },
    "/opportunity": {
      "get": {
        "description": "query opportunity",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/opportunity"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "opportunity response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query opportunity",
        "tags": [
          "opportunity"
        ]
      },
      "post": {
        "description": "create a opportunity",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/opportunity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/opportunity"
                }
              }
            },
            "description": "opportunity create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a opportunity",
        "tags": [
          "opportunity"
        ]
      }
    },
    "/opportunity/count": {
      "get": {
        "description": "count opportunity",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count opportunity",
        "tags": [
          "opportunity"
        ]
      }
    },
    "/opportunity/id/{id}": {
      "delete": {
        "description": "delete a opportunity",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "opportunity delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a opportunity",
        "tags": [
          "opportunity"
        ]
      },
      "get": {
        "description": "query a specific opportunity",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/opportunity"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific opportunity",
        "tags": [
          "opportunity"
        ]
      },
      "put": {
        "description": "update opportunity",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/opportunity"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/opportunity"
                }
              }
            },
            "description": "opportunity update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a opportunity",
        "tags": [
          "opportunity"
        ]
      }
    },
    "/opportunityTopic": {
      "get": {
        "description": "query opportunityTopic",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "opportunityTopic response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query opportunityTopic",
        "tags": [
          "opportunityTopic"
        ]
      },
      "post": {
        "description": "create a opportunityTopic",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "opportunityTopic create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a opportunityTopic",
        "tags": [
          "opportunityTopic"
        ]
      }
    },
    "/opportunityTopic/count": {
      "get": {
        "description": "count opportunityTopic",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count opportunityTopic",
        "tags": [
          "opportunityTopic"
        ]
      }
    },
    "/opportunityTopic/id/{id}": {
      "delete": {
        "description": "delete a opportunityTopic",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "opportunityTopic delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a opportunityTopic",
        "tags": [
          "opportunityTopic"
        ]
      },
      "get": {
        "description": "query a specific opportunityTopic",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific opportunityTopic",
        "tags": [
          "opportunityTopic"
        ]
      },
      "put": {
        "description": "update opportunityTopic",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "opportunityTopic update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a opportunityTopic",
        "tags": [
          "opportunityTopic"
        ]
      }
    },
    "/opportunityWinLossReason": {
      "get": {
        "description": "query opportunityWinLossReason",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "opportunityWinLossReason response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query opportunityWinLossReason",
        "tags": [
          "opportunityWinLossReason"
        ]
      },
      "post": {
        "description": "create a opportunityWinLossReason",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "opportunityWinLossReason create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a opportunityWinLossReason",
        "tags": [
          "opportunityWinLossReason"
        ]
      }
    },
    "/opportunityWinLossReason/count": {
      "get": {
        "description": "count opportunityWinLossReason",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count opportunityWinLossReason",
        "tags": [
          "opportunityWinLossReason"
        ]
      }
    },
    "/opportunityWinLossReason/id/{id}": {
      "delete": {
        "description": "delete a opportunityWinLossReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "opportunityWinLossReason delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a opportunityWinLossReason",
        "tags": [
          "opportunityWinLossReason"
        ]
      },
      "get": {
        "description": "query a specific opportunityWinLossReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific opportunityWinLossReason",
        "tags": [
          "opportunityWinLossReason"
        ]
      },
      "put": {
        "description": "update opportunityWinLossReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "opportunityWinLossReason update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a opportunityWinLossReason",
        "tags": [
          "opportunityWinLossReason"
        ]
      }
    },
    "/party": {
      "get": {
        "description": "query party",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/party"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "party response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query party",
        "tags": [
          "party"
        ]
      },
      "post": {
        "description": "create a party",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/party"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/party"
                }
              }
            },
            "description": "party create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a party",
        "tags": [
          "party"
        ]
      }
    },
    "/party/count": {
      "get": {
        "description": "count party",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count party",
        "tags": [
          "party"
        ]
      }
    },
    "/party/id/{id}": {
      "delete": {
        "description": "delete a party",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "party delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a party",
        "tags": [
          "party"
        ]
      },
      "get": {
        "description": "query a specific party",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/party"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific party",
        "tags": [
          "party"
        ]
      },
      "put": {
        "description": "update party",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/party"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/party"
                }
              }
            },
            "description": "party update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a party",
        "tags": [
          "party"
        ]
      }
    },
    "/party/id/{id}/downloadImage": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "imageId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "party"
        ]
      }
    },
    "/party/id/{id}/uploadImage": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "uploadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "party"
        ]
      }
    },
    "/partyRating": {
      "get": {
        "description": "query partyRating",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "partyRating response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query partyRating",
        "tags": [
          "partyRating"
        ]
      },
      "post": {
        "description": "create a partyRating",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "partyRating create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a partyRating",
        "tags": [
          "partyRating"
        ]
      }
    },
    "/partyRating/count": {
      "get": {
        "description": "count partyRating",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count partyRating",
        "tags": [
          "partyRating"
        ]
      }
    },
    "/partyRating/id/{id}": {
      "delete": {
        "description": "delete a partyRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "partyRating delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a partyRating",
        "tags": [
          "partyRating"
        ]
      },
      "get": {
        "description": "query a specific partyRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific partyRating",
        "tags": [
          "partyRating"
        ]
      },
      "put": {
        "description": "update partyRating",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "partyRating update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a partyRating",
        "tags": [
          "partyRating"
        ]
      }
    },
    "/paymentMethod": {
      "get": {
        "description": "query paymentMethod",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/paymentMethod"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "paymentMethod response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query paymentMethod",
        "tags": [
          "paymentMethod"
        ]
      },
      "post": {
        "description": "create a paymentMethod",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/paymentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethod"
                }
              }
            },
            "description": "paymentMethod create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a paymentMethod",
        "tags": [
          "paymentMethod"
        ]
      }
    },
    "/paymentMethod/count": {
      "get": {
        "description": "count paymentMethod",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count paymentMethod",
        "tags": [
          "paymentMethod"
        ]
      }
    },
    "/paymentMethod/id/{id}": {
      "delete": {
        "description": "delete a paymentMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "paymentMethod delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a paymentMethod",
        "tags": [
          "paymentMethod"
        ]
      },
      "get": {
        "description": "query a specific paymentMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethod"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific paymentMethod",
        "tags": [
          "paymentMethod"
        ]
      },
      "put": {
        "description": "update paymentMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/paymentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentMethod"
                }
              }
            },
            "description": "paymentMethod update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a paymentMethod",
        "tags": [
          "paymentMethod"
        ]
      }
    },
    "/paymentRun": {
      "get": {
        "description": "query paymentRun",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/paymentRun"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "paymentRun response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query paymentRun",
        "tags": [
          "paymentRun"
        ]
      }
    },
    "/paymentRun/count": {
      "get": {
        "description": "count paymentRun",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count paymentRun",
        "tags": [
          "paymentRun"
        ]
      }
    },
    "/paymentRun/id/{id}": {
      "delete": {
        "description": "delete a paymentRun",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "paymentRun delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a paymentRun",
        "tags": [
          "paymentRun"
        ]
      },
      "get": {
        "description": "query a specific paymentRun",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentRun"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific paymentRun",
        "tags": [
          "paymentRun"
        ]
      },
      "put": {
        "description": "update paymentRun",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/paymentRun"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentRun"
                }
              }
            },
            "description": "paymentRun update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a paymentRun",
        "tags": [
          "paymentRun"
        ]
      }
    },
    "/paymentRunItem": {
      "get": {
        "description": "query paymentRunItem",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/paymentRunItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "paymentRunItem response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query paymentRunItem",
        "tags": [
          "paymentRunItem"
        ]
      }
    },
    "/paymentRunItem/count": {
      "get": {
        "description": "count paymentRunItem",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count paymentRunItem",
        "tags": [
          "paymentRunItem"
        ]
      }
    },
    "/paymentRunItem/id/{id}": {
      "get": {
        "description": "query a specific paymentRunItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/paymentRunItem"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific paymentRunItem",
        "tags": [
          "paymentRunItem"
        ]
      }
    },
    "/personDepartment": {
      "get": {
        "description": "query personDepartment",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "personDepartment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query personDepartment",
        "tags": [
          "personDepartment"
        ]
      },
      "post": {
        "description": "create a personDepartment",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "personDepartment create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a personDepartment",
        "tags": [
          "personDepartment"
        ]
      }
    },
    "/personDepartment/count": {
      "get": {
        "description": "count personDepartment",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count personDepartment",
        "tags": [
          "personDepartment"
        ]
      }
    },
    "/personDepartment/id/{id}": {
      "delete": {
        "description": "delete a personDepartment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "personDepartment delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a personDepartment",
        "tags": [
          "personDepartment"
        ]
      },
      "get": {
        "description": "query a specific personDepartment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific personDepartment",
        "tags": [
          "personDepartment"
        ]
      },
      "put": {
        "description": "update personDepartment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "personDepartment update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a personDepartment",
        "tags": [
          "personDepartment"
        ]
      }
    },
    "/personRole": {
      "get": {
        "description": "query personRole",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "personRole response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query personRole",
        "tags": [
          "personRole"
        ]
      },
      "post": {
        "description": "create a personRole",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "personRole create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a personRole",
        "tags": [
          "personRole"
        ]
      }
    },
    "/personRole/count": {
      "get": {
        "description": "count personRole",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count personRole",
        "tags": [
          "personRole"
        ]
      }
    },
    "/personRole/id/{id}": {
      "delete": {
        "description": "delete a personRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "personRole delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a personRole",
        "tags": [
          "personRole"
        ]
      },
      "get": {
        "description": "query a specific personRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific personRole",
        "tags": [
          "personRole"
        ]
      },
      "put": {
        "description": "update personRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "personRole update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a personRole",
        "tags": [
          "personRole"
        ]
      }
    },
    "/personalAccountingCode": {
      "get": {
        "description": "query personalAccountingCode",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "personalAccountingCode response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query personalAccountingCode",
        "tags": [
          "personalAccountingCode"
        ]
      },
      "post": {
        "description": "create a personalAccountingCode",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "personalAccountingCode create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a personalAccountingCode",
        "tags": [
          "personalAccountingCode"
        ]
      }
    },
    "/personalAccountingCode/count": {
      "get": {
        "description": "count personalAccountingCode",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count personalAccountingCode",
        "tags": [
          "personalAccountingCode"
        ]
      }
    },
    "/personalAccountingCode/id/{id}": {
      "delete": {
        "description": "delete a personalAccountingCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "personalAccountingCode delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a personalAccountingCode",
        "tags": [
          "personalAccountingCode"
        ]
      },
      "get": {
        "description": "query a specific personalAccountingCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific personalAccountingCode",
        "tags": [
          "personalAccountingCode"
        ]
      },
      "put": {
        "description": "update personalAccountingCode",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "personalAccountingCode update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a personalAccountingCode",
        "tags": [
          "personalAccountingCode"
        ]
      }
    },
    "/pick": {
      "get": {
        "description": "query pick",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/pick"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "pick response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query pick",
        "tags": [
          "pick"
        ]
      }
    },
    "/pick/count": {
      "get": {
        "description": "count pick",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count pick",
        "tags": [
          "pick"
        ]
      }
    },
    "/pick/id/{id}": {
      "get": {
        "description": "query a specific pick",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pick"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific pick",
        "tags": [
          "pick"
        ]
      }
    },
    "/pickCheckReason": {
      "get": {
        "description": "query pickCheckReason",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "pickCheckReason response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query pickCheckReason",
        "tags": [
          "pickCheckReason"
        ]
      },
      "post": {
        "description": "create a pickCheckReason",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "pickCheckReason create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a pickCheckReason",
        "tags": [
          "pickCheckReason"
        ]
      }
    },
    "/pickCheckReason/count": {
      "get": {
        "description": "count pickCheckReason",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count pickCheckReason",
        "tags": [
          "pickCheckReason"
        ]
      }
    },
    "/pickCheckReason/id/{id}": {
      "delete": {
        "description": "delete a pickCheckReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "pickCheckReason delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a pickCheckReason",
        "tags": [
          "pickCheckReason"
        ]
      },
      "get": {
        "description": "query a specific pickCheckReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific pickCheckReason",
        "tags": [
          "pickCheckReason"
        ]
      },
      "put": {
        "description": "update pickCheckReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "pickCheckReason update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a pickCheckReason",
        "tags": [
          "pickCheckReason"
        ]
      }
    },
    "/placeOfService": {
      "get": {
        "description": "query placeOfService",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "placeOfService response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query placeOfService",
        "tags": [
          "placeOfService"
        ]
      },
      "post": {
        "description": "create a placeOfService",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "placeOfService create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a placeOfService",
        "tags": [
          "placeOfService"
        ]
      }
    },
    "/placeOfService/count": {
      "get": {
        "description": "count placeOfService",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count placeOfService",
        "tags": [
          "placeOfService"
        ]
      }
    },
    "/placeOfService/id/{id}": {
      "delete": {
        "description": "delete a placeOfService",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "placeOfService delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a placeOfService",
        "tags": [
          "placeOfService"
        ]
      },
      "get": {
        "description": "query a specific placeOfService",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific placeOfService",
        "tags": [
          "placeOfService"
        ]
      },
      "put": {
        "description": "update placeOfService",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "placeOfService update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a placeOfService",
        "tags": [
          "placeOfService"
        ]
      }
    },
    "/productionOrder": {
      "get": {
        "description": "query productionOrder",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/productionOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "productionOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query productionOrder",
        "tags": [
          "productionOrder"
        ]
      },
      "post": {
        "description": "create a productionOrder",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productionOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionOrder"
                }
              }
            },
            "description": "productionOrder create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a productionOrder",
        "tags": [
          "productionOrder"
        ]
      }
    },
    "/productionOrder/count": {
      "get": {
        "description": "count productionOrder",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count productionOrder",
        "tags": [
          "productionOrder"
        ]
      }
    },
    "/productionOrder/fastProductionBooking": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "productionOrderNumber": {
                    "type": "string"
                  },
                  "quantity": {
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "required": [
                  "productionOrderNumber",
                  "quantity"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/fastProductionBookingResult"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "fastProductionBooking response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "productionOrder"
        ]
      }
    },
    "/productionOrder/id/{id}": {
      "delete": {
        "description": "delete a productionOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "productionOrder delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a productionOrder",
        "tags": [
          "productionOrder"
        ]
      },
      "get": {
        "description": "query a specific productionOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionOrder"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific productionOrder",
        "tags": [
          "productionOrder"
        ]
      },
      "put": {
        "description": "update productionOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productionOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionOrder"
                }
              }
            },
            "description": "productionOrder update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a productionOrder",
        "tags": [
          "productionOrder"
        ]
      }
    },
    "/productionOrder/id/{id}/createPickingList": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createPickingList response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "productionOrder"
        ]
      }
    },
    "/productionOrder/id/{id}/downloadLatestProductionOrderPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestProductionOrderPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "productionOrder"
        ]
      }
    },
    "/productionWorkSchedule": {
      "get": {
        "description": "query productionWorkSchedule",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/productionWorkSchedule"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "productionWorkSchedule response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query productionWorkSchedule",
        "tags": [
          "productionWorkSchedule"
        ]
      },
      "post": {
        "description": "create a productionWorkSchedule",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productionWorkSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionWorkSchedule"
                }
              }
            },
            "description": "productionWorkSchedule create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a productionWorkSchedule",
        "tags": [
          "productionWorkSchedule"
        ]
      }
    },
    "/productionWorkSchedule/count": {
      "get": {
        "description": "count productionWorkSchedule",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count productionWorkSchedule",
        "tags": [
          "productionWorkSchedule"
        ]
      }
    },
    "/productionWorkSchedule/id/{id}": {
      "delete": {
        "description": "delete a productionWorkSchedule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "productionWorkSchedule delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a productionWorkSchedule",
        "tags": [
          "productionWorkSchedule"
        ]
      },
      "get": {
        "description": "query a specific productionWorkSchedule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionWorkSchedule"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific productionWorkSchedule",
        "tags": [
          "productionWorkSchedule"
        ]
      },
      "put": {
        "description": "update productionWorkSchedule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productionWorkSchedule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionWorkSchedule"
                }
              }
            },
            "description": "productionWorkSchedule update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a productionWorkSchedule",
        "tags": [
          "productionWorkSchedule"
        ]
      }
    },
    "/productionWorkScheduleAssignment": {
      "get": {
        "description": "query productionWorkScheduleAssignment",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/productionWorkScheduleAssignment"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "productionWorkScheduleAssignment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query productionWorkScheduleAssignment",
        "tags": [
          "productionWorkScheduleAssignment"
        ]
      },
      "post": {
        "description": "create a productionWorkScheduleAssignment",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productionWorkScheduleAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionWorkScheduleAssignment"
                }
              }
            },
            "description": "productionWorkScheduleAssignment create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a productionWorkScheduleAssignment",
        "tags": [
          "productionWorkScheduleAssignment"
        ]
      }
    },
    "/productionWorkScheduleAssignment/count": {
      "get": {
        "description": "count productionWorkScheduleAssignment",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count productionWorkScheduleAssignment",
        "tags": [
          "productionWorkScheduleAssignment"
        ]
      }
    },
    "/productionWorkScheduleAssignment/id/{id}": {
      "delete": {
        "description": "delete a productionWorkScheduleAssignment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "productionWorkScheduleAssignment delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a productionWorkScheduleAssignment",
        "tags": [
          "productionWorkScheduleAssignment"
        ]
      },
      "get": {
        "description": "query a specific productionWorkScheduleAssignment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionWorkScheduleAssignment"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific productionWorkScheduleAssignment",
        "tags": [
          "productionWorkScheduleAssignment"
        ]
      },
      "put": {
        "description": "update productionWorkScheduleAssignment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/productionWorkScheduleAssignment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/productionWorkScheduleAssignment"
                }
              }
            },
            "description": "productionWorkScheduleAssignment update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a productionWorkScheduleAssignment",
        "tags": [
          "productionWorkScheduleAssignment"
        ]
      }
    },
    "/propertyTranslation/readPropertyTranslations": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "entityName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "entityId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "locale",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "propertyNames",
            "required": false,
            "schema": {
              "items": {
                "type": "string"
              },
              "type": "array"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/propertyTranslation"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "readPropertyTranslations response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "propertyTranslation"
        ]
      }
    },
    "/propertyTranslation/updatePropertyTranslations": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "entityId": {
                    "type": "string"
                  },
                  "entityName": {
                    "type": "string"
                  },
                  "propertyTranslations": {
                    "items": {
                      "properties": {
                        "propertyName": {
                          "type": "string"
                        },
                        "values": {
                          "items": {
                            "$ref": "#/components/schemas/propertyTranslationValue"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "entityId",
                  "entityName",
                  "propertyTranslations"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/propertyTranslation"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "updatePropertyTranslations response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "propertyTranslation"
        ]
      }
    },
    "/purchaseInvoice": {
      "get": {
        "description": "query purchaseInvoice",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/purchaseInvoice"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "purchaseInvoice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query purchaseInvoice",
        "tags": [
          "purchaseInvoice"
        ]
      },
      "post": {
        "description": "create a purchaseInvoice",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purchaseInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseInvoice"
                }
              }
            },
            "description": "purchaseInvoice create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a purchaseInvoice",
        "tags": [
          "purchaseInvoice"
        ]
      }
    },
    "/purchaseInvoice/count": {
      "get": {
        "description": "count purchaseInvoice",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count purchaseInvoice",
        "tags": [
          "purchaseInvoice"
        ]
      }
    },
    "/purchaseInvoice/id/{id}": {
      "delete": {
        "description": "delete a purchaseInvoice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "purchaseInvoice delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a purchaseInvoice",
        "tags": [
          "purchaseInvoice"
        ]
      },
      "get": {
        "description": "query a specific purchaseInvoice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseInvoice"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific purchaseInvoice",
        "tags": [
          "purchaseInvoice"
        ]
      },
      "put": {
        "description": "update purchaseInvoice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purchaseInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseInvoice"
                }
              }
            },
            "description": "purchaseInvoice update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a purchaseInvoice",
        "tags": [
          "purchaseInvoice"
        ]
      }
    },
    "/purchaseInvoice/id/{id}/createCreditNote": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "itemIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/purchaseInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createCreditNote response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseInvoice"
        ]
      }
    },
    "/purchaseInvoice/id/{id}/downloadLatestPurchaseInvoiceDocument": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestPurchaseInvoiceDocument response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseInvoice"
        ]
      }
    },
    "/purchaseOpenItem": {
      "get": {
        "description": "query purchaseOpenItem",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/purchaseOpenItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "purchaseOpenItem response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query purchaseOpenItem",
        "tags": [
          "purchaseOpenItem"
        ]
      }
    },
    "/purchaseOpenItem/count": {
      "get": {
        "description": "count purchaseOpenItem",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count purchaseOpenItem",
        "tags": [
          "purchaseOpenItem"
        ]
      }
    },
    "/purchaseOpenItem/id/{id}": {
      "get": {
        "description": "query a specific purchaseOpenItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseOpenItem"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific purchaseOpenItem",
        "tags": [
          "purchaseOpenItem"
        ]
      }
    },
    "/purchaseOpenItem/id/{id}/createPaymentApplication": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "moneyTransactionId": {
                    "type": "string"
                  }
                },
                "required": [
                  "moneyTransactionId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/purchaseOpenItem"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPaymentApplication response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOpenItem"
        ]
      }
    },
    "/purchaseOrder": {
      "get": {
        "description": "query purchaseOrder",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/purchaseOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "purchaseOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query purchaseOrder",
        "tags": [
          "purchaseOrder"
        ]
      },
      "post": {
        "description": "create a purchaseOrder",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseOrder"
                }
              }
            },
            "description": "purchaseOrder create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a purchaseOrder",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/count": {
      "get": {
        "description": "count purchaseOrder",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count purchaseOrder",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}": {
      "delete": {
        "description": "delete a purchaseOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "purchaseOrder delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a purchaseOrder",
        "tags": [
          "purchaseOrder"
        ]
      },
      "get": {
        "description": "query a specific purchaseOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseOrder"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific purchaseOrder",
        "tags": [
          "purchaseOrder"
        ]
      },
      "put": {
        "description": "update purchaseOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purchaseOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseOrder"
                }
              }
            },
            "description": "purchaseOrder update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a purchaseOrder",
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}/createDropshippingDeliveryNotePdf": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createDropshippingDeliveryNotePdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}/createIncomingGoods": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "additionalPurchaseOrderIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/incomingGoods"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createIncomingGoods response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}/createPurchaseInvoice": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allowExistingInvoiceNumber": {
                    "type": "boolean"
                  },
                  "invoiceDate": {
                    "format": "timestamp",
                    "type": "integer"
                  },
                  "invoiceNumber": {
                    "type": "string"
                  },
                  "invoiceType": {
                    "enum": [
                      "ADVANCE_PAYMENT_INVOICE",
                      "CREDIT_ADVICE",
                      "CREDIT_NOTE",
                      "FINAL_INVOICE",
                      "PART_PAYMENT_INVOICE",
                      "PREPAYMENT_INVOICE",
                      "STANDARD_INVOICE"
                    ],
                    "type": "string"
                  },
                  "isGross": {
                    "type": "boolean"
                  },
                  "paymentAmount": {
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/purchaseInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPurchaseInvoice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}/createSupplierReturn": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/shipment"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createSupplierReturn response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}/downloadLatestDropshippingDeliveryNotePdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestDropshippingDeliveryNotePdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}/downloadLatestPurchaseOrderPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestPurchaseOrderPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrder/id/{id}/processDropshipping": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/purchaseOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "processDropshipping response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrder"
        ]
      }
    },
    "/purchaseOrderRequest": {
      "get": {
        "description": "query purchaseOrderRequest",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/purchaseOrderRequest"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "purchaseOrderRequest response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query purchaseOrderRequest",
        "tags": [
          "purchaseOrderRequest"
        ]
      },
      "post": {
        "description": "create a purchaseOrderRequest",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purchaseOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseOrderRequest"
                }
              }
            },
            "description": "purchaseOrderRequest create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a purchaseOrderRequest",
        "tags": [
          "purchaseOrderRequest"
        ]
      }
    },
    "/purchaseOrderRequest/count": {
      "get": {
        "description": "count purchaseOrderRequest",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count purchaseOrderRequest",
        "tags": [
          "purchaseOrderRequest"
        ]
      }
    },
    "/purchaseOrderRequest/id/{id}": {
      "delete": {
        "description": "delete a purchaseOrderRequest",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "purchaseOrderRequest delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a purchaseOrderRequest",
        "tags": [
          "purchaseOrderRequest"
        ]
      },
      "get": {
        "description": "query a specific purchaseOrderRequest",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseOrderRequest"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific purchaseOrderRequest",
        "tags": [
          "purchaseOrderRequest"
        ]
      },
      "put": {
        "description": "update purchaseOrderRequest",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/purchaseOrderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/purchaseOrderRequest"
                }
              }
            },
            "description": "purchaseOrderRequest update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a purchaseOrderRequest",
        "tags": [
          "purchaseOrderRequest"
        ]
      }
    },
    "/purchaseOrderRequest/id/{id}/createBlanketPurchaseOrder": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "offerItemId": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "orderedQuantity": {
                    "format": "decimal",
                    "type": "string"
                  }
                },
                "required": [
                  "offerItemId",
                  "orderedQuantity"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "type": "boolean"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createBlanketPurchaseOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrderRequest"
        ]
      }
    },
    "/purchaseOrderRequest/id/{id}/createPurchaseOrder": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "offerId": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "offerItemToUpdateSupplierInformation": {
                    "items": {
                      "properties": {
                        "createOrUpdateArticleSupplySource": {
                          "type": "boolean"
                        },
                        "offerItemId": {
                          "format": "int32",
                          "type": "integer"
                        },
                        "quantity": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "salesOrderItemId": {
                          "format": "int32",
                          "type": "integer"
                        },
                        "updateInformation": {
                          "type": "boolean"
                        },
                        "updatePurchasePrice": {
                          "$ref": "#/components/schemas/purchaseOrderRequestPurchasePriceUpdateMode"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "salesOrderId": {
                    "format": "int32",
                    "type": "integer"
                  }
                },
                "required": [
                  "offerId",
                  "offerItemToUpdateSupplierInformation"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/purchaseOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPurchaseOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "purchaseOrderRequest"
        ]
      }
    },
    "/quotation": {
      "get": {
        "description": "query quotation",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/quotation"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "quotation response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query quotation",
        "tags": [
          "quotation"
        ]
      },
      "post": {
        "description": "create a quotation",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quotation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quotation"
                }
              }
            },
            "description": "quotation create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a quotation",
        "tags": [
          "quotation"
        ]
      }
    },
    "/quotation/count": {
      "get": {
        "description": "count quotation",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count quotation",
        "tags": [
          "quotation"
        ]
      }
    },
    "/quotation/id/{id}": {
      "delete": {
        "description": "delete a quotation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "quotation delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a quotation",
        "tags": [
          "quotation"
        ]
      },
      "get": {
        "description": "query a specific quotation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quotation"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific quotation",
        "tags": [
          "quotation"
        ]
      },
      "put": {
        "description": "update quotation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/quotation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quotation"
                }
              }
            },
            "description": "quotation update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a quotation",
        "tags": [
          "quotation"
        ]
      }
    },
    "/quotation/id/{id}/accept": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "acceptQuotationItems": {
                    "items": {
                      "properties": {
                        "quantity": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "quotationItemId": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "accept response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "quotation"
        ]
      }
    },
    "/quotation/id/{id}/createNewVersion": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/quotation"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createNewVersion response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "quotation"
        ]
      }
    },
    "/quotation/id/{id}/createQuotationPdf": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createQuotationPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "quotation"
        ]
      }
    },
    "/quotation/id/{id}/downloadLatestQuotationPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestQuotationPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "quotation"
        ]
      }
    },
    "/quotation/id/{id}/inquire": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "taskId": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/quotation"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "inquire response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "quotation"
        ]
      }
    },
    "/recordEmailingRule": {
      "get": {
        "description": "query recordEmailingRule",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/recordEmailingRule"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "recordEmailingRule response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query recordEmailingRule",
        "tags": [
          "recordEmailingRule"
        ]
      },
      "post": {
        "description": "create a recordEmailingRule",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordEmailingRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordEmailingRule"
                }
              }
            },
            "description": "recordEmailingRule create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a recordEmailingRule",
        "tags": [
          "recordEmailingRule"
        ]
      }
    },
    "/recordEmailingRule/count": {
      "get": {
        "description": "count recordEmailingRule",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count recordEmailingRule",
        "tags": [
          "recordEmailingRule"
        ]
      }
    },
    "/recordEmailingRule/id/{id}": {
      "delete": {
        "description": "delete a recordEmailingRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "recordEmailingRule delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a recordEmailingRule",
        "tags": [
          "recordEmailingRule"
        ]
      },
      "get": {
        "description": "query a specific recordEmailingRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordEmailingRule"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific recordEmailingRule",
        "tags": [
          "recordEmailingRule"
        ]
      },
      "put": {
        "description": "update recordEmailingRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/recordEmailingRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recordEmailingRule"
                }
              }
            },
            "description": "recordEmailingRule update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a recordEmailingRule",
        "tags": [
          "recordEmailingRule"
        ]
      }
    },
    "/remotePrintJob": {
      "get": {
        "description": "query remotePrintJob",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/remotePrintJob"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "remotePrintJob response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query remotePrintJob",
        "tags": [
          "remotePrintJob"
        ]
      },
      "post": {
        "description": "create a remotePrintJob",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/remotePrintJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remotePrintJob"
                }
              }
            },
            "description": "remotePrintJob create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a remotePrintJob",
        "tags": [
          "remotePrintJob"
        ]
      }
    },
    "/remotePrintJob/count": {
      "get": {
        "description": "count remotePrintJob",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count remotePrintJob",
        "tags": [
          "remotePrintJob"
        ]
      }
    },
    "/remotePrintJob/createPrintJobWithDocument": {
      "post": {
        "parameters": [
          {
            "in": "query",
            "name": "weclappOsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "printerName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "quantity",
            "required": true,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "documentName",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "documentDescription",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/remotePrintJob"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPrintJobWithDocument response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "remotePrintJob"
        ]
      }
    },
    "/remotePrintJob/id/{id}": {
      "delete": {
        "description": "delete a remotePrintJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "remotePrintJob delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a remotePrintJob",
        "tags": [
          "remotePrintJob"
        ]
      },
      "get": {
        "description": "query a specific remotePrintJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remotePrintJob"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific remotePrintJob",
        "tags": [
          "remotePrintJob"
        ]
      },
      "put": {
        "description": "update remotePrintJob",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/remotePrintJob"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/remotePrintJob"
                }
              }
            },
            "description": "remotePrintJob update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a remotePrintJob",
        "tags": [
          "remotePrintJob"
        ]
      }
    },
    "/salesChannel/activeSalesChannels": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/salesChannel"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "activeSalesChannels response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesChannel"
        ]
      }
    },
    "/salesInvoice": {
      "get": {
        "description": "query salesInvoice",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/salesInvoice"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "salesInvoice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query salesInvoice",
        "tags": [
          "salesInvoice"
        ]
      },
      "post": {
        "description": "create a salesInvoice",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/salesInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesInvoice"
                }
              }
            },
            "description": "salesInvoice create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a salesInvoice",
        "tags": [
          "salesInvoice"
        ]
      }
    },
    "/salesInvoice/count": {
      "get": {
        "description": "count salesInvoice",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count salesInvoice",
        "tags": [
          "salesInvoice"
        ]
      }
    },
    "/salesInvoice/id/{id}": {
      "delete": {
        "description": "delete a salesInvoice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "salesInvoice delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a salesInvoice",
        "tags": [
          "salesInvoice"
        ]
      },
      "get": {
        "description": "query a specific salesInvoice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesInvoice"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific salesInvoice",
        "tags": [
          "salesInvoice"
        ]
      },
      "put": {
        "description": "update salesInvoice",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/salesInvoice"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesInvoice"
                }
              }
            },
            "description": "salesInvoice update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a salesInvoice",
        "tags": [
          "salesInvoice"
        ]
      }
    },
    "/salesInvoice/id/{id}/addSalesOrders": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "collectiveInvoicePositionPrintType": {
                    "enum": [
                      "ORDER_POSITION_GROUP",
                      "PERFORMANCE_RECORD_POSITION_GROUP",
                      "SHIPMENT_POSITION_GROUP"
                    ],
                    "type": "string"
                  },
                  "salesOrderIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "required": [
                  "salesOrderIds"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "addSalesOrders response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesInvoice"
        ]
      }
    },
    "/salesInvoice/id/{id}/createCreditNote": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "itemIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createCreditNote response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesInvoice"
        ]
      }
    },
    "/salesInvoice/id/{id}/downloadLatestSalesInvoicePdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestSalesInvoicePdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesInvoice"
        ]
      }
    },
    "/salesOpenItem": {
      "get": {
        "description": "query salesOpenItem",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/salesOpenItem"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "salesOpenItem response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query salesOpenItem",
        "tags": [
          "salesOpenItem"
        ]
      }
    },
    "/salesOpenItem/count": {
      "get": {
        "description": "count salesOpenItem",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count salesOpenItem",
        "tags": [
          "salesOpenItem"
        ]
      }
    },
    "/salesOpenItem/id/{id}": {
      "get": {
        "description": "query a specific salesOpenItem",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesOpenItem"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific salesOpenItem",
        "tags": [
          "salesOpenItem"
        ]
      }
    },
    "/salesOpenItem/id/{id}/createPaymentApplication": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "moneyTransactionId": {
                    "type": "string"
                  }
                },
                "required": [
                  "moneyTransactionId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesOpenItem"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPaymentApplication response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOpenItem"
        ]
      }
    },
    "/salesOrder": {
      "get": {
        "description": "query salesOrder",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "additionalProperties",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "additionalProperties": {
                      "properties": {
                        "bookedBillableWork": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "bookedWork": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "costOfServices": {
                          "items": {
                            "$ref": "#/components/schemas/amount"
                          },
                          "type": "array"
                        },
                        "invoiceableServices": {
                          "items": {
                            "$ref": "#/components/schemas/amount"
                          },
                          "type": "array"
                        },
                        "invoicedServices": {
                          "items": {
                            "$ref": "#/components/schemas/amount"
                          },
                          "type": "array"
                        },
                        "notInvoicedServices": {
                          "items": {
                            "$ref": "#/components/schemas/amount"
                          },
                          "type": "array"
                        },
                        "plannedBillableEffort": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "plannedEffort": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/salesOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "salesOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query salesOrder",
        "tags": [
          "salesOrder"
        ]
      },
      "post": {
        "description": "create a salesOrder",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/salesOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesOrder"
                }
              }
            },
            "description": "salesOrder create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a salesOrder",
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/count": {
      "get": {
        "description": "count salesOrder",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count salesOrder",
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/defaultValuesForCreate": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "customerId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "responsibleUserId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "defaultValuesForCreate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}": {
      "delete": {
        "description": "delete a salesOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "salesOrder delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a salesOrder",
        "tags": [
          "salesOrder"
        ]
      },
      "get": {
        "description": "query a specific salesOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesOrder"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific salesOrder",
        "tags": [
          "salesOrder"
        ]
      },
      "put": {
        "description": "update salesOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/salesOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesOrder"
                }
              }
            },
            "description": "salesOrder update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a salesOrder",
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/cancelOrManuallyClose": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "cancelOrManuallyClose response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createAdvancePaymentRequest": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createAdvancePaymentRequest response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createCustomerReturn": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/incomingGoods"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createCustomerReturn response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createDropshipping": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "supplierId": {
                    "type": "string"
                  }
                },
                "required": [
                  "supplierId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/purchaseOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createDropshipping response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createPartPaymentInvoice": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPartPaymentInvoice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createPrepaymentFinalInvoice": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPrepaymentFinalInvoice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createPurchaseOrder": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "multiplePurchaseOrders": {
                    "type": "boolean"
                  },
                  "supplierId": {
                    "type": "string"
                  },
                  "warehouseId": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/purchaseOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPurchaseOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createSalesInvoice": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "additionalSalesOrderIds": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createSalesInvoice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/createShipment": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/shipment"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createShipment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/downloadLatestOrderConfirmationPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestOrderConfirmationPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/manuallyClose": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "manuallyClose response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/shipOrderForExternalFulfillment": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shipOrderForExternalFulfillment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/toggleProjectTeam": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "toggleProjectTeam response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesOrder/id/{id}/toggleServicesFinished": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "toggleServicesFinished response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "salesOrder"
        ]
      }
    },
    "/salesStage": {
      "get": {
        "description": "query salesStage",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/salesStage"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "salesStage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query salesStage",
        "tags": [
          "salesStage"
        ]
      },
      "post": {
        "description": "create a salesStage",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/salesStage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesStage"
                }
              }
            },
            "description": "salesStage create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a salesStage",
        "tags": [
          "salesStage"
        ]
      }
    },
    "/salesStage/count": {
      "get": {
        "description": "count salesStage",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count salesStage",
        "tags": [
          "salesStage"
        ]
      }
    },
    "/salesStage/id/{id}": {
      "delete": {
        "description": "delete a salesStage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "salesStage delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a salesStage",
        "tags": [
          "salesStage"
        ]
      },
      "get": {
        "description": "query a specific salesStage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesStage"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific salesStage",
        "tags": [
          "salesStage"
        ]
      },
      "put": {
        "description": "update salesStage",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/salesStage"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/salesStage"
                }
              }
            },
            "description": "salesStage update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a salesStage",
        "tags": [
          "salesStage"
        ]
      }
    },
    "/sector": {
      "get": {
        "description": "query sector",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "sector response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query sector",
        "tags": [
          "sector"
        ]
      },
      "post": {
        "description": "create a sector",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "sector create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a sector",
        "tags": [
          "sector"
        ]
      }
    },
    "/sector/count": {
      "get": {
        "description": "count sector",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count sector",
        "tags": [
          "sector"
        ]
      }
    },
    "/sector/id/{id}": {
      "delete": {
        "description": "delete a sector",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "sector delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a sector",
        "tags": [
          "sector"
        ]
      },
      "get": {
        "description": "query a specific sector",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific sector",
        "tags": [
          "sector"
        ]
      },
      "put": {
        "description": "update sector",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "sector update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a sector",
        "tags": [
          "sector"
        ]
      }
    },
    "/sepaDirectDebitMandate": {
      "get": {
        "description": "query sepaDirectDebitMandate",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/sepaDirectDebitMandate"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "sepaDirectDebitMandate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query sepaDirectDebitMandate",
        "tags": [
          "sepaDirectDebitMandate"
        ]
      },
      "post": {
        "description": "create a sepaDirectDebitMandate",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sepaDirectDebitMandate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sepaDirectDebitMandate"
                }
              }
            },
            "description": "sepaDirectDebitMandate create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a sepaDirectDebitMandate",
        "tags": [
          "sepaDirectDebitMandate"
        ]
      }
    },
    "/sepaDirectDebitMandate/count": {
      "get": {
        "description": "count sepaDirectDebitMandate",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count sepaDirectDebitMandate",
        "tags": [
          "sepaDirectDebitMandate"
        ]
      }
    },
    "/sepaDirectDebitMandate/id/{id}": {
      "delete": {
        "description": "delete a sepaDirectDebitMandate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "sepaDirectDebitMandate delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a sepaDirectDebitMandate",
        "tags": [
          "sepaDirectDebitMandate"
        ]
      },
      "get": {
        "description": "query a specific sepaDirectDebitMandate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sepaDirectDebitMandate"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific sepaDirectDebitMandate",
        "tags": [
          "sepaDirectDebitMandate"
        ]
      },
      "put": {
        "description": "update sepaDirectDebitMandate",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sepaDirectDebitMandate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/sepaDirectDebitMandate"
                }
              }
            },
            "description": "sepaDirectDebitMandate update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a sepaDirectDebitMandate",
        "tags": [
          "sepaDirectDebitMandate"
        ]
      }
    },
    "/serialNumber": {
      "get": {
        "description": "query serialNumber",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/serialNumber"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "serialNumber response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query serialNumber",
        "tags": [
          "serialNumber"
        ]
      }
    },
    "/serialNumber/count": {
      "get": {
        "description": "count serialNumber",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count serialNumber",
        "tags": [
          "serialNumber"
        ]
      }
    },
    "/serialNumber/id/{id}": {
      "get": {
        "description": "query a specific serialNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serialNumber"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific serialNumber",
        "tags": [
          "serialNumber"
        ]
      },
      "put": {
        "description": "update serialNumber",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/serialNumber"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/serialNumber"
                }
              }
            },
            "description": "serialNumber update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a serialNumber",
        "tags": [
          "serialNumber"
        ]
      }
    },
    "/shelf": {
      "get": {
        "description": "query shelf",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shelf"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shelf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shelf",
        "tags": [
          "shelf"
        ]
      },
      "post": {
        "description": "create a shelf",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shelf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shelf"
                }
              }
            },
            "description": "shelf create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shelf",
        "tags": [
          "shelf"
        ]
      }
    },
    "/shelf/count": {
      "get": {
        "description": "count shelf",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shelf",
        "tags": [
          "shelf"
        ]
      }
    },
    "/shelf/id/{id}": {
      "delete": {
        "description": "delete a shelf",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shelf delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shelf",
        "tags": [
          "shelf"
        ]
      },
      "get": {
        "description": "query a specific shelf",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shelf"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shelf",
        "tags": [
          "shelf"
        ]
      },
      "put": {
        "description": "update shelf",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shelf"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shelf"
                }
              }
            },
            "description": "shelf update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shelf",
        "tags": [
          "shelf"
        ]
      }
    },
    "/shelf/id/{id}/activate": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/shelf"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "activate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shelf"
        ]
      }
    },
    "/shelf/id/{id}/deactivate": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/shelf"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "deactivate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shelf"
        ]
      }
    },
    "/shipment": {
      "get": {
        "description": "query shipment",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shipment"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shipment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shipment",
        "tags": [
          "shipment"
        ]
      },
      "post": {
        "description": "create a shipment",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment"
                }
              }
            },
            "description": "shipment create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shipment",
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/count": {
      "get": {
        "description": "count shipment",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shipment",
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/id/{id}": {
      "delete": {
        "description": "delete a shipment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shipment delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shipment",
        "tags": [
          "shipment"
        ]
      },
      "get": {
        "description": "query a specific shipment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shipment",
        "tags": [
          "shipment"
        ]
      },
      "put": {
        "description": "update shipment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipment"
                }
              }
            },
            "description": "shipment update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shipment",
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/id/{id}/createPickingList": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createPickingList response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/id/{id}/createSalesInvoice": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/salesInvoice"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createSalesInvoice response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/id/{id}/createShippingLabelPdf": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "description",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createShippingLabelPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/id/{id}/downloadLatestDeliveryNotePdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestDeliveryNotePdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/id/{id}/downloadLatestPickingListPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestPickingListPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipment/id/{id}/downloadLatestShippingLabelPdf": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadLatestShippingLabelPdf response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "shipment"
        ]
      }
    },
    "/shipmentMethod": {
      "get": {
        "description": "query shipmentMethod",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shipmentMethod"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shipmentMethod response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shipmentMethod",
        "tags": [
          "shipmentMethod"
        ]
      },
      "post": {
        "description": "create a shipmentMethod",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentMethod"
                }
              }
            },
            "description": "shipmentMethod create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shipmentMethod",
        "tags": [
          "shipmentMethod"
        ]
      }
    },
    "/shipmentMethod/count": {
      "get": {
        "description": "count shipmentMethod",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shipmentMethod",
        "tags": [
          "shipmentMethod"
        ]
      }
    },
    "/shipmentMethod/id/{id}": {
      "delete": {
        "description": "delete a shipmentMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shipmentMethod delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shipmentMethod",
        "tags": [
          "shipmentMethod"
        ]
      },
      "get": {
        "description": "query a specific shipmentMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentMethod"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shipmentMethod",
        "tags": [
          "shipmentMethod"
        ]
      },
      "put": {
        "description": "update shipmentMethod",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentMethod"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentMethod"
                }
              }
            },
            "description": "shipmentMethod update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shipmentMethod",
        "tags": [
          "shipmentMethod"
        ]
      }
    },
    "/shipmentReturnAssessment": {
      "get": {
        "description": "query shipmentReturnAssessment",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shipmentReturnDescription"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shipmentReturnAssessment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shipmentReturnAssessment",
        "tags": [
          "shipmentReturnAssessment"
        ]
      },
      "post": {
        "description": "create a shipmentReturnAssessment",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnAssessment create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shipmentReturnAssessment",
        "tags": [
          "shipmentReturnAssessment"
        ]
      }
    },
    "/shipmentReturnAssessment/count": {
      "get": {
        "description": "count shipmentReturnAssessment",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shipmentReturnAssessment",
        "tags": [
          "shipmentReturnAssessment"
        ]
      }
    },
    "/shipmentReturnAssessment/id/{id}": {
      "delete": {
        "description": "delete a shipmentReturnAssessment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shipmentReturnAssessment delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shipmentReturnAssessment",
        "tags": [
          "shipmentReturnAssessment"
        ]
      },
      "get": {
        "description": "query a specific shipmentReturnAssessment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shipmentReturnAssessment",
        "tags": [
          "shipmentReturnAssessment"
        ]
      },
      "put": {
        "description": "update shipmentReturnAssessment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnAssessment update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shipmentReturnAssessment",
        "tags": [
          "shipmentReturnAssessment"
        ]
      }
    },
    "/shipmentReturnError": {
      "get": {
        "description": "query shipmentReturnError",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shipmentReturnDescription"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shipmentReturnError response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shipmentReturnError",
        "tags": [
          "shipmentReturnError"
        ]
      },
      "post": {
        "description": "create a shipmentReturnError",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnError create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shipmentReturnError",
        "tags": [
          "shipmentReturnError"
        ]
      }
    },
    "/shipmentReturnError/count": {
      "get": {
        "description": "count shipmentReturnError",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shipmentReturnError",
        "tags": [
          "shipmentReturnError"
        ]
      }
    },
    "/shipmentReturnError/id/{id}": {
      "delete": {
        "description": "delete a shipmentReturnError",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shipmentReturnError delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shipmentReturnError",
        "tags": [
          "shipmentReturnError"
        ]
      },
      "get": {
        "description": "query a specific shipmentReturnError",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shipmentReturnError",
        "tags": [
          "shipmentReturnError"
        ]
      },
      "put": {
        "description": "update shipmentReturnError",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnError update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shipmentReturnError",
        "tags": [
          "shipmentReturnError"
        ]
      }
    },
    "/shipmentReturnReason": {
      "get": {
        "description": "query shipmentReturnReason",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shipmentReturnDescription"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shipmentReturnReason response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shipmentReturnReason",
        "tags": [
          "shipmentReturnReason"
        ]
      },
      "post": {
        "description": "create a shipmentReturnReason",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnReason create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shipmentReturnReason",
        "tags": [
          "shipmentReturnReason"
        ]
      }
    },
    "/shipmentReturnReason/count": {
      "get": {
        "description": "count shipmentReturnReason",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shipmentReturnReason",
        "tags": [
          "shipmentReturnReason"
        ]
      }
    },
    "/shipmentReturnReason/id/{id}": {
      "delete": {
        "description": "delete a shipmentReturnReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shipmentReturnReason delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shipmentReturnReason",
        "tags": [
          "shipmentReturnReason"
        ]
      },
      "get": {
        "description": "query a specific shipmentReturnReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shipmentReturnReason",
        "tags": [
          "shipmentReturnReason"
        ]
      },
      "put": {
        "description": "update shipmentReturnReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnReason update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shipmentReturnReason",
        "tags": [
          "shipmentReturnReason"
        ]
      }
    },
    "/shipmentReturnRectification": {
      "get": {
        "description": "query shipmentReturnRectification",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shipmentReturnDescription"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shipmentReturnRectification response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shipmentReturnRectification",
        "tags": [
          "shipmentReturnRectification"
        ]
      },
      "post": {
        "description": "create a shipmentReturnRectification",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnRectification create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shipmentReturnRectification",
        "tags": [
          "shipmentReturnRectification"
        ]
      }
    },
    "/shipmentReturnRectification/count": {
      "get": {
        "description": "count shipmentReturnRectification",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shipmentReturnRectification",
        "tags": [
          "shipmentReturnRectification"
        ]
      }
    },
    "/shipmentReturnRectification/id/{id}": {
      "delete": {
        "description": "delete a shipmentReturnRectification",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shipmentReturnRectification delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shipmentReturnRectification",
        "tags": [
          "shipmentReturnRectification"
        ]
      },
      "get": {
        "description": "query a specific shipmentReturnRectification",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shipmentReturnRectification",
        "tags": [
          "shipmentReturnRectification"
        ]
      },
      "put": {
        "description": "update shipmentReturnRectification",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shipmentReturnDescription"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shipmentReturnDescription"
                }
              }
            },
            "description": "shipmentReturnRectification update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shipmentReturnRectification",
        "tags": [
          "shipmentReturnRectification"
        ]
      }
    },
    "/shippingCarrier": {
      "get": {
        "description": "query shippingCarrier",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/shippingCarrier"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "shippingCarrier response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query shippingCarrier",
        "tags": [
          "shippingCarrier"
        ]
      },
      "post": {
        "description": "create a shippingCarrier",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shippingCarrier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shippingCarrier"
                }
              }
            },
            "description": "shippingCarrier create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a shippingCarrier",
        "tags": [
          "shippingCarrier"
        ]
      }
    },
    "/shippingCarrier/count": {
      "get": {
        "description": "count shippingCarrier",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count shippingCarrier",
        "tags": [
          "shippingCarrier"
        ]
      }
    },
    "/shippingCarrier/id/{id}": {
      "delete": {
        "description": "delete a shippingCarrier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "shippingCarrier delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a shippingCarrier",
        "tags": [
          "shippingCarrier"
        ]
      },
      "get": {
        "description": "query a specific shippingCarrier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shippingCarrier"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific shippingCarrier",
        "tags": [
          "shippingCarrier"
        ]
      },
      "put": {
        "description": "update shippingCarrier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/shippingCarrier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/shippingCarrier"
                }
              }
            },
            "description": "shippingCarrier update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a shippingCarrier",
        "tags": [
          "shippingCarrier"
        ]
      }
    },
    "/storageLocation": {
      "get": {
        "description": "query storageLocation",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/storageLocation"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "storageLocation response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query storageLocation",
        "tags": [
          "storageLocation"
        ]
      },
      "post": {
        "description": "create a storageLocation",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocation"
                }
              }
            },
            "description": "storageLocation create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a storageLocation",
        "tags": [
          "storageLocation"
        ]
      }
    },
    "/storageLocation/count": {
      "get": {
        "description": "count storageLocation",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count storageLocation",
        "tags": [
          "storageLocation"
        ]
      }
    },
    "/storageLocation/id/{id}": {
      "delete": {
        "description": "delete a storageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "storageLocation delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a storageLocation",
        "tags": [
          "storageLocation"
        ]
      },
      "get": {
        "description": "query a specific storageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocation"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific storageLocation",
        "tags": [
          "storageLocation"
        ]
      },
      "put": {
        "description": "update storageLocation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storageLocation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storageLocation"
                }
              }
            },
            "description": "storageLocation update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a storageLocation",
        "tags": [
          "storageLocation"
        ]
      }
    },
    "/storageLocation/id/{id}/activate": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/storageLocation"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "activate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "storageLocation"
        ]
      }
    },
    "/storageLocation/id/{id}/deactivate": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/storageLocation"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "deactivate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "storageLocation"
        ]
      }
    },
    "/storagePlace": {
      "get": {
        "description": "query storagePlace",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/storagePlace"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "storagePlace response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query storagePlace",
        "tags": [
          "storagePlace"
        ]
      }
    },
    "/storagePlace/count": {
      "get": {
        "description": "count storagePlace",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count storagePlace",
        "tags": [
          "storagePlace"
        ]
      }
    },
    "/storagePlace/id/{id}": {
      "get": {
        "description": "query a specific storagePlace",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storagePlace"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific storagePlace",
        "tags": [
          "storagePlace"
        ]
      }
    },
    "/storagePlaceBlockingReason": {
      "get": {
        "description": "query storagePlaceBlockingReason",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "storagePlaceBlockingReason response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query storagePlaceBlockingReason",
        "tags": [
          "storagePlaceBlockingReason"
        ]
      },
      "post": {
        "description": "create a storagePlaceBlockingReason",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "storagePlaceBlockingReason create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a storagePlaceBlockingReason",
        "tags": [
          "storagePlaceBlockingReason"
        ]
      }
    },
    "/storagePlaceBlockingReason/count": {
      "get": {
        "description": "count storagePlaceBlockingReason",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count storagePlaceBlockingReason",
        "tags": [
          "storagePlaceBlockingReason"
        ]
      }
    },
    "/storagePlaceBlockingReason/id/{id}": {
      "delete": {
        "description": "delete a storagePlaceBlockingReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "storagePlaceBlockingReason delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a storagePlaceBlockingReason",
        "tags": [
          "storagePlaceBlockingReason"
        ]
      },
      "get": {
        "description": "query a specific storagePlaceBlockingReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific storagePlaceBlockingReason",
        "tags": [
          "storagePlaceBlockingReason"
        ]
      },
      "put": {
        "description": "update storagePlaceBlockingReason",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "storagePlaceBlockingReason update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a storagePlaceBlockingReason",
        "tags": [
          "storagePlaceBlockingReason"
        ]
      }
    },
    "/storagePlaceSize": {
      "get": {
        "description": "query storagePlaceSize",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/storagePlaceSize"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "storagePlaceSize response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query storagePlaceSize",
        "tags": [
          "storagePlaceSize"
        ]
      },
      "post": {
        "description": "create a storagePlaceSize",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storagePlaceSize"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storagePlaceSize"
                }
              }
            },
            "description": "storagePlaceSize create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a storagePlaceSize",
        "tags": [
          "storagePlaceSize"
        ]
      }
    },
    "/storagePlaceSize/count": {
      "get": {
        "description": "count storagePlaceSize",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count storagePlaceSize",
        "tags": [
          "storagePlaceSize"
        ]
      }
    },
    "/storagePlaceSize/id/{id}": {
      "delete": {
        "description": "delete a storagePlaceSize",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "storagePlaceSize delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a storagePlaceSize",
        "tags": [
          "storagePlaceSize"
        ]
      },
      "get": {
        "description": "query a specific storagePlaceSize",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storagePlaceSize"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific storagePlaceSize",
        "tags": [
          "storagePlaceSize"
        ]
      },
      "put": {
        "description": "update storagePlaceSize",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/storagePlaceSize"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/storagePlaceSize"
                }
              }
            },
            "description": "storagePlaceSize update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a storagePlaceSize",
        "tags": [
          "storagePlaceSize"
        ]
      }
    },
    "/supplier": {
      "get": {
        "deprecated": true,
        "description": "query supplier",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/supplier"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "supplier response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query supplier",
        "tags": [
          "supplier"
        ]
      },
      "post": {
        "deprecated": true,
        "description": "create a supplier",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/supplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            },
            "description": "supplier create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a supplier",
        "tags": [
          "supplier"
        ]
      }
    },
    "/supplier/count": {
      "get": {
        "deprecated": true,
        "description": "count supplier",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count supplier",
        "tags": [
          "supplier"
        ]
      }
    },
    "/supplier/id/{id}": {
      "delete": {
        "deprecated": true,
        "description": "delete a supplier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "supplier delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a supplier",
        "tags": [
          "supplier"
        ]
      },
      "get": {
        "deprecated": true,
        "description": "query a specific supplier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific supplier",
        "tags": [
          "supplier"
        ]
      },
      "put": {
        "deprecated": true,
        "description": "update supplier",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/supplier"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/supplier"
                }
              }
            },
            "description": "supplier update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a supplier",
        "tags": [
          "supplier"
        ]
      }
    },
    "/supplier/id/{id}/downloadImage": {
      "get": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "downloadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "supplier"
        ]
      }
    },
    "/supplier/id/{id}/uploadImage": {
      "post": {
        "deprecated": true,
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "application/pdf": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/jpeg": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            },
            "image/png": {
              "schema": {
                "format": "binary",
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "uploadImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "supplier"
        ]
      }
    },
    "/system/createDemoTestSystem": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "allUsers": {
                    "type": "boolean"
                  },
                  "label": {
                    "type": "string"
                  },
                  "preset": {
                    "enum": [
                      "NONE",
                      "PROD_SYSTEM",
                      "TEMPLATE_SYSTEM"
                    ],
                    "type": "string"
                  }
                },
                "required": [
                  "label",
                  "preset"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createDemoTestSystem response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "system"
        ]
      }
    },
    "/system/demoTestSystemInfo": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/demoTestSystemInfo"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "demoTestSystemInfo response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "system"
        ]
      }
    },
    "/system/licenses": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/license"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "licenses response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "system"
        ]
      }
    },
    "/tag": {
      "get": {
        "description": "query tag",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/tag"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "tag response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query tag",
        "tags": [
          "tag"
        ]
      },
      "post": {
        "description": "create a tag",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            },
            "description": "tag create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a tag",
        "tags": [
          "tag"
        ]
      }
    },
    "/tag/count": {
      "get": {
        "description": "count tag",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count tag",
        "tags": [
          "tag"
        ]
      }
    },
    "/tag/id/{id}": {
      "delete": {
        "description": "delete a tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "tag delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a tag",
        "tags": [
          "tag"
        ]
      },
      "get": {
        "description": "query a specific tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific tag",
        "tags": [
          "tag"
        ]
      },
      "put": {
        "description": "update tag",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tag"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tag"
                }
              }
            },
            "description": "tag update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a tag",
        "tags": [
          "tag"
        ]
      }
    },
    "/tax": {
      "get": {
        "description": "query tax",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/tax"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "tax response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query tax",
        "tags": [
          "tax"
        ]
      },
      "post": {
        "description": "create a tax",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax"
                }
              }
            },
            "description": "tax create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a tax",
        "tags": [
          "tax"
        ]
      }
    },
    "/tax/configurePurchaseTaxes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "countryCode": {
                    "type": "string"
                  }
                },
                "required": [
                  "countryCode"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "configurePurchaseTaxes response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "tax"
        ]
      }
    },
    "/tax/configureSalesTaxes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "countryCode": {
                    "type": "string"
                  },
                  "personsThirdCountryFreeTax": {
                    "type": "boolean"
                  },
                  "taxEuPersonsRecipientCountry": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "countryCode",
                  "personsThirdCountryFreeTax",
                  "taxEuPersonsRecipientCountry"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "configureSalesTaxes response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "tax"
        ]
      }
    },
    "/tax/count": {
      "get": {
        "description": "count tax",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count tax",
        "tags": [
          "tax"
        ]
      }
    },
    "/tax/findPurchaseTax": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "recipientCountryCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dispatchCountryCode",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "taxRateType",
            "required": false,
            "schema": {
              "enum": [
                "REDUCED",
                "SLIGHTLY_REDUCED",
                "STANDARD",
                "SUPER_REDUCED",
                "ZERO"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partyType",
            "required": false,
            "schema": {
              "enum": [
                "ORGANIZATION",
                "PERSON"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "debtorCreditorCodeId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "productCodeId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "format": "timestamp",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/tax"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "findPurchaseTax response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "tax"
        ]
      }
    },
    "/tax/findSalesTax": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "dispatchCountryCode",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "recipientCountryCode",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "taxRateType",
            "required": false,
            "schema": {
              "enum": [
                "REDUCED",
                "SLIGHTLY_REDUCED",
                "STANDARD",
                "SUPER_REDUCED",
                "ZERO"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "partyType",
            "required": false,
            "schema": {
              "enum": [
                "ORGANIZATION",
                "PERSON"
              ],
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "debtorCreditorCodeId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "productCodeId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "validVatId",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "date",
            "required": false,
            "schema": {
              "format": "timestamp",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/tax"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "findSalesTax response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "tax"
        ]
      }
    },
    "/tax/id/{id}": {
      "delete": {
        "description": "delete a tax",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "tax delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a tax",
        "tags": [
          "tax"
        ]
      },
      "get": {
        "description": "query a specific tax",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific tax",
        "tags": [
          "tax"
        ]
      },
      "put": {
        "description": "update tax",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/tax"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/tax"
                }
              }
            },
            "description": "tax update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a tax",
        "tags": [
          "tax"
        ]
      }
    },
    "/tax/resetSystemTaxes": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "countryCode": {
                    "type": "string"
                  },
                  "initAllStores": {
                    "type": "boolean"
                  },
                  "personsThirdCountryFreeTax": {
                    "type": "boolean"
                  },
                  "taxRecipientCountry": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "countryCode",
                  "initAllStores",
                  "personsThirdCountryFreeTax",
                  "taxRecipientCountry"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/successResponse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "resetSystemTaxes response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "tax"
        ]
      }
    },
    "/taxDeterminationRule": {
      "get": {
        "description": "query taxDeterminationRule",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/taxDeterminationRule"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "taxDeterminationRule response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query taxDeterminationRule",
        "tags": [
          "taxDeterminationRule"
        ]
      },
      "post": {
        "description": "create a taxDeterminationRule",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxDeterminationRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxDeterminationRule"
                }
              }
            },
            "description": "taxDeterminationRule create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a taxDeterminationRule",
        "tags": [
          "taxDeterminationRule"
        ]
      }
    },
    "/taxDeterminationRule/count": {
      "get": {
        "description": "count taxDeterminationRule",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count taxDeterminationRule",
        "tags": [
          "taxDeterminationRule"
        ]
      }
    },
    "/taxDeterminationRule/id/{id}": {
      "delete": {
        "description": "delete a taxDeterminationRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "taxDeterminationRule delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a taxDeterminationRule",
        "tags": [
          "taxDeterminationRule"
        ]
      },
      "get": {
        "description": "query a specific taxDeterminationRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxDeterminationRule"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific taxDeterminationRule",
        "tags": [
          "taxDeterminationRule"
        ]
      },
      "put": {
        "description": "update taxDeterminationRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/taxDeterminationRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/taxDeterminationRule"
                }
              }
            },
            "description": "taxDeterminationRule update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a taxDeterminationRule",
        "tags": [
          "taxDeterminationRule"
        ]
      }
    },
    "/termOfPayment": {
      "get": {
        "description": "query termOfPayment",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/termOfPayment"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "termOfPayment response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query termOfPayment",
        "tags": [
          "termOfPayment"
        ]
      },
      "post": {
        "description": "create a termOfPayment",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/termOfPayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/termOfPayment"
                }
              }
            },
            "description": "termOfPayment create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a termOfPayment",
        "tags": [
          "termOfPayment"
        ]
      }
    },
    "/termOfPayment/count": {
      "get": {
        "description": "count termOfPayment",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count termOfPayment",
        "tags": [
          "termOfPayment"
        ]
      }
    },
    "/termOfPayment/id/{id}": {
      "delete": {
        "description": "delete a termOfPayment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "termOfPayment delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a termOfPayment",
        "tags": [
          "termOfPayment"
        ]
      },
      "get": {
        "description": "query a specific termOfPayment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/termOfPayment"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific termOfPayment",
        "tags": [
          "termOfPayment"
        ]
      },
      "put": {
        "description": "update termOfPayment",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/termOfPayment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/termOfPayment"
                }
              }
            },
            "description": "termOfPayment update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a termOfPayment",
        "tags": [
          "termOfPayment"
        ]
      }
    },
    "/ticket": {
      "get": {
        "description": "query ticket",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "additionalProperties",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "additionalProperties": {
                      "properties": {
                        "assignmentTime": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "billableTime": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "costOfServices": {
                          "items": {
                            "$ref": "#/components/schemas/amount"
                          },
                          "type": "array"
                        },
                        "invoiceableTime": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "processTime": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "resolutionTime": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        },
                        "responseTime": {
                          "items": {
                            "$ref": "#/components/schemas/duration"
                          },
                          "type": "array"
                        }
                      },
                      "type": "object"
                    },
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticket"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticket response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticket",
        "tags": [
          "ticket"
        ]
      },
      "post": {
        "description": "create a ticket",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            },
            "description": "ticket create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ticket",
        "tags": [
          "ticket"
        ]
      }
    },
    "/ticket/count": {
      "get": {
        "description": "count ticket",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticket",
        "tags": [
          "ticket"
        ]
      }
    },
    "/ticket/id/{id}": {
      "delete": {
        "description": "delete a ticket",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ticket delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ticket",
        "tags": [
          "ticket"
        ]
      },
      "get": {
        "description": "query a specific ticket",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticket",
        "tags": [
          "ticket"
        ]
      },
      "put": {
        "description": "update ticket",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticket"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticket"
                }
              }
            },
            "description": "ticket update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ticket",
        "tags": [
          "ticket"
        ]
      }
    },
    "/ticket/id/{id}/createPublicPage": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createPublicPage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "ticket"
        ]
      }
    },
    "/ticket/id/{id}/disablePublicPage": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "disablePublicPage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "ticket"
        ]
      }
    },
    "/ticket/id/{id}/linkSalesOrder": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "salesOrderId": {
                    "format": "int32",
                    "type": "integer"
                  },
                  "taskIdToOrderItemId": {
                    "type": "object"
                  }
                },
                "required": [
                  "salesOrderId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "linkSalesOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "ticket"
        ]
      }
    },
    "/ticket/id/{id}/unlinkSalesOrder": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/ticket"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "unlinkSalesOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "ticket"
        ]
      }
    },
    "/ticketAssignmentRule": {
      "get": {
        "description": "query ticketAssignmentRule",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticketAssignmentRule"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketAssignmentRule response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketAssignmentRule",
        "tags": [
          "ticketAssignmentRule"
        ]
      },
      "post": {
        "description": "create a ticketAssignmentRule",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketAssignmentRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketAssignmentRule"
                }
              }
            },
            "description": "ticketAssignmentRule create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ticketAssignmentRule",
        "tags": [
          "ticketAssignmentRule"
        ]
      }
    },
    "/ticketAssignmentRule/count": {
      "get": {
        "description": "count ticketAssignmentRule",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketAssignmentRule",
        "tags": [
          "ticketAssignmentRule"
        ]
      }
    },
    "/ticketAssignmentRule/id/{id}": {
      "delete": {
        "description": "delete a ticketAssignmentRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ticketAssignmentRule delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ticketAssignmentRule",
        "tags": [
          "ticketAssignmentRule"
        ]
      },
      "get": {
        "description": "query a specific ticketAssignmentRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketAssignmentRule"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketAssignmentRule",
        "tags": [
          "ticketAssignmentRule"
        ]
      },
      "put": {
        "description": "update ticketAssignmentRule",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketAssignmentRule"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketAssignmentRule"
                }
              }
            },
            "description": "ticketAssignmentRule update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ticketAssignmentRule",
        "tags": [
          "ticketAssignmentRule"
        ]
      }
    },
    "/ticketCategory": {
      "get": {
        "description": "query ticketCategory",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticketCategory"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketCategory response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketCategory",
        "tags": [
          "ticketCategory"
        ]
      }
    },
    "/ticketCategory/count": {
      "get": {
        "description": "count ticketCategory",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketCategory",
        "tags": [
          "ticketCategory"
        ]
      }
    },
    "/ticketCategory/id/{id}": {
      "get": {
        "description": "query a specific ticketCategory",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketCategory"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketCategory",
        "tags": [
          "ticketCategory"
        ]
      }
    },
    "/ticketChannel": {
      "get": {
        "description": "query ticketChannel",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketChannel response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketChannel",
        "tags": [
          "ticketChannel"
        ]
      },
      "post": {
        "description": "create a ticketChannel",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "ticketChannel create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ticketChannel",
        "tags": [
          "ticketChannel"
        ]
      }
    },
    "/ticketChannel/count": {
      "get": {
        "description": "count ticketChannel",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketChannel",
        "tags": [
          "ticketChannel"
        ]
      }
    },
    "/ticketChannel/id/{id}": {
      "delete": {
        "description": "delete a ticketChannel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ticketChannel delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ticketChannel",
        "tags": [
          "ticketChannel"
        ]
      },
      "get": {
        "description": "query a specific ticketChannel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketChannel",
        "tags": [
          "ticketChannel"
        ]
      },
      "put": {
        "description": "update ticketChannel",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "ticketChannel update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ticketChannel",
        "tags": [
          "ticketChannel"
        ]
      }
    },
    "/ticketFaq": {
      "get": {
        "description": "query ticketFaq",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticketFaq"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketFaq response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketFaq",
        "tags": [
          "ticketFaq"
        ]
      },
      "post": {
        "description": "create a ticketFaq",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketFaq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketFaq"
                }
              }
            },
            "description": "ticketFaq create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ticketFaq",
        "tags": [
          "ticketFaq"
        ]
      }
    },
    "/ticketFaq/count": {
      "get": {
        "description": "count ticketFaq",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketFaq",
        "tags": [
          "ticketFaq"
        ]
      }
    },
    "/ticketFaq/id/{id}": {
      "delete": {
        "description": "delete a ticketFaq",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ticketFaq delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ticketFaq",
        "tags": [
          "ticketFaq"
        ]
      },
      "get": {
        "description": "query a specific ticketFaq",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketFaq"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketFaq",
        "tags": [
          "ticketFaq"
        ]
      },
      "put": {
        "description": "update ticketFaq",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketFaq"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketFaq"
                }
              }
            },
            "description": "ticketFaq update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ticketFaq",
        "tags": [
          "ticketFaq"
        ]
      }
    },
    "/ticketPoolingGroup": {
      "get": {
        "description": "query ticketPoolingGroup",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticketPoolingGroup"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketPoolingGroup response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketPoolingGroup",
        "tags": [
          "ticketPoolingGroup"
        ]
      }
    },
    "/ticketPoolingGroup/count": {
      "get": {
        "description": "count ticketPoolingGroup",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketPoolingGroup",
        "tags": [
          "ticketPoolingGroup"
        ]
      }
    },
    "/ticketPoolingGroup/id/{id}": {
      "get": {
        "description": "query a specific ticketPoolingGroup",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketPoolingGroup"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketPoolingGroup",
        "tags": [
          "ticketPoolingGroup"
        ]
      }
    },
    "/ticketServiceLevelAgreement": {
      "get": {
        "description": "query ticketServiceLevelAgreement",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticketServiceLevelAgreement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketServiceLevelAgreement response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketServiceLevelAgreement",
        "tags": [
          "ticketServiceLevelAgreement"
        ]
      },
      "post": {
        "description": "create a ticketServiceLevelAgreement",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketServiceLevelAgreement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketServiceLevelAgreement"
                }
              }
            },
            "description": "ticketServiceLevelAgreement create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ticketServiceLevelAgreement",
        "tags": [
          "ticketServiceLevelAgreement"
        ]
      }
    },
    "/ticketServiceLevelAgreement/count": {
      "get": {
        "description": "count ticketServiceLevelAgreement",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketServiceLevelAgreement",
        "tags": [
          "ticketServiceLevelAgreement"
        ]
      }
    },
    "/ticketServiceLevelAgreement/id/{id}": {
      "delete": {
        "description": "delete a ticketServiceLevelAgreement",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ticketServiceLevelAgreement delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ticketServiceLevelAgreement",
        "tags": [
          "ticketServiceLevelAgreement"
        ]
      },
      "get": {
        "description": "query a specific ticketServiceLevelAgreement",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketServiceLevelAgreement"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketServiceLevelAgreement",
        "tags": [
          "ticketServiceLevelAgreement"
        ]
      },
      "put": {
        "description": "update ticketServiceLevelAgreement",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketServiceLevelAgreement"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketServiceLevelAgreement"
                }
              }
            },
            "description": "ticketServiceLevelAgreement update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ticketServiceLevelAgreement",
        "tags": [
          "ticketServiceLevelAgreement"
        ]
      }
    },
    "/ticketStatus": {
      "get": {
        "description": "query ticketStatus",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticketStatus"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketStatus response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketStatus",
        "tags": [
          "ticketStatus"
        ]
      },
      "post": {
        "description": "create a ticketStatus",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketStatus"
                }
              }
            },
            "description": "ticketStatus create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ticketStatus",
        "tags": [
          "ticketStatus"
        ]
      }
    },
    "/ticketStatus/count": {
      "get": {
        "description": "count ticketStatus",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketStatus",
        "tags": [
          "ticketStatus"
        ]
      }
    },
    "/ticketStatus/id/{id}": {
      "delete": {
        "description": "delete a ticketStatus",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ticketStatus delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ticketStatus",
        "tags": [
          "ticketStatus"
        ]
      },
      "get": {
        "description": "query a specific ticketStatus",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketStatus"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketStatus",
        "tags": [
          "ticketStatus"
        ]
      },
      "put": {
        "description": "update ticketStatus",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketStatus"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketStatus"
                }
              }
            },
            "description": "ticketStatus update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ticketStatus",
        "tags": [
          "ticketStatus"
        ]
      }
    },
    "/ticketType": {
      "get": {
        "description": "query ticketType",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/ticketType"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "ticketType response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query ticketType",
        "tags": [
          "ticketType"
        ]
      },
      "post": {
        "description": "create a ticketType",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketType"
                }
              }
            },
            "description": "ticketType create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a ticketType",
        "tags": [
          "ticketType"
        ]
      }
    },
    "/ticketType/count": {
      "get": {
        "description": "count ticketType",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count ticketType",
        "tags": [
          "ticketType"
        ]
      }
    },
    "/ticketType/id/{id}": {
      "delete": {
        "description": "delete a ticketType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "ticketType delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a ticketType",
        "tags": [
          "ticketType"
        ]
      },
      "get": {
        "description": "query a specific ticketType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketType"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific ticketType",
        "tags": [
          "ticketType"
        ]
      },
      "put": {
        "description": "update ticketType",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ticketType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ticketType"
                }
              }
            },
            "description": "ticketType update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a ticketType",
        "tags": [
          "ticketType"
        ]
      }
    },
    "/title": {
      "get": {
        "description": "query title",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/customValue"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "title response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query title",
        "tags": [
          "title"
        ]
      },
      "post": {
        "description": "create a title",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "title create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a title",
        "tags": [
          "title"
        ]
      }
    },
    "/title/count": {
      "get": {
        "description": "count title",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count title",
        "tags": [
          "title"
        ]
      }
    },
    "/title/id/{id}": {
      "delete": {
        "description": "delete a title",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "title delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a title",
        "tags": [
          "title"
        ]
      },
      "get": {
        "description": "query a specific title",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific title",
        "tags": [
          "title"
        ]
      },
      "put": {
        "description": "update title",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/customValue"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customValue"
                }
              }
            },
            "description": "title update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a title",
        "tags": [
          "title"
        ]
      }
    },
    "/translation": {
      "get": {
        "description": "query translation",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/translation"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "translation response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query translation",
        "tags": [
          "translation"
        ]
      },
      "post": {
        "description": "create a translation",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/translation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translation"
                }
              }
            },
            "description": "translation create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a translation",
        "tags": [
          "translation"
        ]
      }
    },
    "/translation/count": {
      "get": {
        "description": "count translation",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count translation",
        "tags": [
          "translation"
        ]
      }
    },
    "/translation/id/{id}": {
      "delete": {
        "description": "delete a translation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "translation delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a translation",
        "tags": [
          "translation"
        ]
      },
      "get": {
        "description": "query a specific translation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translation"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific translation",
        "tags": [
          "translation"
        ]
      },
      "put": {
        "description": "update translation",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/translation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/translation"
                }
              }
            },
            "description": "translation update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a translation",
        "tags": [
          "translation"
        ]
      }
    },
    "/transportationOrder": {
      "get": {
        "description": "query transportationOrder",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/transportationOrder"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "transportationOrder response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query transportationOrder",
        "tags": [
          "transportationOrder"
        ]
      },
      "post": {
        "description": "create a transportationOrder",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transportationOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transportationOrder"
                }
              }
            },
            "description": "transportationOrder create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a transportationOrder",
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/transportationOrder/count": {
      "get": {
        "description": "count transportationOrder",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count transportationOrder",
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/transportationOrder/id/{id}": {
      "delete": {
        "description": "delete a transportationOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "transportationOrder delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a transportationOrder",
        "tags": [
          "transportationOrder"
        ]
      },
      "get": {
        "description": "query a specific transportationOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transportationOrder"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific transportationOrder",
        "tags": [
          "transportationOrder"
        ]
      },
      "put": {
        "description": "update transportationOrder",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/transportationOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/transportationOrder"
                }
              }
            },
            "description": "transportationOrder update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a transportationOrder",
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/transportationOrder/id/{id}/createPickingList": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "createPickingList response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/transportationOrder/id/{id}/createTransportationOrderFromUnpickedRecords": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "loadingEquipmentArticleId": {
                    "type": "string"
                  },
                  "loadingEquipmentIdentifierId": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/transportationOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "createTransportationOrderFromUnpickedRecords response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/transportationOrder/id/{id}/internalTransportReferencesForPickUp": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "ignoreCurrentLoadingEquipment",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/internalTransportReference"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "internalTransportReferencesForPickUp response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/transportationOrder/id/{id}/pickPick": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "bookLoadingEquipmentOnDissolveOfPreferred": {
                    "type": "boolean"
                  },
                  "inputQuantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "inputSerialNumbers": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "pickId": {
                    "type": "string"
                  },
                  "preferredPackagingUnitId": {
                    "type": "string"
                  }
                },
                "required": [
                  "bookLoadingEquipmentOnDissolveOfPreferred",
                  "inputQuantity",
                  "pickId"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/transportationOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "pickPick response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/transportationOrder/id/{id}/putDownInternalTransportReference": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "targetLoadingEquipmentIdentifierId": {
                    "type": "string"
                  },
                  "targetStoragePlaceId": {
                    "type": "string"
                  },
                  "targetTransportReferenceId": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/transportationOrder"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "putDownInternalTransportReference response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "transportationOrder"
        ]
      }
    },
    "/unit": {
      "get": {
        "description": "query unit",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/unit"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "unit response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query unit",
        "tags": [
          "unit"
        ]
      },
      "post": {
        "description": "create a unit",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            },
            "description": "unit create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a unit",
        "tags": [
          "unit"
        ]
      }
    },
    "/unit/count": {
      "get": {
        "description": "count unit",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count unit",
        "tags": [
          "unit"
        ]
      }
    },
    "/unit/id/{id}": {
      "delete": {
        "description": "delete a unit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "unit delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a unit",
        "tags": [
          "unit"
        ]
      },
      "get": {
        "description": "query a specific unit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific unit",
        "tags": [
          "unit"
        ]
      },
      "put": {
        "description": "update unit",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/unit"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/unit"
                }
              }
            },
            "description": "unit update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a unit",
        "tags": [
          "unit"
        ]
      }
    },
    "/user": {
      "get": {
        "description": "query user",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/user"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "user response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query user",
        "tags": [
          "user"
        ]
      },
      "post": {
        "description": "create a user",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "user create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a user",
        "tags": [
          "user"
        ]
      }
    },
    "/user/count": {
      "get": {
        "description": "count user",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count user",
        "tags": [
          "user"
        ]
      }
    },
    "/user/currentUser": {
      "get": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/user"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "currentUser response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/user/id/{id}": {
      "delete": {
        "description": "delete a user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "user delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a user",
        "tags": [
          "user"
        ]
      },
      "get": {
        "description": "query a specific user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific user",
        "tags": [
          "user"
        ]
      },
      "put": {
        "description": "update user",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/user"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            },
            "description": "user update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a user",
        "tags": [
          "user"
        ]
      }
    },
    "/user/id/{id}/userImage": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "imageId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "userImage response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/user/id/{id}/userImageThumbnail": {
      "get": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "scaleWidth",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "scaleHeight",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "imageId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "*/*": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "application/pdf": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/jpeg": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              },
              "image/png": {
                "schema": {
                  "format": "binary",
                  "type": "string"
                }
              }
            },
            "description": "userImageThumbnail response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "user"
        ]
      }
    },
    "/userRole": {
      "get": {
        "description": "query userRole",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/userRole"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "userRole response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query userRole",
        "tags": [
          "userRole"
        ]
      },
      "post": {
        "description": "create a userRole",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userRole"
                }
              }
            },
            "description": "userRole create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a userRole",
        "tags": [
          "userRole"
        ]
      }
    },
    "/userRole/count": {
      "get": {
        "description": "count userRole",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count userRole",
        "tags": [
          "userRole"
        ]
      }
    },
    "/userRole/disableUserRolesDuringTrial": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "disableUserRolesDuringTrial response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "userRole"
        ]
      }
    },
    "/userRole/enableUserRolesDuringTrial": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "enableUserRolesDuringTrial response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "userRole"
        ]
      }
    },
    "/userRole/id/{id}": {
      "delete": {
        "description": "delete a userRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "userRole delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a userRole",
        "tags": [
          "userRole"
        ]
      },
      "get": {
        "description": "query a specific userRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userRole"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific userRole",
        "tags": [
          "userRole"
        ]
      },
      "put": {
        "description": "update userRole",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/userRole"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/userRole"
                }
              }
            },
            "description": "userRole update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a userRole",
        "tags": [
          "userRole"
        ]
      }
    },
    "/variantArticle": {
      "get": {
        "description": "query variantArticle",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/variantArticle"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "variantArticle response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query variantArticle",
        "tags": [
          "variantArticle"
        ]
      },
      "post": {
        "description": "create a variantArticle",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantArticle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantArticle"
                }
              }
            },
            "description": "variantArticle create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a variantArticle",
        "tags": [
          "variantArticle"
        ]
      }
    },
    "/variantArticle/count": {
      "get": {
        "description": "count variantArticle",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count variantArticle",
        "tags": [
          "variantArticle"
        ]
      }
    },
    "/variantArticle/id/{id}": {
      "delete": {
        "description": "delete a variantArticle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "variantArticle delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a variantArticle",
        "tags": [
          "variantArticle"
        ]
      },
      "get": {
        "description": "query a specific variantArticle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantArticle"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific variantArticle",
        "tags": [
          "variantArticle"
        ]
      },
      "put": {
        "description": "update variantArticle",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantArticle"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantArticle"
                }
              }
            },
            "description": "variantArticle update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a variantArticle",
        "tags": [
          "variantArticle"
        ]
      }
    },
    "/variantArticleAttribute": {
      "get": {
        "description": "query variantArticleAttribute",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/variantArticleAttribute"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "variantArticleAttribute response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query variantArticleAttribute",
        "tags": [
          "variantArticleAttribute"
        ]
      },
      "post": {
        "description": "create a variantArticleAttribute",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantArticleAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantArticleAttribute"
                }
              }
            },
            "description": "variantArticleAttribute create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a variantArticleAttribute",
        "tags": [
          "variantArticleAttribute"
        ]
      }
    },
    "/variantArticleAttribute/count": {
      "get": {
        "description": "count variantArticleAttribute",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count variantArticleAttribute",
        "tags": [
          "variantArticleAttribute"
        ]
      }
    },
    "/variantArticleAttribute/id/{id}": {
      "delete": {
        "description": "delete a variantArticleAttribute",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "variantArticleAttribute delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a variantArticleAttribute",
        "tags": [
          "variantArticleAttribute"
        ]
      },
      "get": {
        "description": "query a specific variantArticleAttribute",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantArticleAttribute"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific variantArticleAttribute",
        "tags": [
          "variantArticleAttribute"
        ]
      },
      "put": {
        "description": "update variantArticleAttribute",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/variantArticleAttribute"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantArticleAttribute"
                }
              }
            },
            "description": "variantArticleAttribute update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a variantArticleAttribute",
        "tags": [
          "variantArticleAttribute"
        ]
      }
    },
    "/variantArticleVariant": {
      "get": {
        "description": "query variantArticleVariant",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/variantArticleVariant"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "variantArticleVariant response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query variantArticleVariant",
        "tags": [
          "variantArticleVariant"
        ]
      }
    },
    "/variantArticleVariant/count": {
      "get": {
        "description": "count variantArticleVariant",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count variantArticleVariant",
        "tags": [
          "variantArticleVariant"
        ]
      }
    },
    "/variantArticleVariant/id/{id}": {
      "get": {
        "description": "query a specific variantArticleVariant",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/variantArticleVariant"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific variantArticleVariant",
        "tags": [
          "variantArticleVariant"
        ]
      }
    },
    "/warehouse": {
      "get": {
        "description": "query warehouse",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouse"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "warehouse response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query warehouse",
        "tags": [
          "warehouse"
        ]
      },
      "post": {
        "description": "create a warehouse",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            },
            "description": "warehouse create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a warehouse",
        "tags": [
          "warehouse"
        ]
      }
    },
    "/warehouse/count": {
      "get": {
        "description": "count warehouse",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count warehouse",
        "tags": [
          "warehouse"
        ]
      }
    },
    "/warehouse/id/{id}": {
      "delete": {
        "description": "delete a warehouse",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "warehouse delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a warehouse",
        "tags": [
          "warehouse"
        ]
      },
      "get": {
        "description": "query a specific warehouse",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific warehouse",
        "tags": [
          "warehouse"
        ]
      },
      "put": {
        "description": "update warehouse",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/warehouse"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouse"
                }
              }
            },
            "description": "warehouse update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a warehouse",
        "tags": [
          "warehouse"
        ]
      }
    },
    "/warehouse/id/{id}/activate": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/warehouse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "activate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouse"
        ]
      }
    },
    "/warehouse/id/{id}/deactivate": {
      "post": {
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {},
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "$ref": "#/components/schemas/warehouse"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "deactivate response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouse"
        ]
      }
    },
    "/warehouseStock": {
      "get": {
        "description": "query warehouseStock",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStock"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "warehouseStock response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query warehouseStock",
        "tags": [
          "warehouseStock"
        ]
      }
    },
    "/warehouseStock/count": {
      "get": {
        "description": "count warehouseStock",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count warehouseStock",
        "tags": [
          "warehouseStock"
        ]
      }
    },
    "/warehouseStock/id/{id}": {
      "get": {
        "description": "query a specific warehouseStock",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouseStock"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific warehouseStock",
        "tags": [
          "warehouseStock"
        ]
      }
    },
    "/warehouseStockMovement": {
      "get": {
        "description": "query warehouseStockMovement",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStockMovement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "warehouseStockMovement response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query warehouseStockMovement",
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/bookDirectStockTransfer": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "articleId": {
                    "type": "string"
                  },
                  "batchNumber": {
                    "type": "string"
                  },
                  "customAttributes": {
                    "items": {
                      "properties": {
                        "attributeDefinitionId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "customAttributeDefinition",
                            "service": "customAttributeDefinition"
                          }
                        },
                        "booleanValue": {
                          "type": "boolean"
                        },
                        "dateValue": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "entityId": {
                          "type": "string"
                        },
                        "entityReferences": {
                          "items": {
                            "$ref": "#/components/schemas/entityReference"
                          },
                          "type": "array"
                        },
                        "numberValue": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "selectedValueId": {
                          "type": "string"
                        },
                        "selectedValues": {
                          "items": {
                            "$ref": "#/components/schemas/onlyId"
                          },
                          "type": "array"
                        },
                        "stringValue": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "destinationStoragePlaceId": {
                    "type": "string"
                  },
                  "internalTransportReferenceId": {
                    "type": "string"
                  },
                  "quantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "serialNumbers": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "sourceStoragePlaceId": {
                    "type": "string"
                  }
                },
                "required": [
                  "articleId",
                  "destinationStoragePlaceId",
                  "quantity"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStockMovement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bookDirectStockTransfer response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/bookFromLoadingEquipmentPlace": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customAttributes": {
                    "items": {
                      "properties": {
                        "attributeDefinitionId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "customAttributeDefinition",
                            "service": "customAttributeDefinition"
                          }
                        },
                        "booleanValue": {
                          "type": "boolean"
                        },
                        "dateValue": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "entityId": {
                          "type": "string"
                        },
                        "entityReferences": {
                          "items": {
                            "$ref": "#/components/schemas/entityReference"
                          },
                          "type": "array"
                        },
                        "numberValue": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "selectedValueId": {
                          "type": "string"
                        },
                        "selectedValues": {
                          "items": {
                            "$ref": "#/components/schemas/onlyId"
                          },
                          "type": "array"
                        },
                        "stringValue": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "loadingEquipmentArticleId": {
                    "type": "string"
                  },
                  "movementNote": {
                    "type": "string"
                  },
                  "quantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "targetInternalTransportReferenceId": {
                    "type": "string"
                  },
                  "targetStoragePlaceId": {
                    "type": "string"
                  }
                },
                "required": [
                  "loadingEquipmentArticleId",
                  "quantity"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStockMovement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bookFromLoadingEquipmentPlace response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/bookIncomingMovement": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "articleId": {
                    "type": "string"
                  },
                  "articleValuationPrice": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "batchNumber": {
                    "type": "string"
                  },
                  "batchNumberExpirationDate": {
                    "format": "timestamp",
                    "type": "integer"
                  },
                  "customAttributes": {
                    "items": {
                      "properties": {
                        "attributeDefinitionId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "customAttributeDefinition",
                            "service": "customAttributeDefinition"
                          }
                        },
                        "booleanValue": {
                          "type": "boolean"
                        },
                        "dateValue": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "entityId": {
                          "type": "string"
                        },
                        "entityReferences": {
                          "items": {
                            "$ref": "#/components/schemas/entityReference"
                          },
                          "type": "array"
                        },
                        "numberValue": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "selectedValueId": {
                          "type": "string"
                        },
                        "selectedValues": {
                          "items": {
                            "$ref": "#/components/schemas/onlyId"
                          },
                          "type": "array"
                        },
                        "stringValue": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "internalTransportReferenceId": {
                    "type": "string"
                  },
                  "loadingEquipmentIdentifierId": {
                    "type": "string"
                  },
                  "movementNote": {
                    "type": "string"
                  },
                  "quantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "serialNumbers": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "targetStoragePlaceId": {
                    "type": "string"
                  }
                },
                "required": [
                  "articleId",
                  "quantity"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStockMovement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bookIncomingMovement response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/bookOntoInternalTransportReference": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "articleId": {
                    "type": "string"
                  },
                  "baseArticleQuantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "batchNumber": {
                    "type": "string"
                  },
                  "bookFromLoadingEquipmentPlace": {
                    "type": "boolean"
                  },
                  "bookLoadingEquipmentOnDissolveOfPreferred": {
                    "type": "boolean"
                  },
                  "customAttributes": {
                    "items": {
                      "properties": {
                        "attributeDefinitionId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "customAttributeDefinition",
                            "service": "customAttributeDefinition"
                          }
                        },
                        "booleanValue": {
                          "type": "boolean"
                        },
                        "dateValue": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "entityId": {
                          "type": "string"
                        },
                        "entityReferences": {
                          "items": {
                            "$ref": "#/components/schemas/entityReference"
                          },
                          "type": "array"
                        },
                        "numberValue": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "selectedValueId": {
                          "type": "string"
                        },
                        "selectedValues": {
                          "items": {
                            "$ref": "#/components/schemas/onlyId"
                          },
                          "type": "array"
                        },
                        "stringValue": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "loadingEquipmentArticleId": {
                    "type": "string"
                  },
                  "loadingEquipmentIdentifierId": {
                    "type": "string"
                  },
                  "movementNote": {
                    "type": "string"
                  },
                  "serialNumbers": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "sourceInternalTransportReferenceId": {
                    "type": "string"
                  },
                  "sourceStoragePlaceId": {
                    "type": "string"
                  },
                  "targetInternalTransportReferenceId": {
                    "type": "string"
                  }
                },
                "required": [
                  "articleId",
                  "baseArticleQuantity"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStockMovement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bookOntoInternalTransportReference response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/bookOutgoingMovement": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "articleId": {
                    "type": "string"
                  },
                  "batchNumber": {
                    "type": "string"
                  },
                  "costCenterId": {
                    "type": "string"
                  },
                  "customAttributes": {
                    "items": {
                      "properties": {
                        "attributeDefinitionId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "customAttributeDefinition",
                            "service": "customAttributeDefinition"
                          }
                        },
                        "booleanValue": {
                          "type": "boolean"
                        },
                        "dateValue": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "entityId": {
                          "type": "string"
                        },
                        "entityReferences": {
                          "items": {
                            "$ref": "#/components/schemas/entityReference"
                          },
                          "type": "array"
                        },
                        "numberValue": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "selectedValueId": {
                          "type": "string"
                        },
                        "selectedValues": {
                          "items": {
                            "$ref": "#/components/schemas/onlyId"
                          },
                          "type": "array"
                        },
                        "stringValue": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "internalTransportReferenceId": {
                    "type": "string"
                  },
                  "movementNote": {
                    "type": "string"
                  },
                  "quantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "serialNumbers": {
                    "items": {
                      "type": "string"
                    },
                    "type": "array"
                  },
                  "sourceStoragePlaceId": {
                    "type": "string"
                  }
                },
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStockMovement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bookOutgoingMovement response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/bookToLoadingEquipmentPlace": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "customAttributes": {
                    "items": {
                      "properties": {
                        "attributeDefinitionId": {
                          "type": "string",
                          "x-weclapp": {
                            "entity": "customAttributeDefinition",
                            "service": "customAttributeDefinition"
                          }
                        },
                        "booleanValue": {
                          "type": "boolean"
                        },
                        "dateValue": {
                          "format": "timestamp",
                          "type": "integer"
                        },
                        "entityId": {
                          "type": "string"
                        },
                        "entityReferences": {
                          "items": {
                            "$ref": "#/components/schemas/entityReference"
                          },
                          "type": "array"
                        },
                        "numberValue": {
                          "format": "decimal",
                          "type": "string"
                        },
                        "selectedValueId": {
                          "type": "string"
                        },
                        "selectedValues": {
                          "items": {
                            "$ref": "#/components/schemas/onlyId"
                          },
                          "type": "array"
                        },
                        "stringValue": {
                          "type": "string"
                        }
                      },
                      "type": "object"
                    },
                    "type": "array"
                  },
                  "loadingEquipmentArticleId": {
                    "type": "string"
                  },
                  "movementNote": {
                    "type": "string"
                  },
                  "quantity": {
                    "format": "decimal",
                    "type": "string"
                  },
                  "sourceInternalTransportReferenceId": {
                    "type": "string"
                  },
                  "sourceStoragePlaceId": {
                    "type": "string"
                  }
                },
                "required": [
                  "loadingEquipmentArticleId",
                  "quantity"
                ],
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/warehouseStockMovement"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "bookToLoadingEquipmentPlace response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/count": {
      "get": {
        "description": "count warehouseStockMovement",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count warehouseStockMovement",
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/warehouseStockMovement/id/{id}": {
      "get": {
        "description": "query a specific warehouseStockMovement",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/warehouseStockMovement"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific warehouseStockMovement",
        "tags": [
          "warehouseStockMovement"
        ]
      }
    },
    "/webhook": {
      "get": {
        "description": "query webhook",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/webhook"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "webhook response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query webhook",
        "tags": [
          "webhook"
        ]
      },
      "post": {
        "description": "create a webhook",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "webhook create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a webhook",
        "tags": [
          "webhook"
        ]
      }
    },
    "/webhook/count": {
      "get": {
        "description": "count webhook",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count webhook",
        "tags": [
          "webhook"
        ]
      }
    },
    "/webhook/id/{id}": {
      "delete": {
        "description": "delete a webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "webhook delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a webhook",
        "tags": [
          "webhook"
        ]
      },
      "get": {
        "description": "query a specific webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific webhook",
        "tags": [
          "webhook"
        ]
      },
      "put": {
        "description": "update webhook",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/webhook"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/webhook"
                }
              }
            },
            "description": "webhook update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a webhook",
        "tags": [
          "webhook"
        ]
      }
    },
    "/weclappOs": {
      "get": {
        "description": "query weclappOs",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "pageSize",
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "in": "query",
            "name": "serializeNulls",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "in": "query",
            "name": "sort",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "properties",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "includeReferencedEntities",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "items": {
                        "$ref": "#/components/schemas/weclappOs"
                      },
                      "type": "array"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "weclappOs response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query weclappOs",
        "tags": [
          "weclappOs"
        ]
      },
      "post": {
        "description": "create a weclappOs",
        "parameters": [
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/weclappOs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/weclappOs"
                }
              }
            },
            "description": "weclappOs create response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "create a weclappOs",
        "tags": [
          "weclappOs"
        ]
      }
    },
    "/weclappOs/count": {
      "get": {
        "description": "count weclappOs",
        "parameters": [],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "result": {
                      "format": "int64",
                      "type": "integer"
                    }
                  },
                  "type": "object"
                }
              }
            },
            "description": "count"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "count weclappOs",
        "tags": [
          "weclappOs"
        ]
      }
    },
    "/weclappOs/id/{id}": {
      "delete": {
        "description": "delete a weclappOs",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "weclappOs delete response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "delete a weclappOs",
        "tags": [
          "weclappOs"
        ]
      },
      "get": {
        "description": "query a specific weclappOs",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/weclappOs"
                }
              }
            },
            "description": "get by id"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "query a specific weclappOs",
        "tags": [
          "weclappOs"
        ]
      },
      "put": {
        "description": "update weclappOs",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "dryRun",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/weclappOs"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/weclappOs"
                }
              }
            },
            "description": "weclappOs update response"
          },
          "default": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/apiProblem"
                }
              }
            },
            "description": "error response"
          }
        },
        "summary": "update a weclappOs",
        "tags": [
          "weclappOs"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "abstractBillOfMaterial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "abstractBookRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "batchNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "confirmedByUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "confirmedDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "internalTransportReferenceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "internalTransportReference",
                  "service": "internalTransportReference"
                }
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "serialNumbers": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "storagePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "abstractEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/onlyId"
          },
          {
            "properties": {
              "createdDate": {
                "format": "timestamp",
                "readOnly": true,
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "lastModifiedDate": {
                "format": "timestamp",
                "readOnly": true,
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "version": {
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "abstractEntityWithCustomAttributes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "customAttributes": {
                "items": {
                  "$ref": "#/components/schemas/customAttribute"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "abstractParty": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "addresses": {
                "items": {
                  "$ref": "#/components/schemas/address"
                },
                "type": "array"
              },
              "birthDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "company": {
                "maxLength": 1000,
                "type": "string"
              },
              "company2": {
                "maxLength": 1000,
                "type": "string"
              },
              "deliveryAddressId": {
                "type": "string"
              },
              "email": {
                "format": "email",
                "maxLength": 1000,
                "type": "string"
              },
              "fax": {
                "maxLength": 1000,
                "type": "string"
              },
              "firstName": {
                "maxLength": 1000,
                "type": "string"
              },
              "invoiceAddressId": {
                "type": "string"
              },
              "lastName": {
                "maxLength": 1000,
                "type": "string"
              },
              "middleName": {
                "maxLength": 1000,
                "type": "string"
              },
              "mobilePhone1": {
                "maxLength": 1000,
                "type": "string"
              },
              "onlineAccounts": {
                "items": {
                  "$ref": "#/components/schemas/onlineAccount"
                },
                "type": "array"
              },
              "partyType": {
                "$ref": "#/components/schemas/partyType"
              },
              "personCompany": {
                "maxLength": 1000,
                "type": "string"
              },
              "personDepartmentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "personDepartment"
                }
              },
              "personRoleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "personRole"
                }
              },
              "phone": {
                "maxLength": 1000,
                "type": "string"
              },
              "primaryAddressId": {
                "type": "string"
              },
              "salutation": {
                "$ref": "#/components/schemas/salutation"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "title": {
                "type": "string"
              },
              "titleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "title"
                }
              },
              "website": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "accountingTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountingImportDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "conversionRate": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "conversionRateDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "currencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "required": true,
                  "service": "currency"
                }
              },
              "currencyName": {
                "type": "string"
              },
              "draft": {
                "type": "boolean"
              },
              "externalRecordNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "internalRecordNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "reverseTransaction": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "status": {
                "$ref": "#/components/schemas/accountingTransactionStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "transactionDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "transactionDetails": {
                "items": {
                  "$ref": "#/components/schemas/accountingTransactionDetail"
                },
                "type": "array"
              },
              "transactionEstablishDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "transactionNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/bookingType"
              }
            },
            "type": "object"
          }
        ]
      },
      "accountingTransactionDetail": {
        "properties": {
          "accountId": {
            "type": "string",
            "x-weclapp": {
              "entity": "ledgerAccount",
              "required": true,
              "service": "ledgerAccount"
            }
          },
          "amount": {
            "format": "decimal",
            "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          },
          "debitCredit": {
            "$ref": "#/components/schemas/debitCreditIndicator",
            "x-weclapp": {
              "required": true
            }
          },
          "description": {
            "maxLength": 255,
            "type": "string"
          },
          "taxId": {
            "type": "string",
            "x-weclapp": {
              "entity": "tax",
              "service": "tax"
            }
          }
        },
        "type": "object"
      },
      "accountingTransactionStatus": {
        "enum": [
          "DRAFT",
          "ESTABLISHED",
          "PREBATCHBOOKING"
        ],
        "type": "string"
      },
      "address": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "city": {
                "maxLength": 1000,
                "type": "string"
              },
              "company": {
                "maxLength": 1000,
                "type": "string"
              },
              "company2": {
                "maxLength": 1000,
                "type": "string"
              },
              "countryCode": {
                "type": "string"
              },
              "deliveryAddress": {
                "type": "boolean"
              },
              "firstName": {
                "maxLength": 1000,
                "type": "string"
              },
              "globalLocationNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "invoiceAddress": {
                "type": "boolean"
              },
              "lastName": {
                "maxLength": 1000,
                "type": "string"
              },
              "phoneNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "postOfficeBoxCity": {
                "maxLength": 1000,
                "type": "string"
              },
              "postOfficeBoxNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "postOfficeBoxZipCode": {
                "maxLength": 1000,
                "type": "string"
              },
              "primeAddress": {
                "type": "boolean"
              },
              "salutation": {
                "$ref": "#/components/schemas/salutation"
              },
              "state": {
                "maxLength": 1000,
                "type": "string"
              },
              "street1": {
                "maxLength": 1000,
                "type": "string"
              },
              "street2": {
                "maxLength": 1000,
                "type": "string"
              },
              "title": {
                "type": "string"
              },
              "titleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "title"
                }
              },
              "zipcode": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "advancePaymentStatus": {
        "enum": [
          "OPEN",
          "PAID"
        ],
        "type": "string"
      },
      "amount": {
        "properties": {
          "amountInCompanyCurrency": {
            "format": "decimal",
            "type": "string"
          }
        },
        "type": "object"
      },
      "apiProblem": {
        "description": "response body on application errors",
        "properties": {
          "detail": {
            "title": "(RFC7807) A human-readable explanation specific to this occurrence of the problem",
            "type": "string"
          },
          "error": {
            "description": "Unstructured legacy error message. Deprecated, will be removed in the future.",
            "title": "Legacy error overview",
            "type": "string"
          },
          "instance": {
            "description": "In weclapp, this typically is the URI to the affected entity etc.",
            "title": "(RFC7807) A URI reference that identifies the specific occurrence of the problem",
            "type": "string"
          },
          "messages": {
            "description": "Unstructured legacy error messages. Deprecated, will be removed in the future.",
            "items": {
              "type": "object"
            },
            "title": "Legacy error messages",
            "type": "array"
          },
          "status": {
            "description": "(RFC7807) The HTTP status code generated by the origin server for this occurrence of the problem.",
            "format": "int32",
            "title": "(RFC7807) The HTTP status code",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "title": {
            "description": "This will not change from occurrence to occurrence of the problem",
            "title": "(RFC7807) A short, human-readable summary of the problem type",
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          },
          "type": {
            "$ref": "#/components/schemas/apiProblemType",
            "description": "For the purposes of evaluating this value in code it is sufficient (and recommended) to only examine the part after the last \u0027/\u0027. The URI points to the corresponding section in the online API documentation.",
            "title": "(RFC7807) A URI reference [RFC3986] that identifies the problem type"
          },
          "validationErrors": {
            "description": "Only available for problems of a validation type",
            "items": {
              "$ref": "#/components/schemas/validationError"
            },
            "title": "List of validation errors",
            "type": "array"
          }
        },
        "required": [
          "type",
          "title",
          "status"
        ],
        "title": "error response",
        "type": "object"
      },
      "apiProblemType": {
        "enum": [
          "/webapp/view/api/errors.html#!/errors/context",
          "/webapp/view/api/errors.html#!/errors/conversation",
          "/webapp/view/api/errors.html#!/errors/entity_not_found",
          "/webapp/view/api/errors.html#!/errors/forbidden",
          "/webapp/view/api/errors.html#!/errors/invalid_json",
          "/webapp/view/api/errors.html#!/errors/not_found",
          "/webapp/view/api/errors.html#!/errors/optimistic_lock",
          "/webapp/view/api/errors.html#!/errors/persistence",
          "/webapp/view/api/errors.html#!/errors/unauthorized",
          "/webapp/view/api/errors.html#!/errors/unexpected",
          "/webapp/view/api/errors.html#!/errors/validation"
        ],
        "type": "string"
      },
      "archivedEmail": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "bccAddresses": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "body": {
                "maxLength": 255,
                "type": "string"
              },
              "ccAddresses": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "fromAddress": {
                "maxLength": 1000,
                "type": "string"
              },
              "messageIdentifier": {
                "maxLength": 2000,
                "type": "string"
              },
              "receivedDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "replyToAddress": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "subject": {
                "maxLength": 255,
                "type": "string"
              },
              "toAddresses": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "article": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseArticle"
          },
          {
            "properties": {
              "accountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountNumber": {
                "type": "string"
              },
              "accountingCodeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "articleAccountingCode"
                }
              },
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "applyCashDiscount": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "articleAlternativeQuantities": {
                "items": {
                  "$ref": "#/components/schemas/articleAlternativeQuantity"
                },
                "type": "array"
              },
              "articleCalculationPrices": {
                "items": {
                  "$ref": "#/components/schemas/articleCalculationPrice"
                },
                "type": "array"
              },
              "articleCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "articleCategory",
                  "service": "articleCategory"
                }
              },
              "articleGrossWeight": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "articleHeight": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "articleImages": {
                "items": {
                  "$ref": "#/components/schemas/articleImage"
                },
                "type": "array"
              },
              "articleLength": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "articleNetWeight": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "articlePrices": {
                "items": {
                  "$ref": "#/components/schemas/articlePriceWithoutArticleReference"
                },
                "type": "array"
              },
              "articleType": {
                "$ref": "#/components/schemas/articleType",
                "x-weclapp": {
                  "required": true
                }
              },
              "articleWidth": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "availableForSalesChannels": {
                "items": {
                  "$ref": "#/components/schemas/distributionChannel"
                },
                "type": "array"
              },
              "availableInSale": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "averageDeliveryTime": {
                "format": "int32",
                "type": "integer"
              },
              "barcode": {
                "maxLength": 4000,
                "type": "string"
              },
              "batchNumberRequired": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "billOfMaterialPartDeliveryPossible": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "catalogCode": {
                "maxLength": 255,
                "type": "string"
              },
              "commissionRate": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "contractBillingCycle": {
                "$ref": "#/components/schemas/contractChargeInterval"
              },
              "contractBillingMode": {
                "$ref": "#/components/schemas/contractChargeIntervalType"
              },
              "countryOfOriginCode": {
                "type": "string"
              },
              "customerArticleNumbers": {
                "items": {
                  "$ref": "#/components/schemas/customerSpecificArticleAttributes"
                },
                "type": "array"
              },
              "customsDescription": {
                "maxLength": 256,
                "type": "string"
              },
              "customsTariffNumber": {
                "type": "string"
              },
              "customsTariffNumberId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "customsTariffNumber"
                }
              },
              "defaultLoadingEquipmentIdentifierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "loadingEquipmentIdentifier",
                  "service": "loadingEquipmentIdentifier"
                }
              },
              "defaultPriceCalculationType": {
                "$ref": "#/components/schemas/calculationType",
                "x-weclapp": {
                  "required": true
                }
              },
              "defaultStoragePlaces": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "defineIndividualTaskTemplates": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "expenseAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "expenseAccountNumber": {
                "type": "string"
              },
              "expirationDays": {
                "format": "int32",
                "type": "integer"
              },
              "invoicingType": {
                "$ref": "#/components/schemas/invoicingType"
              },
              "launchDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "loadingEquipmentArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "longText": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "lowLevelCode": {
                "format": "int32",
                "type": "integer"
              },
              "manufacturerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "manufacturer"
                }
              },
              "manufacturerName": {
                "type": "string"
              },
              "marginCalculationPriceType": {
                "$ref": "#/components/schemas/marginCalculationPriceType"
              },
              "minimumStockQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "packagingQuantity": {
                "format": "int32",
                "type": "integer"
              },
              "packagingUnitBaseArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "packagingUnitParentArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "plannedWorkingTimePerUnit": {
                "format": "int64",
                "type": "integer"
              },
              "priceCalculationParameters": {
                "items": {
                  "$ref": "#/components/schemas/priceCalculationParameter"
                },
                "type": "array"
              },
              "primarySupplySourceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "articleSupplySource",
                  "service": "articleSupplySource"
                }
              },
              "procurementLeadDays": {
                "format": "int32",
                "type": "integer"
              },
              "producerType": {
                "maxLength": 63,
                "type": "string"
              },
              "productionArticle": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "productionBillOfMaterialItems": {
                "items": {
                  "$ref": "#/components/schemas/billOfMaterial"
                },
                "type": "array"
              },
              "purchaseCostCenterId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "costCenter",
                  "service": "costCenter"
                }
              },
              "purchaseCostCenterNumber": {
                "type": "string"
              },
              "quantityConversions": {
                "items": {
                  "$ref": "#/components/schemas/quantityConversion"
                },
                "type": "array"
              },
              "ratingId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "articleRating"
                }
              },
              "ratingName": {
                "type": "string"
              },
              "recordItemGroupName": {
                "maxLength": 1000,
                "type": "string"
              },
              "safetyStockDays": {
                "format": "int32",
                "type": "integer"
              },
              "salesBillOfMaterialItems": {
                "items": {
                  "$ref": "#/components/schemas/salesBillOfMaterialArticleItem"
                },
                "type": "array"
              },
              "salesCostCenterId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "costCenter",
                  "service": "costCenter"
                }
              },
              "salesCostCenterNumber": {
                "type": "string"
              },
              "sellByDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "sellFromDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "serialNumberRequired": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "showOnDeliveryNote": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "articleStatus"
                }
              },
              "supplySources": {
                "items": {
                  "$ref": "#/components/schemas/supplySource"
                },
                "type": "array"
              },
              "supportUntilDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "systemCode": {
                "maxLength": 4000,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "targetStockQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "useAvailableForSalesChannels": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "useSalesBillOfMaterialItemPrices": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "useSalesBillOfMaterialItemPricesForPurchase": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "articleAlternativeQuantity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "minimumOrderQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "minimumStockQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "targetStockQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "required": true,
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "articleCalculationPrice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleCalculationPriceType": {
                "$ref": "#/components/schemas/articleCalculationPriceType",
                "x-weclapp": {
                  "required": true
                }
              },
              "endDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "price": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel"
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "articleCalculationPriceType": {
        "enum": [
          "CALCULATION_PRICE",
          "RECOMMENDED_RETAIL_PRICE"
        ],
        "type": "string"
      },
      "articleCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 120,
                "type": "string"
              },
              "imageId": {
                "type": "string"
              },
              "name": {
                "maxLength": 120,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "parentCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "articleCategory",
                  "service": "articleCategory"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "articleImage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "fileName": {
                "type": "string"
              },
              "mainImage": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "articleItemGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "items": {
                "items": {
                  "$ref": "#/components/schemas/articleItemGroupItem"
                },
                "type": "array"
              },
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "articleItemGroupItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "articlePrice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/articlePriceWithoutArticleReference"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "articlePriceWithoutArticleReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/articlePriceWithoutSalesChannel"
          },
          {
            "properties": {
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "articlePriceWithoutSalesChannel": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "currencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "required": true,
                  "service": "currency"
                }
              },
              "currencyName": {
                "type": "string"
              },
              "customerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "endDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "lastModifiedByUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "price": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "priceScaleType": {
                "$ref": "#/components/schemas/priceScaleType",
                "x-weclapp": {
                  "required": true
                }
              },
              "priceScaleValue": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "reductionAdditions": {
                "items": {
                  "$ref": "#/components/schemas/reductionAddition"
                },
                "type": "array"
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "articleSupplySource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseArticle"
          },
          {
            "properties": {
              "articlePrices": {
                "items": {
                  "$ref": "#/components/schemas/articlePriceWithoutSalesChannel"
                },
                "type": "array"
              },
              "dropshippingPossible": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "procurementLeadDays": {
                "format": "int32",
                "type": "integer"
              },
              "supplierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "supplierNumber": {
                "type": "string"
              },
              "supplierStockQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "articleType": {
        "enum": [
          "BASIC",
          "LOADING_EQUIPMENT",
          "LOADING_EQUIPMENT_STORABLE",
          "PACKAGING_UNIT",
          "SALES_BILL_OF_MATERIAL",
          "SERVICE",
          "SHIPPING_COST",
          "STORABLE"
        ],
        "type": "string"
      },
      "attendance": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "endTime": {
                "format": "timestamp",
                "type": "integer"
              },
              "startTime": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "balanceSheetItem": {
        "enum": [
          "ABSCHREIBUNGEN_GWG_ACCOUNTS",
          "ABSCHREIBUNGEN_UND_ANLAGEVERMOEGEN_ACCOUNTS",
          "BESONDERE_AUFWENDUNGEN_ACCOUNTS",
          "BUCHWERT_ANLAGENABGAENGE_ACCOUNTS",
          "FREMDLEISTUNGEN_ACCOUNTS",
          "GAS_STROM_ACCOUNTS",
          "GELEISTETE_ANZAHLUNGEN_ACCOUNTS",
          "GESETZLICHE_SOZIALE_AUFWENDUNGEN_ACCOUNTS",
          "HEIZUNG_ACCOUNTS",
          "INSTANDHALTUNG_ACCOUNTS",
          "INSTANDHALTUNG_UND_WERKZEUGE_ACCOUNTS",
          "KFZ_SONSTIGE_ACCOUNTS",
          "KFZ_STEUER_ACCOUNTS",
          "KFZ_VERSICHERUNG_ACCOUNTS",
          "KOSTEN_DER_WARENABGABE_ACCOUNTS",
          "LOEHENE_UND_GEHAELTER_ACCOUNTS",
          "MIETE_PACHT_ACCOUNTS",
          "NEUTRALE_AUFWENDUNGEN_ACCOUNTS",
          "NEUTRALE_ERTRAEGE_ACCOUNTS",
          "PRIVAT_ANTEILE_ACCOUNTS",
          "REVENUE_ACCOUNTS",
          "ROH_HILFS_UNDBETRIE_BSSTOFFE_ACCOUNTS",
          "SALDO_DER_STATISTISCHEN_KONTEN_ACCOUNTS",
          "SONSTIGE_ERLOESE_ACCOUNTS",
          "SONSTIGE_KONTEN_ACCOUNTS",
          "SONSTIGE_RAUMKOSTEN_ACCOUNTS",
          "STEUERN_VERSICHERUNGEN_BEITRAEGE_ACCOUNTS",
          "UMSATZSTEUER_ACCOUNTS",
          "UMSATZSTEUER_ZAHLUNGEN_ACCOUNTS",
          "VERSCHIEDENE_KOSTEN_ACCOUNTS",
          "VORSTEUER_ACCOUNTS",
          "WERBE_UND_REISEKOSTEN_ACCOUNTS"
        ],
        "type": "string"
      },
      "bankAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountHolder": {
                "maxLength": 300,
                "type": "string"
              },
              "accountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountNumber": {
                "maxLength": 100,
                "type": "string"
              },
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "autoSync": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "automaticProcessing": {
                "$ref": "#/components/schemas/moneyTransactionProcessingStrategy",
                "x-weclapp": {
                  "required": true
                }
              },
              "balance": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "bankCode": {
                "maxLength": 100,
                "type": "string"
              },
              "connectionFailure": {
                "maxLength": 1000,
                "type": "string"
              },
              "creditInstitute": {
                "maxLength": 400,
                "type": "string"
              },
              "creditInstituteCity": {
                "maxLength": 1000,
                "type": "string"
              },
              "creditInstituteStreet": {
                "maxLength": 1000,
                "type": "string"
              },
              "creditInstituteZip": {
                "maxLength": 1000,
                "type": "string"
              },
              "creditLine": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "currencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "service": "currency"
                }
              },
              "differentSepaCreditorIdentifier": {
                "maxLength": 120,
                "type": "string"
              },
              "enabledForElectronicPaymentTransactions": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "iban": {
                "maxLength": 34,
                "type": "string"
              },
              "incidentalCostsOfMonetaryTrafficAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "incidentalCostsOfMonetaryTrafficTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "lastDownload": {
                "format": "timestamp",
                "type": "integer"
              },
              "primary": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "qrIban": {
                "maxLength": 1000,
                "type": "string"
              },
              "qrIdentifier": {
                "maxLength": 1000,
                "type": "string"
              },
              "swiftBic": {
                "maxLength": 11,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baossUserStatus": {
        "enum": [
          "ACTIVE",
          "DEPARTURE",
          "NOT_ACTIVE"
        ],
        "type": "string"
      },
      "baseArticle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "articleNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "ean": {
                "maxLength": 18,
                "type": "string"
              },
              "fixedPurchaseQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "internalNote": {
                "format": "html",
                "maxLength": 200,
                "type": "string"
              },
              "manufacturerPartNumber": {
                "maxLength": 300,
                "type": "string"
              },
              "matchCode": {
                "maxLength": 1000,
                "type": "string"
              },
              "minimumPurchaseQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "name": {
                "maxLength": 300,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "shortDescription1": {
                "maxLength": 255,
                "type": "string"
              },
              "shortDescription2": {
                "maxLength": 255,
                "type": "string"
              },
              "taxRateType": {
                "$ref": "#/components/schemas/taxRateType",
                "x-weclapp": {
                  "required": true
                }
              },
              "unitId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "unit",
                  "required": true,
                  "service": "unit"
                }
              },
              "unitName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseMinimalRecordItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "note": {
                "maxLength": 1000,
                "type": "string"
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "basePickingBookRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractBookRecord"
          },
          {
            "properties": {
              "bookedDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "orderItemId": {
                "type": "string"
              },
              "packagingUnitBaseArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              },
              "productionOrderItemId": {
                "type": "string"
              },
              "shipmentItemId": {
                "type": "string"
              },
              "sourceInternalTransportReferenceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "internalTransportReference",
                  "service": "internalTransportReference"
                }
              },
              "sourceStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "required": true,
                  "service": "storagePlace"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "basePurchaseRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordWithMoney"
          },
          {
            "properties": {
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "responsibleUserUsername": {
                "type": "string"
              },
              "servicePeriodFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "servicePeriodTo": {
                "format": "timestamp",
                "type": "integer"
              },
              "shippingCostItems": {
                "items": {
                  "$ref": "#/components/schemas/purchaseShippingCostItem"
                },
                "type": "array"
              },
              "supplierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "supplierNumber": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "commercialLanguage": {
                "maxLength": 255,
                "type": "string"
              },
              "creatorId": {
                "type": "string"
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "disableEmailTemplate": {
                "type": "boolean"
              },
              "recordComment": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "recordFreeText": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "recordOpening": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "sentToRecipient": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseRecordItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMinimalRecordItem"
          },
          {
            "properties": {
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "descriptionFixed": {
                "type": "boolean"
              },
              "manualQuantity": {
                "type": "boolean"
              },
              "parentItemId": {
                "type": "string"
              },
              "title": {
                "maxLength": 1000,
                "type": "string"
              },
              "unitId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "unit",
                  "service": "unit"
                }
              },
              "unitName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseRecordItemWithMoney": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItem"
          },
          {
            "properties": {
              "discountPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "grossAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "grossAmountInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "manualUnitPrice": {
                "type": "boolean"
              },
              "netAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "netAmountForStatistics": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "netAmountForStatisticsInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "netAmountInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "reductionAdditionItems": {
                "items": {
                  "$ref": "#/components/schemas/reductionAdditionItem"
                },
                "type": "array"
              },
              "taxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "taxName": {
                "type": "string"
              },
              "unitPrice": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "unitPriceInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseRecordItemWithPrintSettings": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItemWithMoney"
          },
          {
            "properties": {
              "addPageBreakBefore": {
                "type": "boolean"
              },
              "customAttributes": {
                "items": {
                  "$ref": "#/components/schemas/customAttribute"
                },
                "type": "array"
              },
              "freeTextItem": {
                "type": "boolean"
              },
              "groupName": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseRecordWithMoney": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecord"
          },
          {
            "properties": {
              "currencyConversionDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "currencyConversionRate": {
                "format": "decimal",
                "type": "string"
              },
              "grossAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "grossAmountInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "headerDiscount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "headerSurcharge": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "netAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "netAmountInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "nonStandardTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "nonStandardTaxName": {
                "type": "string"
              },
              "paymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "paymentMethodName": {
                "type": "string"
              },
              "recordCurrencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "service": "currency"
                }
              },
              "recordCurrencyName": {
                "type": "string"
              },
              "termOfPaymentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "termOfPayment",
                  "service": "termOfPayment"
                }
              },
              "termOfPaymentName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseSalesRecord": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordWithMoney"
          },
          {
            "properties": {
              "commission": {
                "maxLength": 255,
                "type": "string"
              },
              "commissionSalesPartners": {
                "items": {
                  "$ref": "#/components/schemas/commissionSalesPartner"
                },
                "type": "array"
              },
              "customerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "customerNumber": {
                "type": "string"
              },
              "dispatchCountryCode": {
                "type": "string"
              },
              "factoring": {
                "type": "boolean"
              },
              "pricingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "responsibleUserUsername": {
                "type": "string"
              },
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel"
              },
              "servicePeriodFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "servicePeriodTo": {
                "format": "timestamp",
                "type": "integer"
              },
              "shipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "shipmentMethodName": {
                "type": "string"
              },
              "shippingCostItems": {
                "items": {
                  "$ref": "#/components/schemas/salesShippingCostItem"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseSalesRecordItemWithCost": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItemWithPrintSettings"
          },
          {
            "properties": {
              "commissionSalesPartners": {
                "items": {
                  "$ref": "#/components/schemas/commissionSalesPartner"
                },
                "type": "array"
              },
              "manualUnitCost": {
                "type": "boolean"
              },
              "servicePeriodFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "servicePeriodTo": {
                "format": "timestamp",
                "type": "integer"
              },
              "unitCost": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "unitCostInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseSalesRecordItemWithService": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecordItemWithCost"
          },
          {
            "properties": {
              "invoicingType": {
                "$ref": "#/components/schemas/invoicingType"
              },
              "manualPlannedWorkingTimePerUnit": {
                "type": "boolean"
              },
              "plannedWorkingTimePerUnit": {
                "format": "int64",
                "type": "integer"
              },
              "serviceItem": {
                "type": "boolean"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseSalesRecordWithAddresses": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecord"
          },
          {
            "properties": {
              "defaultShippingCarrierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shippingCarrier",
                  "service": "shippingCarrier"
                }
              },
              "defaultShippingCarrierName": {
                "type": "string"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "deliveryEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "plannedDeliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "plannedShippingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "recordAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "salesInvoiceEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseShipment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecord"
          },
          {
            "properties": {
              "invoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "recipientAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "salesOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesOrder",
                  "service": "salesOrder"
                }
              },
              "salesOrderNumber": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/shipmentStatusType"
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/shipmentStatus"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "baseShippingCostItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "grossAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "grossAmountInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "manualUnitPrice": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "netAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "netAmountInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "taxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "required": true,
                  "service": "tax"
                }
              },
              "taxName": {
                "type": "string"
              },
              "unitPrice": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "unitPriceInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "batchNumber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "batchNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "expirationDate": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "batchSerialNumber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "batchNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "expirationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "serialNumbers": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "billOfMaterial": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractBillOfMaterial"
          },
          {
            "type": "object"
          }
        ]
      },
      "billUntil": {
        "enum": [
          "CURRENT_MONTH_1",
          "CURRENT_MONTH_10",
          "CURRENT_MONTH_11",
          "CURRENT_MONTH_12",
          "CURRENT_MONTH_13",
          "CURRENT_MONTH_14",
          "CURRENT_MONTH_15",
          "CURRENT_MONTH_16",
          "CURRENT_MONTH_17",
          "CURRENT_MONTH_18",
          "CURRENT_MONTH_19",
          "CURRENT_MONTH_2",
          "CURRENT_MONTH_20",
          "CURRENT_MONTH_21",
          "CURRENT_MONTH_22",
          "CURRENT_MONTH_23",
          "CURRENT_MONTH_24",
          "CURRENT_MONTH_25",
          "CURRENT_MONTH_26",
          "CURRENT_MONTH_27",
          "CURRENT_MONTH_28",
          "CURRENT_MONTH_29",
          "CURRENT_MONTH_3",
          "CURRENT_MONTH_30",
          "CURRENT_MONTH_31",
          "CURRENT_MONTH_4",
          "CURRENT_MONTH_5",
          "CURRENT_MONTH_6",
          "CURRENT_MONTH_7",
          "CURRENT_MONTH_8",
          "CURRENT_MONTH_9",
          "NEXT_MONTH_1",
          "NEXT_MONTH_10",
          "NEXT_MONTH_11",
          "NEXT_MONTH_12",
          "NEXT_MONTH_13",
          "NEXT_MONTH_14",
          "NEXT_MONTH_15",
          "NEXT_MONTH_16",
          "NEXT_MONTH_17",
          "NEXT_MONTH_18",
          "NEXT_MONTH_19",
          "NEXT_MONTH_2",
          "NEXT_MONTH_20",
          "NEXT_MONTH_21",
          "NEXT_MONTH_22",
          "NEXT_MONTH_23",
          "NEXT_MONTH_24",
          "NEXT_MONTH_25",
          "NEXT_MONTH_26",
          "NEXT_MONTH_27",
          "NEXT_MONTH_28",
          "NEXT_MONTH_29",
          "NEXT_MONTH_3",
          "NEXT_MONTH_30",
          "NEXT_MONTH_31",
          "NEXT_MONTH_4",
          "NEXT_MONTH_5",
          "NEXT_MONTH_6",
          "NEXT_MONTH_7",
          "NEXT_MONTH_8",
          "NEXT_MONTH_9"
        ],
        "type": "string"
      },
      "billableInvoiceStatus": {
        "enum": [
          "INVOICED",
          "NOT_INVOICED",
          "PARTLY_INVOICED"
        ],
        "type": "string"
      },
      "blanketPurchaseOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "blanketPurchaseOrderNumber": {
                "maxLength": 30,
                "type": "string"
              },
              "calculationMode": {
                "$ref": "#/components/schemas/specialCalculationMode"
              },
              "comment": {
                "maxLength": 512,
                "type": "string"
              },
              "commercialLanguage": {
                "maxLength": 255,
                "type": "string"
              },
              "confirmationNumber": {
                "maxLength": 30,
                "type": "string"
              },
              "creatorId": {
                "type": "string"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "discountPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "endDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "formSettingsFromDistributionChannel": {
                "$ref": "#/components/schemas/distributionChannel"
              },
              "headerDiscount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "headerSurcharge": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "nonStandardTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "orderDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "orderQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "paymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "recipientCountryCode": {
                "type": "string"
              },
              "recordAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "recordComment": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "recordCurrencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "service": "currency"
                }
              },
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "recordFreeText": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "recordOpening": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "releases": {
                "items": {
                  "$ref": "#/components/schemas/releases"
                },
                "type": "array"
              },
              "residualQuantity": {
                "format": "decimal",
                "type": "string"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "sentToRecipient": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "shipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "status": {
                "$ref": "#/components/schemas/blanketPurchaseOrderStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/blanketPurchaseOrderStatusHistory"
                },
                "type": "array"
              },
              "supplierBlanketPurchaseOrderNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "supplierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              },
              "supplierQuotationNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "taxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "required": true,
                  "service": "tax"
                }
              },
              "termOfPaymentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "termOfPayment",
                  "service": "termOfPayment"
                }
              },
              "unitPrice": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "useManualUnitPrice": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "blanketPurchaseOrderStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/blanketPurchaseOrderStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "blanketPurchaseOrderStatusType": {
        "enum": [
          "CANCELLED",
          "CLOSED",
          "CONFIRMED",
          "DOCUMENT_PRINTED",
          "NEW"
        ],
        "type": "string"
      },
      "bookingType": {
        "enum": [
          "CARRY_FORWARD",
          "CREDIT_ADVICE",
          "IMPERSONAL",
          "INCOMING_CREDIT_NOTE",
          "INCOMING_INVOICE",
          "INCOMING_MANUAL_ENTRY",
          "INCOMING_PAYMENT",
          "OUTGOING_CREDIT_NOTE",
          "OUTGOING_INVOICE",
          "OUTGOING_MANUAL_ENTRY",
          "OUTGOING_PAYMENT"
        ],
        "type": "string"
      },
      "cDBReminderType": {
        "enum": [
          "AUTOMATIC_REMINDER",
          "DATE_REMINDER",
          "NO_REMINDER"
        ],
        "type": "string"
      },
      "calculationType": {
        "enum": [
          "MARGIN_CALCULATION",
          "PURCHASE",
          "RECOMMENDED_RETAIL_PRICE",
          "SALES"
        ],
        "type": "string"
      },
      "calendar": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "caldavAccountId": {
                "type": "string"
              },
              "calendarColor": {
                "maxLength": 7,
                "type": "string"
              },
              "calendarKey": {
                "maxLength": 2000,
                "type": "string"
              },
              "calendarSharingPermissions": {
                "items": {
                  "$ref": "#/components/schemas/calendarSharingPermissions"
                },
                "type": "array"
              },
              "lastEventsSyncToken": {
                "maxLength": 1000,
                "type": "string"
              },
              "mailAccountId": {
                "type": "string"
              },
              "name": {
                "maxLength": 200,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "ownerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "sharePrivateEvents": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "synchronize": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "calendarEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "allDayEvent": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "attendees": {
                "items": {
                  "$ref": "#/components/schemas/calendarEventAttendee"
                },
                "type": "array"
              },
              "calendarId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "calendar",
                  "required": true,
                  "service": "calendar"
                }
              },
              "concerningId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "contactId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "deleted": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "endDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "location": {
                "maxLength": 200,
                "type": "string"
              },
              "privateEvent": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "recurringEvent": {
                "$ref": "#/components/schemas/recurringEvent"
              },
              "references": {
                "items": {
                  "$ref": "#/components/schemas/entityReference"
                },
                "type": "array"
              },
              "reminderSendType": {
                "$ref": "#/components/schemas/reminderSendType"
              },
              "reminderTime": {
                "format": "int32",
                "type": "integer"
              },
              "showAs": {
                "$ref": "#/components/schemas/followupBusyState"
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "subject": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "calendarEventAttendee": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "attendeeStatus": {
                "$ref": "#/components/schemas/eventInvitationStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "calendarEventId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "calendarEvent",
                  "required": true,
                  "service": "calendarEvent"
                }
              },
              "eventPermission": {
                "$ref": "#/components/schemas/eventRight",
                "x-weclapp": {
                  "required": true
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "calendarSharingPermissionType": {
        "enum": [
          "ADMIN",
          "READ",
          "READ_WRITE"
        ],
        "type": "string"
      },
      "calendarSharingPermissions": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "permissionType": {
                "$ref": "#/components/schemas/calendarSharingPermissionType",
                "x-weclapp": {
                  "required": true
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "campaign": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "campaignEndDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "campaignName": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "campaignNumber": {
                "maxLength": 64,
                "type": "string"
              },
              "campaignStartDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "campaignType": {
                "$ref": "#/components/schemas/campaignType"
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "responsibleUserUsername": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "campaignParticipant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "campaignId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "campaign",
                  "required": true,
                  "service": "campaign"
                }
              },
              "campaignNumber": {
                "type": "string"
              },
              "participation": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "partyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "campaignType": {
        "enum": [
          "ADVERTISEMENT",
          "BULKMAIL",
          "EMAIL",
          "EVENT",
          "EXPOSITION",
          "FAIR",
          "OTHER",
          "PUBLICRELATION",
          "TELEMARKETING",
          "WEBINAR"
        ],
        "type": "string"
      },
      "cashAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "currencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "required": true,
                  "service": "currency"
                }
              },
              "currencyName": {
                "type": "string"
              },
              "description": {
                "maxLength": 300,
                "type": "string"
              },
              "openingBalance": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "treasurerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "collectiveInvoicePositionPrintType": {
        "enum": [
          "ORDER_POSITION_GROUP",
          "PERFORMANCE_RECORD_POSITION_GROUP",
          "SHIPMENT_POSITION_GROUP"
        ],
        "type": "string"
      },
      "comment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "authorName": {
                "maxLength": 256,
                "type": "string"
              },
              "authorUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "authorUserUsername": {
                "type": "string"
              },
              "comment": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "entityId": {
                "type": "string"
              },
              "entityName": {
                "type": "string"
              },
              "htmlComment": {
                "type": "string"
              },
              "lastEditDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "parentCommentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "comment",
                  "service": "comment"
                }
              },
              "privateComment": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "publicComment": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "recipientUsers": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "solution": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "commercialLanguage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "countryCode": {
                "maxLength": 2,
                "type": "string"
              },
              "languageCode": {
                "maxLength": 2,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "commissionSalesPartner": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "commissionFix": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "commissionPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "commissionType": {
                "$ref": "#/components/schemas/commissionType",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesPartnerSupplierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              },
              "salesPartnerSupplierNumber": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "commissionType": {
        "enum": [
          "FIX",
          "FIX_AND_MARGIN",
          "FIX_AND_REVENUE",
          "MARGIN",
          "NO_COMMISSION",
          "REVENUE"
        ],
        "type": "string"
      },
      "conditionsForEntityType": {
        "properties": {
          "entityType": {
            "$ref": "#/components/schemas/customAttributeExtendableEntity"
          },
          "propertyConditions": {
            "items": {
              "$ref": "#/components/schemas/customAttributeDefinitionPropertyCondition"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "contact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractParty"
          },
          {
            "properties": {
              "customerCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "customerCategory"
                }
              },
              "customerCategoryName": {
                "type": "string"
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "fixPhone2": {
                "maxLength": 1000,
                "type": "string"
              },
              "mobilePhone2": {
                "maxLength": 1000,
                "type": "string"
              },
              "optIn": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInLetter": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInPhone": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInSms": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "phoneHome": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "contract": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecord"
          },
          {
            "properties": {
              "additionalAddresses": {
                "items": {
                  "$ref": "#/components/schemas/contractAdditionalAddress"
                },
                "type": "array"
              },
              "authorizationUnitId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "contractAuthorizationUnit",
                  "service": "contractAuthorizationUnit"
                }
              },
              "automaticExtension": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "billUntil": {
                "$ref": "#/components/schemas/billUntil"
              },
              "billingDay": {
                "format": "int32",
                "type": "integer"
              },
              "billingTargetInvoiceStatus": {
                "$ref": "#/components/schemas/desiredInvoiceStatusType"
              },
              "billingType": {
                "$ref": "#/components/schemas/contractBillingType",
                "x-weclapp": {
                  "required": true
                }
              },
              "cancellationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "cancellationPeriodQuantity": {
                "format": "int32",
                "type": "integer"
              },
              "cancellationPeriodSoftframe": {
                "$ref": "#/components/schemas/contractSoftframe"
              },
              "cancellationPeriodUnit": {
                "$ref": "#/components/schemas/contractUnitType"
              },
              "commission": {
                "maxLength": 255,
                "type": "string"
              },
              "commissionSalesPartners": {
                "items": {
                  "$ref": "#/components/schemas/commissionSalesPartner"
                },
                "type": "array"
              },
              "contractCostItems": {
                "items": {
                  "$ref": "#/components/schemas/contractCostItem"
                },
                "type": "array"
              },
              "contractDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "contractItems": {
                "items": {
                  "$ref": "#/components/schemas/contractItem"
                },
                "type": "array"
              },
              "contractNumber": {
                "maxLength": 64,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "contractNumberAtParty": {
                "maxLength": 30,
                "type": "string"
              },
              "contractStatus": {
                "$ref": "#/components/schemas/contractStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "correspondenceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "deliveryEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "differingCorrespondenceAddress": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "differingDeliveryAddress": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "differingInvoiceAddress": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "endDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "extensionQuantity": {
                "format": "int32",
                "type": "integer"
              },
              "extensionUnit": {
                "$ref": "#/components/schemas/contractUnitType"
              },
              "factoring": {
                "type": "boolean"
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "invoiceRecipientId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "latestCancellationWarningQuantity": {
                "format": "int32",
                "type": "integer"
              },
              "latestCancellationWarningUnit": {
                "$ref": "#/components/schemas/contractUnitType"
              },
              "latestPossibleTerminationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "name": {
                "maxLength": 2048,
                "type": "string"
              },
              "nextContractBillingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "nonStandardInputTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "orderNumberAtCustomer": {
                "maxLength": 64,
                "type": "string"
              },
              "partyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "paymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "pricingDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "purchaseEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "recordCurrencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "service": "currency"
                }
              },
              "recordCurrencyName": {
                "type": "string"
              },
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "reminderDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "reminderSendType": {
                "$ref": "#/components/schemas/reminderSendType",
                "x-weclapp": {
                  "required": true
                }
              },
              "reminderType": {
                "$ref": "#/components/schemas/cDBReminderType"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesInvoiceEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "salesOrderEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "template": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "termOfPaymentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "termOfPayment",
                  "service": "termOfPayment"
                }
              },
              "terminationReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "contractTerminationReason"
                }
              },
              "ticketServiceLevelAgreementId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketServiceLevelAgreement",
                  "service": "ticketServiceLevelAgreement"
                }
              },
              "types": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "contractType"
                }
              },
              "unlimited": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "contractAdditionalAddress": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "address": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "contractAuthorizationUnit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "contractBillingType": {
        "enum": [
          "INVOICE_AFTER",
          "INVOICE_BEFORE",
          "NONE",
          "NOT_INVOICEABLE",
          "SALES_ORDER"
        ],
        "type": "string"
      },
      "contractChargeInterval": {
        "enum": [
          "DAILY",
          "FIVE_YEARLY",
          "FOUR_YEARLY",
          "HALF_YEARLY",
          "MONTHLY",
          "NONE",
          "QUARTER",
          "THREE_YEARLY",
          "TWO_YEARLY",
          "WEEKLY",
          "YEARLY"
        ],
        "type": "string"
      },
      "contractChargeIntervalType": {
        "enum": [
          "NON_RECURRENT",
          "RECURRENT"
        ],
        "type": "string"
      },
      "contractChargeType": {
        "enum": [
          "COST",
          "REVENUE"
        ],
        "type": "string"
      },
      "contractCostItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "descriptionFixed": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "discountPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "interval": {
                "$ref": "#/components/schemas/contractChargeInterval",
                "x-weclapp": {
                  "required": true
                }
              },
              "intervalType": {
                "$ref": "#/components/schemas/contractChargeIntervalType",
                "x-weclapp": {
                  "required": true
                }
              },
              "manualUnitPrice": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "netAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "netAmountInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "note": {
                "maxLength": 1000,
                "type": "string"
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "servicePeriodFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "servicePeriodTo": {
                "format": "timestamp",
                "type": "integer"
              },
              "title": {
                "maxLength": 1000,
                "type": "string"
              },
              "unitId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "unit",
                  "service": "unit"
                }
              },
              "unitPrice": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "unitPriceInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "contractItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItemWithPrintSettings"
          },
          {
            "properties": {
              "billingGroupId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "contractBillingGroup"
                }
              },
              "commissionSalesPartners": {
                "items": {
                  "$ref": "#/components/schemas/commissionSalesPartner"
                },
                "type": "array"
              },
              "costTypeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "costType",
                  "service": "costType"
                }
              },
              "interval": {
                "$ref": "#/components/schemas/contractChargeInterval",
                "x-weclapp": {
                  "required": true
                }
              },
              "intervalType": {
                "$ref": "#/components/schemas/contractChargeIntervalType",
                "x-weclapp": {
                  "required": true
                }
              },
              "nextContractBillingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "previousContractBillingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "servicePeriodFromDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "servicePeriodToDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "type": {
                "$ref": "#/components/schemas/contractChargeType",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "contractSoftframe": {
        "enum": [
          "CONTRACT_END",
          "END_OF_CALENDAR_YEAR",
          "END_OF_CONTRACT_YEAR",
          "END_OF_MONTH",
          "END_OF_QUARTER",
          "FIFTEENTH_OF_MONTH",
          "FIFTEENTH_OR_END_OF_MONTH",
          "HALF_OF_CALENDAR_YEAR"
        ],
        "type": "string"
      },
      "contractStatus": {
        "enum": [
          "ACTIVE",
          "DRAFT",
          "INACTIVE"
        ],
        "type": "string"
      },
      "contractUnitType": {
        "enum": [
          "DAY",
          "MONTH",
          "WEEK",
          "YEAR"
        ],
        "type": "string"
      },
      "costCenter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "costCenterGroupId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "costCenterGroup"
                }
              },
              "costCenterNumber": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "costCenterType": {
                "$ref": "#/components/schemas/productionCostCenterType",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "costCenterWithDistributionPercentage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "costCenterId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "costCenter",
                  "required": true,
                  "service": "costCenter"
                }
              },
              "costCenterNumber": {
                "type": "string"
              },
              "distributionPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "costType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "name": {
                "maxLength": 256,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "crmEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "callCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "crmCallCategory"
                }
              },
              "contactId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "creatorUserId": {
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "endDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "eventCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "crmEventCategory"
                }
              },
              "location": {
                "maxLength": 255,
                "type": "string"
              },
              "opportunityId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "opportunity",
                  "service": "opportunity"
                }
              },
              "partyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "subject": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "type": {
                "$ref": "#/components/schemas/crmEventType",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "crmEventType": {
        "enum": [
          "GENERAL",
          "INCOMING_CALL",
          "LETTER",
          "OUTGOING_CALL"
        ],
        "type": "string"
      },
      "currency": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "currencySymbol": {
                "maxLength": 8,
                "type": "string"
              },
              "name": {
                "maxLength": 150,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "customAttribute": {
        "properties": {
          "attributeDefinitionId": {
            "type": "string",
            "x-weclapp": {
              "entity": "customAttributeDefinition",
              "service": "customAttributeDefinition"
            }
          },
          "booleanValue": {
            "type": "boolean"
          },
          "dateValue": {
            "format": "timestamp",
            "type": "integer"
          },
          "entityId": {
            "type": "string"
          },
          "entityReferences": {
            "items": {
              "$ref": "#/components/schemas/entityReference"
            },
            "type": "array"
          },
          "numberValue": {
            "format": "decimal",
            "type": "string"
          },
          "selectedValueId": {
            "type": "string"
          },
          "selectedValues": {
            "items": {
              "$ref": "#/components/schemas/onlyId"
            },
            "type": "array"
          },
          "stringValue": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "customAttributeDefinition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "attributeDescription": {
                "maxLength": 255,
                "type": "string"
              },
              "attributeEntityType": {
                "$ref": "#/components/schemas/customAttributeEntityType"
              },
              "attributeKey": {
                "maxLength": 256,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "attributeLabels": {
                "items": {
                  "$ref": "#/components/schemas/customAttributeDefinitionTranslation"
                },
                "type": "array"
              },
              "attributeType": {
                "$ref": "#/components/schemas/customAttributeType",
                "x-weclapp": {
                  "required": true
                }
              },
              "conditions": {
                "$ref": "#/components/schemas/customAttributeDefinitionConditions"
              },
              "defaultBooleanValue": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "defaultDateValue": {
                "format": "timestamp",
                "type": "integer"
              },
              "defaultNumberValue": {
                "format": "decimal",
                "type": "string"
              },
              "defaultStringValue": {
                "type": "string"
              },
              "entities": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "groupName": {
                "maxLength": 1000,
                "type": "string"
              },
              "label": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "legacyEntities": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "mandatory": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "permissions": {
                "items": {
                  "$ref": "#/components/schemas/customAttributeDefinitionPermission"
                },
                "type": "array"
              },
              "publicPageTypes": {
                "items": {
                  "$ref": "#/components/schemas/customAttributePublicPageType"
                },
                "type": "array"
              },
              "readOnly": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "selectableValues": {
                "items": {
                  "$ref": "#/components/schemas/customAttributeDefinitionListValue"
                },
                "type": "array"
              },
              "showInOverview": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "showOnCreationDialog": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "systemCustomAttribute": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "customAttributeDefinitionConditionOperator": {
        "enum": [
          "EQUAL",
          "NOT_EQUAL"
        ],
        "type": "string"
      },
      "customAttributeDefinitionConditionType": {
        "enum": [
          "BOOLEAN",
          "STRING"
        ],
        "type": "string"
      },
      "customAttributeDefinitionConditions": {
        "properties": {
          "conditionsForEntityType": {
            "items": {
              "$ref": "#/components/schemas/conditionsForEntityType"
            },
            "type": "array"
          },
          "ignoreConditionsIfValueIsSet": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "customAttributeDefinitionListValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "defaultValue": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              },
              "value": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "customAttributeDefinitionOrder": {
        "properties": {
          "id": {
            "type": "string"
          },
          "overrideGroupName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "customAttributeDefinitionPermission": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "permissionType": {
                "$ref": "#/components/schemas/customAttributeDefinitionPermissionType",
                "x-weclapp": {
                  "required": true
                }
              },
              "userRoleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "userRole",
                  "required": true,
                  "service": "userRole"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "customAttributeDefinitionPermissionType": {
        "enum": [
          "READ",
          "READ_AND_UPDATE"
        ],
        "type": "string"
      },
      "customAttributeDefinitionPropertyCondition": {
        "properties": {
          "conditionOperator": {
            "$ref": "#/components/schemas/customAttributeDefinitionConditionOperator"
          },
          "propertyName": {
            "type": "string"
          },
          "propertyType": {
            "$ref": "#/components/schemas/customAttributeDefinitionConditionType"
          },
          "propertyValue": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "customAttributeDefinitionTranslation": {
        "properties": {
          "labelText": {
            "type": "string"
          },
          "locale": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "customAttributeEntityType": {
        "enum": [
          "article",
          "blanketPurchaseOrder",
          "campaign",
          "contract",
          "customer",
          "incomingGoods",
          "opportunity",
          "party",
          "performanceRecord",
          "productionOrder",
          "project",
          "purchaseInvoice",
          "purchaseOrder",
          "quotation",
          "recurringInvoice",
          "salesInvoice",
          "salesOrder",
          "serialNumber",
          "shipment",
          "supplier",
          "ticket",
          "user"
        ],
        "type": "string"
      },
      "customAttributeExtendableEntity": {
        "enum": [
          "article",
          "articleSupplySource",
          "batchNumber",
          "blanketPurchaseOrder",
          "campaign",
          "competitor",
          "contract",
          "contractItem",
          "crmEvent",
          "customer",
          "incomingGoods",
          "incomingGoodsItem",
          "opportunity",
          "party",
          "performanceRecord",
          "performanceRecordItem",
          "productionOrder",
          "productionOrderItem",
          "project",
          "purchaseInvoice",
          "purchaseInvoiceItem",
          "purchaseOrder",
          "purchaseOrderItem",
          "purchaseOrderRequest",
          "purchaseRequisition",
          "quotation",
          "quotationItem",
          "recurringInvoice",
          "recurringInvoiceItem",
          "salesInvoice",
          "salesInvoiceItem",
          "salesOrder",
          "salesOrderItem",
          "serialNumber",
          "shipment",
          "shipmentItem",
          "storageLocation",
          "storagePlace",
          "supplier",
          "task",
          "ticket",
          "timeRecord",
          "transportationOrder",
          "user",
          "warehouse",
          "warehouseStockMovement"
        ],
        "type": "string"
      },
      "customAttributePublicPageType": {
        "enum": [
          "PURCHASE_ORDER_REQUEST",
          "QUOTATION"
        ],
        "type": "string"
      },
      "customAttributeType": {
        "enum": [
          "BOOLEAN",
          "DATE",
          "DECIMAL",
          "ENTITY",
          "INTEGER",
          "LARGE_TEXT",
          "LIST",
          "MULTISELECT_LIST",
          "REFERENCE",
          "STRING",
          "URL"
        ],
        "type": "string"
      },
      "customValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "customer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/customerOrLead"
          },
          {
            "properties": {
              "amountInsured": {
                "format": "decimal",
                "pattern": "^([0-9]{1,14})([.][0-9]{1,4})?$",
                "type": "string"
              },
              "bankAccounts": {
                "items": {
                  "$ref": "#/components/schemas/partyBankAccount"
                },
                "type": "array"
              },
              "blockNotice": {
                "maxLength": 1000,
                "type": "string"
              },
              "blocked": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "commissionSalesPartners": {
                "items": {
                  "$ref": "#/components/schemas/commissionSalesPartner"
                },
                "type": "array"
              },
              "creditLimit": {
                "format": "decimal",
                "pattern": "^([0-9]{1,14})([.][0-9]{1,4})?$",
                "type": "string"
              },
              "customerNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "customerRatingId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "partyRating"
                }
              },
              "customerRatingName": {
                "type": "string"
              },
              "customerSupplierNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "customerTopics": {
                "items": {
                  "$ref": "#/components/schemas/entity"
                },
                "type": "array"
              },
              "defaultHeaderDiscount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "defaultHeaderSurcharge": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "deliveryBlock": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "insolvent": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "insured": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoiceBlock": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoiceRecipientId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "leadSourceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "leadSource"
                }
              },
              "leadSourceName": {
                "type": "string"
              },
              "lossDescription": {
                "maxLength": 255,
                "type": "string"
              },
              "lossReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "customerLeadLossReason"
                }
              },
              "lossReasonName": {
                "type": "string"
              },
              "nonStandardTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "oldCustomerNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "optIn": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInLetter": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInPhone": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInSms": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "referenceNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "responsibleUserFixed": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel"
              },
              "salesStageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesStage",
                  "service": "salesStage"
                }
              },
              "salesStageName": {
                "type": "string"
              },
              "satisfaction": {
                "$ref": "#/components/schemas/customerSatisfaction"
              },
              "useCustomsTariffNumber": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "customerBusinessType": {
        "enum": [
          "B2B",
          "B2C",
          "B2G"
        ],
        "type": "string"
      },
      "customerOrLead": {
        "allOf": [
          {
            "$ref": "#/components/schemas/partyButNotContact"
          },
          {
            "properties": {
              "annualRevenue": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "companySizeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "companySize"
                }
              },
              "companySizeName": {
                "type": "string"
              },
              "customerCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "customerCategory"
                }
              },
              "customerCategoryName": {
                "type": "string"
              },
              "parentPartyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "paymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "paymentMethodName": {
                "type": "string"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "responsibleUserUsername": {
                "type": "string"
              },
              "shipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "shipmentMethodName": {
                "type": "string"
              },
              "termOfPaymentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "termOfPayment",
                  "service": "termOfPayment"
                }
              },
              "termOfPaymentName": {
                "type": "string"
              },
              "vatRegistrationNumber": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "customerSatisfaction": {
        "enum": [
          "NEUTRAL",
          "SATISFIED",
          "UNSATISFIED"
        ],
        "type": "string"
      },
      "customerSpecificArticleAttributes": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "customerArticleNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "customerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "debitCreditIndicator": {
        "enum": [
          "CREDIT",
          "DEBIT"
        ],
        "type": "string"
      },
      "demoTestSystemInfo": {
        "properties": {
          "createPossible": {
            "type": "boolean"
          },
          "creationInProgress": {
            "type": "boolean"
          },
          "demoInstanceUrl": {
            "type": "string"
          },
          "mainInstanceUrl": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "desiredInvoiceStatusType": {
        "enum": [
          "DOCUMENT_CREATED",
          "NEW",
          "OPEN_ITEM_CREATED"
        ],
        "type": "string"
      },
      "dispositionInfoAvailabilityType": {
        "enum": [
          "COMPLETELY_AVAILABLE",
          "NOTHING_AVAILABLE",
          "NOT_CHECKED",
          "PARTIALLY_AVAILABLE",
          "TRANSFER_REQUIRED"
        ],
        "type": "string"
      },
      "distributionChannel": {
        "enum": [
          "GROSS1",
          "GROSS10",
          "GROSS100",
          "GROSS101",
          "GROSS102",
          "GROSS103",
          "GROSS104",
          "GROSS105",
          "GROSS106",
          "GROSS107",
          "GROSS108",
          "GROSS109",
          "GROSS11",
          "GROSS110",
          "GROSS111",
          "GROSS112",
          "GROSS113",
          "GROSS114",
          "GROSS115",
          "GROSS116",
          "GROSS117",
          "GROSS118",
          "GROSS119",
          "GROSS12",
          "GROSS120",
          "GROSS121",
          "GROSS122",
          "GROSS123",
          "GROSS124",
          "GROSS125",
          "GROSS126",
          "GROSS127",
          "GROSS128",
          "GROSS129",
          "GROSS13",
          "GROSS130",
          "GROSS131",
          "GROSS132",
          "GROSS133",
          "GROSS134",
          "GROSS135",
          "GROSS136",
          "GROSS137",
          "GROSS138",
          "GROSS139",
          "GROSS14",
          "GROSS140",
          "GROSS141",
          "GROSS142",
          "GROSS143",
          "GROSS144",
          "GROSS145",
          "GROSS146",
          "GROSS147",
          "GROSS148",
          "GROSS149",
          "GROSS15",
          "GROSS150",
          "GROSS151",
          "GROSS152",
          "GROSS153",
          "GROSS154",
          "GROSS155",
          "GROSS156",
          "GROSS157",
          "GROSS158",
          "GROSS159",
          "GROSS16",
          "GROSS160",
          "GROSS161",
          "GROSS162",
          "GROSS163",
          "GROSS164",
          "GROSS165",
          "GROSS166",
          "GROSS167",
          "GROSS168",
          "GROSS169",
          "GROSS17",
          "GROSS170",
          "GROSS171",
          "GROSS172",
          "GROSS173",
          "GROSS174",
          "GROSS175",
          "GROSS176",
          "GROSS177",
          "GROSS178",
          "GROSS179",
          "GROSS18",
          "GROSS180",
          "GROSS181",
          "GROSS182",
          "GROSS183",
          "GROSS184",
          "GROSS185",
          "GROSS186",
          "GROSS187",
          "GROSS188",
          "GROSS189",
          "GROSS19",
          "GROSS190",
          "GROSS191",
          "GROSS192",
          "GROSS193",
          "GROSS194",
          "GROSS195",
          "GROSS196",
          "GROSS197",
          "GROSS198",
          "GROSS199",
          "GROSS2",
          "GROSS20",
          "GROSS200",
          "GROSS201",
          "GROSS202",
          "GROSS203",
          "GROSS204",
          "GROSS205",
          "GROSS206",
          "GROSS207",
          "GROSS208",
          "GROSS209",
          "GROSS21",
          "GROSS210",
          "GROSS211",
          "GROSS212",
          "GROSS213",
          "GROSS214",
          "GROSS215",
          "GROSS216",
          "GROSS217",
          "GROSS218",
          "GROSS219",
          "GROSS22",
          "GROSS220",
          "GROSS221",
          "GROSS222",
          "GROSS223",
          "GROSS224",
          "GROSS225",
          "GROSS226",
          "GROSS227",
          "GROSS228",
          "GROSS229",
          "GROSS23",
          "GROSS230",
          "GROSS231",
          "GROSS232",
          "GROSS233",
          "GROSS234",
          "GROSS235",
          "GROSS236",
          "GROSS237",
          "GROSS238",
          "GROSS239",
          "GROSS24",
          "GROSS240",
          "GROSS241",
          "GROSS242",
          "GROSS243",
          "GROSS244",
          "GROSS245",
          "GROSS246",
          "GROSS247",
          "GROSS248",
          "GROSS249",
          "GROSS25",
          "GROSS250",
          "GROSS251",
          "GROSS252",
          "GROSS253",
          "GROSS254",
          "GROSS255",
          "GROSS256",
          "GROSS257",
          "GROSS258",
          "GROSS259",
          "GROSS26",
          "GROSS260",
          "GROSS261",
          "GROSS262",
          "GROSS263",
          "GROSS264",
          "GROSS265",
          "GROSS266",
          "GROSS267",
          "GROSS268",
          "GROSS269",
          "GROSS27",
          "GROSS270",
          "GROSS271",
          "GROSS272",
          "GROSS273",
          "GROSS274",
          "GROSS275",
          "GROSS276",
          "GROSS277",
          "GROSS278",
          "GROSS279",
          "GROSS28",
          "GROSS280",
          "GROSS281",
          "GROSS282",
          "GROSS283",
          "GROSS284",
          "GROSS285",
          "GROSS286",
          "GROSS287",
          "GROSS288",
          "GROSS289",
          "GROSS29",
          "GROSS290",
          "GROSS291",
          "GROSS292",
          "GROSS293",
          "GROSS294",
          "GROSS295",
          "GROSS296",
          "GROSS297",
          "GROSS298",
          "GROSS299",
          "GROSS3",
          "GROSS30",
          "GROSS300",
          "GROSS31",
          "GROSS32",
          "GROSS33",
          "GROSS34",
          "GROSS35",
          "GROSS36",
          "GROSS37",
          "GROSS38",
          "GROSS39",
          "GROSS4",
          "GROSS40",
          "GROSS41",
          "GROSS42",
          "GROSS43",
          "GROSS44",
          "GROSS45",
          "GROSS46",
          "GROSS47",
          "GROSS48",
          "GROSS49",
          "GROSS5",
          "GROSS50",
          "GROSS51",
          "GROSS52",
          "GROSS53",
          "GROSS54",
          "GROSS55",
          "GROSS56",
          "GROSS57",
          "GROSS58",
          "GROSS59",
          "GROSS6",
          "GROSS60",
          "GROSS61",
          "GROSS62",
          "GROSS63",
          "GROSS64",
          "GROSS65",
          "GROSS66",
          "GROSS67",
          "GROSS68",
          "GROSS69",
          "GROSS7",
          "GROSS70",
          "GROSS71",
          "GROSS72",
          "GROSS73",
          "GROSS74",
          "GROSS75",
          "GROSS76",
          "GROSS77",
          "GROSS78",
          "GROSS79",
          "GROSS8",
          "GROSS80",
          "GROSS81",
          "GROSS82",
          "GROSS83",
          "GROSS84",
          "GROSS85",
          "GROSS86",
          "GROSS87",
          "GROSS88",
          "GROSS89",
          "GROSS9",
          "GROSS90",
          "GROSS91",
          "GROSS92",
          "GROSS93",
          "GROSS94",
          "GROSS95",
          "GROSS96",
          "GROSS97",
          "GROSS98",
          "GROSS99",
          "NET1",
          "NET10",
          "NET100",
          "NET101",
          "NET102",
          "NET103",
          "NET104",
          "NET105",
          "NET106",
          "NET107",
          "NET108",
          "NET109",
          "NET11",
          "NET110",
          "NET111",
          "NET112",
          "NET113",
          "NET114",
          "NET115",
          "NET116",
          "NET117",
          "NET118",
          "NET119",
          "NET12",
          "NET120",
          "NET121",
          "NET122",
          "NET123",
          "NET124",
          "NET125",
          "NET126",
          "NET127",
          "NET128",
          "NET129",
          "NET13",
          "NET130",
          "NET131",
          "NET132",
          "NET133",
          "NET134",
          "NET135",
          "NET136",
          "NET137",
          "NET138",
          "NET139",
          "NET14",
          "NET140",
          "NET141",
          "NET142",
          "NET143",
          "NET144",
          "NET145",
          "NET146",
          "NET147",
          "NET148",
          "NET149",
          "NET15",
          "NET150",
          "NET151",
          "NET152",
          "NET153",
          "NET154",
          "NET155",
          "NET156",
          "NET157",
          "NET158",
          "NET159",
          "NET16",
          "NET160",
          "NET161",
          "NET162",
          "NET163",
          "NET164",
          "NET165",
          "NET166",
          "NET167",
          "NET168",
          "NET169",
          "NET17",
          "NET170",
          "NET171",
          "NET172",
          "NET173",
          "NET174",
          "NET175",
          "NET176",
          "NET177",
          "NET178",
          "NET179",
          "NET18",
          "NET180",
          "NET181",
          "NET182",
          "NET183",
          "NET184",
          "NET185",
          "NET186",
          "NET187",
          "NET188",
          "NET189",
          "NET19",
          "NET190",
          "NET191",
          "NET192",
          "NET193",
          "NET194",
          "NET195",
          "NET196",
          "NET197",
          "NET198",
          "NET199",
          "NET2",
          "NET20",
          "NET200",
          "NET201",
          "NET202",
          "NET203",
          "NET204",
          "NET205",
          "NET206",
          "NET207",
          "NET208",
          "NET209",
          "NET21",
          "NET210",
          "NET211",
          "NET212",
          "NET213",
          "NET214",
          "NET215",
          "NET216",
          "NET217",
          "NET218",
          "NET219",
          "NET22",
          "NET220",
          "NET221",
          "NET222",
          "NET223",
          "NET224",
          "NET225",
          "NET226",
          "NET227",
          "NET228",
          "NET229",
          "NET23",
          "NET230",
          "NET231",
          "NET232",
          "NET233",
          "NET234",
          "NET235",
          "NET236",
          "NET237",
          "NET238",
          "NET239",
          "NET24",
          "NET240",
          "NET241",
          "NET242",
          "NET243",
          "NET244",
          "NET245",
          "NET246",
          "NET247",
          "NET248",
          "NET249",
          "NET25",
          "NET250",
          "NET251",
          "NET252",
          "NET253",
          "NET254",
          "NET255",
          "NET256",
          "NET257",
          "NET258",
          "NET259",
          "NET26",
          "NET260",
          "NET261",
          "NET262",
          "NET263",
          "NET264",
          "NET265",
          "NET266",
          "NET267",
          "NET268",
          "NET269",
          "NET27",
          "NET270",
          "NET271",
          "NET272",
          "NET273",
          "NET274",
          "NET275",
          "NET276",
          "NET277",
          "NET278",
          "NET279",
          "NET28",
          "NET280",
          "NET281",
          "NET282",
          "NET283",
          "NET284",
          "NET285",
          "NET286",
          "NET287",
          "NET288",
          "NET289",
          "NET29",
          "NET290",
          "NET291",
          "NET292",
          "NET293",
          "NET294",
          "NET295",
          "NET296",
          "NET297",
          "NET298",
          "NET299",
          "NET3",
          "NET30",
          "NET300",
          "NET31",
          "NET32",
          "NET33",
          "NET34",
          "NET35",
          "NET36",
          "NET37",
          "NET38",
          "NET39",
          "NET4",
          "NET40",
          "NET41",
          "NET42",
          "NET43",
          "NET44",
          "NET45",
          "NET46",
          "NET47",
          "NET48",
          "NET49",
          "NET5",
          "NET50",
          "NET51",
          "NET52",
          "NET53",
          "NET54",
          "NET55",
          "NET56",
          "NET57",
          "NET58",
          "NET59",
          "NET6",
          "NET60",
          "NET61",
          "NET62",
          "NET63",
          "NET64",
          "NET65",
          "NET66",
          "NET67",
          "NET68",
          "NET69",
          "NET7",
          "NET70",
          "NET71",
          "NET72",
          "NET73",
          "NET74",
          "NET75",
          "NET76",
          "NET77",
          "NET78",
          "NET79",
          "NET8",
          "NET80",
          "NET81",
          "NET82",
          "NET83",
          "NET84",
          "NET85",
          "NET86",
          "NET87",
          "NET88",
          "NET89",
          "NET9",
          "NET90",
          "NET91",
          "NET92",
          "NET93",
          "NET94",
          "NET95",
          "NET96",
          "NET97",
          "NET98",
          "NET99"
        ],
        "type": "string"
      },
      "document": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 4000,
                "type": "string"
              },
              "documentSize": {
                "format": "int32",
                "type": "integer"
              },
              "documentType": {
                "$ref": "#/components/schemas/documentType"
              },
              "mediaType": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "versions": {
                "items": {
                  "$ref": "#/components/schemas/documentVersion"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "documentType": {
        "enum": [
          "ARTICLE_DATASHEET",
          "ARTICLE_LABEL",
          "BLANKET_PURCHASE_ORDER",
          "CONTRACT",
          "CREDIT_ADVICE",
          "CREDIT_ADVICE_CANCELLATION",
          "CREDIT_ADVICE_PRELIMINARY_INVOICE",
          "CREDIT_ADVICE_UBL",
          "CREDIT_ADVICE_XR",
          "CRM_EVENT_LETTER",
          "CUSTOMER_ARTICLE_PRICE_LIST",
          "DUNNING",
          "INCOMING_GOODS",
          "INCOMING_GOODS_FROM_RETURN",
          "INCOMING_GOODS_RETURNS_PICKUP_NOTE",
          "INVENTORY_TAKING",
          "PERFORMANCE_RECORD",
          "PRODUCTION_ORDER",
          "PURCHASE_INVOICE",
          "PURCHASE_INVOICE_FATTURAPA",
          "PURCHASE_INVOICE_ZUGFERD",
          "PURCHASE_ORDER",
          "PURCHASE_ORDER_CANCELLATION",
          "PURCHASE_ORDER_DEFAULT",
          "PURCHASE_ORDER_REQUEST",
          "PURCHASE_ORDER_REQUEST_SUPPLIER_DOCUMENT",
          "QUOTATION",
          "QUOTATION_DEFAULT",
          "SALES_INVOICE",
          "SALES_INVOICE_CANCELLATION",
          "SALES_INVOICE_DEFAULT",
          "SALES_INVOICE_FATTURAPA",
          "SALES_INVOICE_PRELIMINARY",
          "SALES_INVOICE_QR",
          "SALES_INVOICE_UBL",
          "SALES_INVOICE_XR",
          "SALES_ORDER",
          "SALES_ORDER_DEFAULT",
          "SHIPMENT_CUSTOMS_DECLARATION",
          "SHIPMENT_DELIVERY_LABEL",
          "SHIPMENT_DELIVERY_NOTE",
          "SHIPMENT_DELIVERY_NOTE_DEFAULT",
          "SHIPMENT_PICKING_LIST",
          "SHIPMENT_PROFORMA_INVOICE",
          "SHIPMENT_RETURN_DELIVERY_NOTE",
          "SHIPMENT_RETURN_LABEL",
          "SHIPMENT_SERIAL_NUMBERS_CSV",
          "TICKET"
        ],
        "type": "string"
      },
      "documentVersion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "comment": {
                "maxLength": 255,
                "type": "string"
              },
              "documentSize": {
                "format": "int32",
                "type": "integer"
              },
              "documentVersion": {
                "maxLength": 60,
                "type": "string"
              },
              "userId": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "duration": {
        "properties": {
          "durationSeconds": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ecommerceOrder": {
        "properties": {
          "ecommerceId": {
            "maxLength": 1000,
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          },
          "externalConnectionId": {
            "type": "string",
            "x-weclapp": {
              "entity": "externalConnection",
              "required": true,
              "service": "externalConnection"
            }
          }
        },
        "type": "object"
      },
      "emailAddresses": {
        "properties": {
          "bccAddresses": {
            "maxLength": 255,
            "type": "string"
          },
          "ccAddresses": {
            "maxLength": 255,
            "type": "string"
          },
          "toAddresses": {
            "maxLength": 255,
            "type": "string"
          }
        },
        "type": "object"
      },
      "entity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/onlyId"
          },
          {
            "properties": {
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "entityReference": {
        "properties": {
          "entityId": {
            "type": "string"
          },
          "entityName": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "eventInvitationStatus": {
        "enum": [
          "ACCEPT",
          "CANCEL",
          "DECLINE",
          "INVITATION",
          "TENTATIVE",
          "UNDEFINED"
        ],
        "type": "string"
      },
      "eventRight": {
        "enum": [
          "CAN_MODIFY_EVERYTHING",
          "CAN_MODIFY_EVERYTHING_BUT_NOT_PARTICIPIENT_LIST",
          "CAN_MODIFY_ONLY_PARTICIPIENT_LIST",
          "CAN_NOT_MODIFY_ANYTHING"
        ],
        "type": "string"
      },
      "externalConnection": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "connectionType": {
                "$ref": "#/components/schemas/externalConnectionType",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "externalConnectionType": {
        "enum": [
          "AMAZON",
          "BREVO",
          "CLEVERREACH",
          "DATEV_CONNECT_ONLINE_PROD",
          "DATEV_CONNECT_ONLINE_STAGING",
          "DHL",
          "EBAY",
          "FIGO_REG_SHIELD_PROD",
          "FIGO_REG_SHIELD_STAGING",
          "FINTEC_SYSTEMS",
          "GOOGLEV3",
          "ITSCOPE",
          "JIRA",
          "KAUFLAND",
          "MAGENTO",
          "MAGENTO2",
          "MAILCHIMP",
          "MAPBOX",
          "MOLLIE_PROD",
          "MOLLIE_STAGING",
          "NAMIRIAL_2C_SOLUTION",
          "OTTO",
          "PRESTA",
          "SHIPCLOUD",
          "SHOPIFY",
          "SHOPWARE",
          "SHOPWARE6",
          "STRIPE_PROD",
          "STRIPE_STAGING",
          "SYNAXON",
          "TEAMVIEWER",
          "TINK",
          "VERSACOMMERCE",
          "WECLAPP2WECLAPP",
          "WOOCOMMERCE",
          "XTCOMMERCE",
          "ZENDESK"
        ],
        "type": "string"
      },
      "fastProductionBookingResult": {
        "properties": {
          "message": {
            "$ref": "#/components/schemas/fastProductionBookingResultMessage"
          },
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "fastProductionBookingResultMessage": {
        "enum": [
          "INVALID_ORDER",
          "INVALID_ORDER_NUMBER",
          "INVALID_QUANTITY",
          "SUCCESS"
        ],
        "type": "string"
      },
      "financialYear": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "periods": {
                "items": {
                  "$ref": "#/components/schemas/period"
                },
                "type": "array"
              },
              "status": {
                "$ref": "#/components/schemas/financialYearStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "validFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "validTo": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "financialYearStatus": {
        "enum": [
          "CLOSED",
          "CURRENT",
          "PLANNED",
          "PRELIMINARY_CLOSED"
        ],
        "type": "string"
      },
      "followupBusyState": {
        "enum": [
          "BUSY",
          "FREE",
          "OUT_OF_OFFICE",
          "TENTATIVE"
        ],
        "type": "string"
      },
      "fulfillmentProvider": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "fulfillmentProviderType": {
                "$ref": "#/components/schemas/fulfillmentProviderType",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "fulfillmentProviderType": {
        "enum": [
          "AMAZON",
          "EXTERNAL",
          "INTERNAL"
        ],
        "type": "string"
      },
      "incomingBooking": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractBookRecord"
          },
          {
            "properties": {
              "articleValuationPrice": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "bookIntoWarehouse": {
                "type": "boolean"
              },
              "confirmedByUserIdDeprecated": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "confirmedDateDeprecated": {
                "format": "timestamp",
                "type": "integer"
              },
              "confirmedQuantityDeprecated": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})",
                "type": "string"
              },
              "expirationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "incomingGoodsItemId": {
                "type": "string"
              },
              "loadingEquipmentIdentifierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "loadingEquipmentIdentifier",
                  "service": "loadingEquipmentIdentifier"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "incomingGoods": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseShipment"
          },
          {
            "properties": {
              "customerDeliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "customerInvoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "deliveryNoteNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "incomingGoodsItems": {
                "items": {
                  "$ref": "#/components/schemas/incomingGoodsItem"
                },
                "type": "array"
              },
              "incomingGoodsNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "incomingGoodsType": {
                "$ref": "#/components/schemas/shipmentInType"
              },
              "invoiceRecipientId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "purchaseOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "purchaseOrder",
                  "service": "purchaseOrder"
                }
              },
              "purchaseOrderNumber": {
                "type": "string"
              },
              "purchaseOrders": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "purchaseOrder",
                  "service": "purchaseOrder"
                }
              },
              "relatedShipmentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipment",
                  "service": "shipment"
                }
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "returnAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "senderCustomerNumber": {
                "type": "string"
              },
              "senderPartyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "senderSupplierNumber": {
                "type": "string"
              },
              "sourceWarehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              },
              "sourceWarehouseName": {
                "type": "string"
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "incomingGoodsItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItem"
          },
          {
            "properties": {
              "customAttributes": {
                "items": {
                  "$ref": "#/components/schemas/customAttribute"
                },
                "type": "array"
              },
              "purchaseOrderItemId": {
                "type": "string"
              },
              "returnAssessmentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnAssessment"
                }
              },
              "returnAssessmentName": {
                "type": "string"
              },
              "returnDescription": {
                "format": "html",
                "maxLength": 4000,
                "type": "string"
              },
              "returnErrorId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnError"
                }
              },
              "returnErrorName": {
                "type": "string"
              },
              "returnReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnReason"
                }
              },
              "returnReasonName": {
                "type": "string"
              },
              "returnRectificationId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnRectification"
                }
              },
              "returnRectificationName": {
                "type": "string"
              },
              "salesOrderItemId": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "internalShippingCarrier": {
        "enum": [
          "ANGEL_DE",
          "AUSTRIAN_POST_EMS",
          "AUSTRIAN_POST_PLUS_INTERNATIONAL",
          "AUSTRIAN_POST_PREMIUM",
          "AUSTRIAN_POST_PREMIUM_SELECT",
          "AUSTRIAN_POST_RETURNS",
          "AUSTRIAN_POST_STANDARD",
          "CARGO_INTERNATIONAL_EXPRESS",
          "CARGO_INTERNATIONAL_STANDARD",
          "DEUTSCHE_POST_STANDARD",
          "DHL_EUROPAKET",
          "DHL_EUROPAKET_EV",
          "DHL_EXPRESS_ECONOMY_SELECT",
          "DHL_EXPRESS_ONE_DAY",
          "DHL_EXPRESS_ONE_DAY_EARLY",
          "DHL_PAKET_EV",
          "DHL_PAKET_INTERNATIONAL_EV",
          "DHL_RETURNS",
          "DHL_RETURNS_EV",
          "DHL_STANDARD",
          "DHL_WARENPOST",
          "DHL_WARENPOST_EV",
          "DHL_WARENPOST_INTERNATIONAL_EV",
          "DPD_EXPRESS_ONE_DAY",
          "DPD_EXPRESS_ONE_DAY_EARLY",
          "DPD_RETURNS",
          "DPD_STANDARD",
          "FEDEX_EXPRESS_ONE_DAY_EARLY",
          "FEDEX_INTERNATIONAL_ECONOMY",
          "FEDEX_INTERNATIONAL_PRIORITY",
          "FEDEX_STANDARD",
          "GLS_EXPRESS_ONE_DAY",
          "GLS_PICK_AND_SHIP",
          "GLS_RETURNS",
          "GLS_STANDARD",
          "GO_ONE_DAY",
          "HERMES_RETURNS",
          "HERMES_STANDARD",
          "ILOXX_STANDARD",
          "PARCEL_ONE",
          "TNT_ONE_DAY",
          "TNT_ONE_DAY_EARLY",
          "UPS_EXPEDITED",
          "UPS_EXPRESS_1200",
          "UPS_EXPRESS_ONE_DAY",
          "UPS_EXPRESS_ONE_DAY_EARLY",
          "UPS_RETURNS",
          "UPS_STANDARD"
        ],
        "type": "string"
      },
      "internalTicketStatus": {
        "enum": [
          "CLOSED",
          "FIXED",
          "IN_PROGRESS",
          "POOL",
          "UNASSIGNED",
          "WAITING"
        ],
        "type": "string"
      },
      "internalTransportReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "internalTransportReferenceNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "loadingEquipmentArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "loadingEquipmentIdentifierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "loadingEquipmentIdentifier",
                  "required": true,
                  "service": "loadingEquipmentIdentifier"
                }
              },
              "permanent": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "required": true,
                  "service": "warehouse"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "invoicingType": {
        "enum": [
          "EFFORT",
          "FIXED_PRICE"
        ],
        "type": "string"
      },
      "jobStatus": {
        "properties": {
          "errors": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "status": {
            "$ref": "#/components/schemas/taskStatus"
          },
          "type": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "lead": {
        "allOf": [
          {
            "$ref": "#/components/schemas/customerOrLead"
          },
          {
            "properties": {
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "leadNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "leadRatingId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "leadRating"
                }
              },
              "leadRatingName": {
                "type": "string"
              },
              "leadSourceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "leadSource"
                }
              },
              "leadSourceName": {
                "type": "string"
              },
              "leadStatus": {
                "$ref": "#/components/schemas/leadStatus"
              },
              "leadTopics": {
                "items": {
                  "$ref": "#/components/schemas/entity"
                },
                "type": "array"
              },
              "lossDescription": {
                "maxLength": 255,
                "type": "string"
              },
              "lossReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "customerLeadLossReason"
                }
              },
              "lossReasonName": {
                "type": "string"
              },
              "oldLeadNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "optIn": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInLetter": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInPhone": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInSms": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "responsibleUserFixed": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel"
              },
              "salesStageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesStage",
                  "service": "salesStage"
                }
              },
              "salesStageName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "leadStatus": {
        "enum": [
          "CONVERTED",
          "DISQUALIFIED",
          "NEW",
          "PREQUALIFIED",
          "QUALIFIED"
        ],
        "type": "string"
      },
      "ledgerAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountNumber": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "automatic": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "balanceSheetItem": {
                "$ref": "#/components/schemas/balanceSheetItem"
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "parentAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "parentAccountNumber": {
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/ledgerAccountType",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ledgerAccountType": {
        "enum": [
          "CARRY_FORWARD_ACCOUNT",
          "IMPERSONAL_ACCOUNT",
          "PERSONAL_ACCOUNT"
        ],
        "type": "string"
      },
      "license": {
        "properties": {
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "loadingEquipmentIdentifier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 1000,
                "type": "string"
              },
              "loadingEquipmentArticles": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array"
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "mailTemplate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "bccEmailAddresses": {
                "maxLength": 1000,
                "type": "string"
              },
              "ccEmailAddresses": {
                "maxLength": 1000,
                "type": "string"
              },
              "creatorId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "subject": {
                "maxLength": 255,
                "type": "string"
              },
              "text": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "toEmailAddresses": {
                "maxLength": 1000,
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/templateType",
                "x-weclapp": {
                  "required": true
                }
              },
              "useAsDefault": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "marginCalculationPriceType": {
        "enum": [
          "ARTICLE_CALCULATION_PRICE",
          "EMPLOYEE_COST",
          "MOVING_AVERAGE",
          "PURCHASE_PRICE_PRODUCTION_COST"
        ],
        "type": "string"
      },
      "minimalStoragePlace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "name": {
                "maxLength": 256,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "moneyTransaction": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountForCostsOfMonetaryTrafficId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountForCostsOfMonetaryTrafficNumber": {
                "type": "string"
              },
              "accountForDunningFeeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountForDunningFeeNumber": {
                "type": "string"
              },
              "accountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountNumber": {
                "type": "string"
              },
              "amount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountDiscount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "cashAccountSheetId": {
                "type": "string"
              },
              "createdById": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "currencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "required": true,
                  "service": "currency"
                }
              },
              "currencyName": {
                "type": "string"
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "effectiveDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "externalRecordNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "origin": {
                "$ref": "#/components/schemas/moneyTransactionSource"
              },
              "partyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "paymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "paymentMethodName": {
                "type": "string"
              },
              "paymentToleranceAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "paymentToleranceAccountNumber": {
                "type": "string"
              },
              "paymentType": {
                "$ref": "#/components/schemas/paymentType",
                "x-weclapp": {
                  "required": true
                }
              },
              "taxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "taxName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "moneyTransactionProcessingStrategy": {
        "enum": [
          "BOOK",
          "CLEAR",
          "NONE",
          "PROCESS"
        ],
        "type": "string"
      },
      "moneyTransactionSource": {
        "enum": [
          "AMAZON",
          "CAMT053",
          "EBAY",
          "FIGO",
          "FINAPI",
          "KLARNA",
          "LONDON_ZURICH",
          "MANUALLY",
          "MOLLIE",
          "MT940_KAPOTT",
          "MT940_PROVIDE",
          "PAYMENT_RUN",
          "PAYPAL",
          "POS",
          "STRIPE",
          "TINK"
        ],
        "type": "string"
      },
      "nestedStoragePlace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/minimalStoragePlace"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "barcode": {
                "maxLength": 4000,
                "type": "string"
              },
              "blockedForResupply": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "blockedForResupplyReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "storagePlaceBlockingReason"
                }
              },
              "customerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "fieldNumber": {
                "format": "int32",
                "type": "integer"
              },
              "levelNumber": {
                "format": "int32",
                "type": "integer"
              },
              "storagePlaceSizeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlaceSize",
                  "service": "storagePlaceSize"
                }
              },
              "storagePlaceType": {
                "$ref": "#/components/schemas/storagePlaceType",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "notification": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "entityId": {
                "type": "string"
              },
              "entityName": {
                "type": "string"
              },
              "priority": {
                "$ref": "#/components/schemas/notificationPriority",
                "x-weclapp": {
                  "required": true
                }
              },
              "read": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "title": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "notificationPriority": {
        "enum": [
          "CRITICAL",
          "NORMAL"
        ],
        "type": "string"
      },
      "offerOutType": {
        "enum": [
          "CONTRACT",
          "NONE",
          "PROJECT",
          "SALES_INVOICE",
          "SALES_ORDER"
        ],
        "type": "string"
      },
      "offerStatusType": {
        "enum": [
          "ACCEPTED",
          "INQUIRED",
          "OPEN",
          "REJECTED"
        ],
        "type": "string"
      },
      "onlineAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountName": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "accountType": {
                "$ref": "#/components/schemas/onlineAccountType",
                "x-weclapp": {
                  "required": true
                }
              },
              "url": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "onlineAccountType": {
        "enum": [
          "AMAZON",
          "BLOG",
          "EBAY",
          "FACEBOOK",
          "GOOGLE_DRIVE",
          "INSTAGRAM",
          "LINKEDIN",
          "OTHER",
          "PINTEREST",
          "SKYPE",
          "SLIDESHARE",
          "TWITTER",
          "WIKIPEDIA",
          "XING",
          "YELP",
          "YOUTUBE"
        ],
        "type": "string"
      },
      "onlyId": {
        "properties": {
          "id": {
            "readOnly": true,
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          }
        },
        "type": "object"
      },
      "openItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "amount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountDiscount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountOpen": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountPaid": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "clearanceDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "cleared": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "openItemNumber": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "openItemType": {
                "$ref": "#/components/schemas/openItemType",
                "x-weclapp": {
                  "required": true
                }
              },
              "paymentApplications": {
                "items": {
                  "$ref": "#/components/schemas/paymentApplication"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "openItemType": {
        "enum": [
          "CREDITOR",
          "CREDITOR_INVERTED",
          "CREDIT_ADVICE",
          "CREDIT_NOTE_CREDITOR",
          "CREDIT_NOTE_CREDITOR_INVERTED",
          "CREDIT_NOTE_DEBITOR",
          "CREDIT_NOTE_DEBITOR_INVERTED",
          "DEBTOR",
          "DEBTOR_INCOMING_PAYMENT",
          "DEBTOR_INCOMING_PAYMENT_INVERTED",
          "DEBTOR_INVERTED",
          "DEBTOR_OUTGOING_PAYMENT",
          "DEBTOR_OUTGOING_PAYMENT_INVERTED",
          "DEBTOR_PARTY",
          "DEBTOR_PARTY_INVERTED",
          "DEBTOR_RETURN_DEBIT",
          "DEBTOR_RETURN_DEBIT_FEE"
        ],
        "type": "string"
      },
      "opportunity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "contactId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "creatorId": {
                "type": "string"
              },
              "customerId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              },
              "customerNumber": {
                "type": "string"
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "expectedDeliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "expectedSignatureDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "hotLead": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "nextCallDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "opportunityNumber": {
                "maxLength": 64,
                "type": "string"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "responsibleUserUsername": {
                "type": "string"
              },
              "revenue": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesProbability": {
                "format": "int32",
                "type": "integer"
              },
              "salesStageHistory": {
                "items": {
                  "$ref": "#/components/schemas/salesStageHistory"
                },
                "type": "array"
              },
              "salesStageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesStage",
                  "required": true,
                  "service": "salesStage"
                }
              },
              "salesStageName": {
                "type": "string"
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "topics": {
                "items": {
                  "$ref": "#/components/schemas/entity"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "opportunityTopic"
                }
              },
              "winLossDescription": {
                "maxLength": 255,
                "type": "string"
              },
              "winLossReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "opportunityWinLossReason"
                }
              },
              "winLossReasonName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "orderStatusType": {
        "enum": [
          "CANCELLED",
          "CLOSED",
          "MANUALLY_CLOSED",
          "ORDER_CONFIRMATION_PRINTED",
          "ORDER_ENTRY_IN_PROGRESS"
        ],
        "type": "string"
      },
      "packagingUnit": {
        "properties": {
          "articleId": {
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          },
          "baseArticleQuantity": {
            "format": "int64",
            "type": "integer"
          },
          "packagingUnitQuantity": {
            "format": "int32",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          }
        },
        "type": "object"
      },
      "party": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractParty"
          },
          {
            "properties": {
              "bankAccounts": {
                "items": {
                  "$ref": "#/components/schemas/partyBankAccount"
                },
                "type": "array"
              },
              "commercialLanguageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "commercialLanguage",
                  "service": "commercialLanguage"
                }
              },
              "commissionSalesPartners": {
                "items": {
                  "$ref": "#/components/schemas/commissionSalesPartner"
                },
                "type": "array"
              },
              "companySizeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "companySize"
                }
              },
              "companySizeName": {
                "type": "string"
              },
              "competitor": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "contacts": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "currencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "service": "currency"
                }
              },
              "currencyName": {
                "type": "string"
              },
              "customer": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "customerAmountInsured": {
                "format": "decimal",
                "pattern": "^([0-9]{1,14})([.][0-9]{1,4})?$",
                "type": "string"
              },
              "customerAnnualRevenue": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "customerBlockNotice": {
                "maxLength": 1000,
                "type": "string"
              },
              "customerBlocked": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "customerBusinessType": {
                "$ref": "#/components/schemas/customerBusinessType",
                "x-weclapp": {
                  "required": true
                }
              },
              "customerCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "customerCategory"
                }
              },
              "customerCategoryName": {
                "type": "string"
              },
              "customerCreditLimit": {
                "format": "decimal",
                "pattern": "^([0-9]{1,14})([.][0-9]{1,4})?$",
                "type": "string"
              },
              "customerCurrentSalesStageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesStage",
                  "service": "salesStage"
                }
              },
              "customerCurrentSalesStageName": {
                "type": "string"
              },
              "customerDebtorAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "customerDebtorAccountNumber": {
                "type": "string"
              },
              "customerDebtorAccountingCodeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "personalAccountingCode"
                }
              },
              "customerDefaultHeaderDiscount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "customerDefaultHeaderSurcharge": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "customerDefaultShippingCarrierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shippingCarrier",
                  "service": "shippingCarrier"
                }
              },
              "customerDeliveryBlock": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "customerInsolvent": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "customerInsured": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "customerInternalNote": {
                "format": "html",
                "maxLength": 4000,
                "type": "string"
              },
              "customerLossDescription": {
                "maxLength": 255,
                "type": "string"
              },
              "customerLossReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "customerLeadLossReason"
                }
              },
              "customerLossReasonName": {
                "type": "string"
              },
              "customerNonStandardTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "customerNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "customerNumberOld": {
                "maxLength": 1000,
                "type": "string"
              },
              "customerPaymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "customerPaymentMethodName": {
                "type": "string"
              },
              "customerSalesChannel": {
                "$ref": "#/components/schemas/distributionChannel"
              },
              "customerSalesOrderPaymentType": {
                "$ref": "#/components/schemas/salesOrderPaymentType"
              },
              "customerSalesProbability": {
                "format": "int32",
                "type": "integer"
              },
              "customerSalesStageHistory": {
                "items": {
                  "$ref": "#/components/schemas/salesStageHistory"
                },
                "type": "array"
              },
              "customerSatisfaction": {
                "$ref": "#/components/schemas/customerSatisfaction"
              },
              "customerShipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "customerShipmentMethodName": {
                "type": "string"
              },
              "customerSupplierNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "customerTermOfPaymentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "termOfPayment",
                  "service": "termOfPayment"
                }
              },
              "customerTermOfPaymentName": {
                "type": "string"
              },
              "customerUseCustomsTariffNumber": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "deliveryEmailAddressesId": {
                "type": "string"
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "dunningAddressId": {
                "type": "string"
              },
              "dunningEmailAddressesId": {
                "type": "string"
              },
              "enableDropshippingInNewSupplySources": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "eoriNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "factoring": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "fixPhone2": {
                "maxLength": 1000,
                "type": "string"
              },
              "fixedResponsibleUser": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "formerSalesPartner": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "habitualExporter": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "imageId": {
                "type": "string"
              },
              "invoiceBlock": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoiceRecipientId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "leadRatingId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "leadRating"
                }
              },
              "leadRatingName": {
                "type": "string"
              },
              "leadSourceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "leadSource"
                }
              },
              "leadSourceName": {
                "type": "string"
              },
              "leadStatus": {
                "$ref": "#/components/schemas/leadStatus"
              },
              "legalFormId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "legalForm"
                }
              },
              "legalFormName": {
                "type": "string"
              },
              "mobilePhone2": {
                "maxLength": 1000,
                "type": "string"
              },
              "optInEmail": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInLetter": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInPhone": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optInSms": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "parentPartyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "partyEmailAddresses": {
                "items": {
                  "$ref": "#/components/schemas/partyEmailAddresses"
                },
                "type": "array"
              },
              "partyHabitualExporterLettersOfIntent": {
                "items": {
                  "$ref": "#/components/schemas/partyHabitualExporterLetterOfIntent"
                },
                "type": "array"
              },
              "phoneHome": {
                "maxLength": 1000,
                "type": "string"
              },
              "primaryContactId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "purchaseEmailAddressesId": {
                "type": "string"
              },
              "purchaseViaPlafond": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "quotationEmailAddressesId": {
                "type": "string"
              },
              "ratingId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "partyRating"
                }
              },
              "ratingName": {
                "type": "string"
              },
              "referenceNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "responsibleUserUsername": {
                "type": "string"
              },
              "salesInvoiceEmailAddressesId": {
                "type": "string"
              },
              "salesOrderEmailAddressesId": {
                "type": "string"
              },
              "salesPartner": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesPartnerDefaultCommissionFix": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "salesPartnerDefaultCommissionPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "salesPartnerDefaultCommissionType": {
                "$ref": "#/components/schemas/commissionType"
              },
              "sectorId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "sector"
                }
              },
              "sectorName": {
                "type": "string"
              },
              "supplier": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "supplierCreditorAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "supplierCreditorAccountNumber": {
                "type": "string"
              },
              "supplierCreditorAccountingCodeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "personalAccountingCode"
                }
              },
              "supplierCustomerNumberAtSupplier": {
                "maxLength": 64,
                "type": "string"
              },
              "supplierDefaultShippingCarrierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shippingCarrier",
                  "service": "shippingCarrier"
                }
              },
              "supplierInternalNote": {
                "format": "html",
                "maxLength": 1000,
                "type": "string"
              },
              "supplierMinimumPurchaseOrderAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "supplierNonStandardTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "supplierNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "supplierNumberOld": {
                "maxLength": 1000,
                "type": "string"
              },
              "supplierOrderBlock": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "supplierPaymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "supplierPaymentMethodName": {
                "type": "string"
              },
              "supplierShipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "supplierShipmentMethodName": {
                "type": "string"
              },
              "supplierTermOfPaymentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "termOfPayment",
                  "service": "termOfPayment"
                }
              },
              "supplierTermOfPaymentName": {
                "type": "string"
              },
              "taxId": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "topics": {
                "items": {
                  "$ref": "#/components/schemas/entity"
                },
                "type": "array"
              },
              "vatIdentificationNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "xRechnungLeitwegId": {
                "maxLength": 46,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "partyBankAccount": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountHolder": {
                "maxLength": 1000,
                "type": "string"
              },
              "accountNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "bankCode": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "creditInstitute": {
                "maxLength": 1000,
                "type": "string"
              },
              "partyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              },
              "primary": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "partyButNotContact": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractParty"
          },
          {
            "properties": {
              "commercialLanguageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "commercialLanguage",
                  "service": "commercialLanguage"
                }
              },
              "contacts": {
                "items": {
                  "$ref": "#/components/schemas/contact"
                },
                "type": "array"
              },
              "currencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "service": "currency"
                }
              },
              "currencyName": {
                "type": "string"
              },
              "primaryContactId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "sectorId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "sector"
                }
              },
              "sectorName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "partyEmailAddresses": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "bccAddresses": {
                "type": "string"
              },
              "ccAddresses": {
                "type": "string"
              },
              "toAddresses": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "partyHabitualExporterLetterOfIntent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "automaticallySuggestInInvoice": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "date": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "fromSupplier": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoices": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array"
              },
              "numberDeclarer": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "numberSupplier": {
                "maxLength": 30,
                "type": "string"
              },
              "totalAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/partyHabitualExporterLetterOfIntentType",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "partyHabitualExporterLetterOfIntentType": {
        "enum": [
          "MULTIPLE_ACCOUNTING_EVENTS",
          "SINGLE_ACCOUNTING_EVENT"
        ],
        "type": "string"
      },
      "partyType": {
        "enum": [
          "ORGANIZATION",
          "PERSON"
        ],
        "type": "string"
      },
      "paymentApplication": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "amountApplied": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountAppliedOriginCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountCostsOfMonetaryTraffic": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountDiscountApplied": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "createdById": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "moneyTransactionId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "moneyTransaction",
                  "service": "moneyTransaction"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "paymentMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "autoClearingAccountTransaction": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "clearingAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "bankAccount",
                  "service": "bankAccount"
                }
              },
              "discountPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,3})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "discountValue": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "documentText": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "reference": {
                "maxLength": 255,
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/paymentMethodTypeKey"
              }
            },
            "type": "object"
          }
        ]
      },
      "paymentMethodTypeKey": {
        "enum": [
          "BANK",
          "CASH"
        ],
        "type": "string"
      },
      "paymentRun": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "paymentRunDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "paymentRunItems": {
                "items": {
                  "$ref": "#/components/schemas/paymentRunItem"
                },
                "type": "array"
              },
              "paymentRunNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "runByUserId": {
                "type": "string"
              },
              "totalAmount": {
                "format": "decimal",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "paymentRunItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "amountDiscount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "amountPayment": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "bankAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "bankAccount",
                  "service": "bankAccount"
                }
              },
              "cleared": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "conversionRate": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "conversionRateDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "moneyTransaction": {
                "$ref": "#/components/schemas/moneyTransaction"
              },
              "partyBankAccountId": {
                "type": "string"
              },
              "paymentRunId": {
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "paymentRunPaymentType": {
                "$ref": "#/components/schemas/paymentRunPaymentType",
                "x-weclapp": {
                  "required": true
                }
              },
              "purchaseOpenItemId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "purchaseOpenItem",
                  "required": true,
                  "service": "purchaseOpenItem"
                }
              },
              "purpose": {
                "maxLength": 1024,
                "type": "string"
              },
              "recordCurrency": {
                "$ref": "#/components/schemas/currency",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "paymentRunPaymentType": {
        "enum": [
          "NONE",
          "ONLINE",
          "SEPA",
          "SWIFT"
        ],
        "type": "string"
      },
      "paymentStatus": {
        "enum": [
          "CLEARED_WITH_CREDIT_NOTE",
          "CREDIT_NOTE_CLEARED",
          "NO_OPEN_ITEM",
          "OPEN",
          "PAID",
          "UNKNOWN"
        ],
        "type": "string"
      },
      "paymentType": {
        "enum": [
          "DISBURSEMENT",
          "RECEIPT"
        ],
        "type": "string"
      },
      "performanceRecordedStatus": {
        "enum": [
          "NOT_PERFORMANCE_RECORDED",
          "PERFORMANCE_RECORDED",
          "UNDEFINED"
        ],
        "type": "string"
      },
      "period": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "financialYearId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "financialYear",
                  "required": true,
                  "service": "financialYear"
                }
              },
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "open": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "periodNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "validFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "validTo": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "permissionString": {
        "enum": [
          "entity-accountDetermination-delete",
          "entity-accountDetermination-read",
          "entity-accountDetermination-update",
          "entity-accountingTransaction-delete",
          "entity-accountingTransaction-import",
          "entity-accountingTransaction-read",
          "entity-accountingTransaction-update",
          "entity-appSettings-delete",
          "entity-appSettings-read",
          "entity-appSettings-update",
          "entity-archivedEmail-delete",
          "entity-archivedEmail-read",
          "entity-archivedEmail-update",
          "entity-article-batchNumber",
          "entity-article-billOfMaterial",
          "entity-article-cost",
          "entity-article-delete",
          "entity-article-deletePrice",
          "entity-article-export",
          "entity-article-exportPrice",
          "entity-article-import",
          "entity-article-importPrice",
          "entity-article-read",
          "entity-article-readBarcode",
          "entity-article-readInventoryValuation",
          "entity-article-readPrice",
          "entity-article-serialNumber",
          "entity-article-settings",
          "entity-article-update",
          "entity-article-updateAccountingData",
          "entity-article-updateActive",
          "entity-article-updateArticleType",
          "entity-article-updateConversionRate",
          "entity-article-updateCustomsTariffNumber",
          "entity-article-updateImage",
          "entity-article-updateInventoryValuation",
          "entity-article-updateMarketValue",
          "entity-article-updateMassPriceCalculation",
          "entity-article-updateNumber",
          "entity-article-updatePrice",
          "entity-article-updatePrintDatasheet",
          "entity-article-updatePrintLabels",
          "entity-article-updateShipmentInfo",
          "entity-article-updateWholeUnits",
          "entity-articleAccountingCode-delete",
          "entity-articleAccountingCode-read",
          "entity-articleAccountingCode-update",
          "entity-articleCategory-delete",
          "entity-articleCategory-export",
          "entity-articleCategory-import",
          "entity-articleCategory-read",
          "entity-articleCategory-update",
          "entity-articleCategory-updateAccountingData",
          "entity-articleItemGroup-delete",
          "entity-articleItemGroup-read",
          "entity-articleItemGroup-update",
          "entity-articleRating-delete",
          "entity-articleRating-read",
          "entity-articleRating-update",
          "entity-articleStatus-delete",
          "entity-articleStatus-read",
          "entity-articleStatus-update",
          "entity-articleSupplySource-delete",
          "entity-articleSupplySource-deletePrice",
          "entity-articleSupplySource-export",
          "entity-articleSupplySource-import",
          "entity-articleSupplySource-read",
          "entity-articleSupplySource-readPrice",
          "entity-articleSupplySource-update",
          "entity-articleSupplySource-updatePrice",
          "entity-attendance-delete",
          "entity-attendance-readAll",
          "entity-attendance-settings",
          "entity-attendance-update",
          "entity-authenticationToken-read",
          "entity-authenticationToken-update",
          "entity-bankAccount-delete",
          "entity-bankAccount-read",
          "entity-bankAccount-update",
          "entity-blanketPurchaseOrder-delete",
          "entity-blanketPurchaseOrder-read",
          "entity-blanketPurchaseOrder-update",
          "entity-bookingTemplate-delete",
          "entity-bookingTemplate-read",
          "entity-bookingTemplate-update",
          "entity-businessHolidays-delete",
          "entity-businessHolidays-read",
          "entity-businessHolidays-update",
          "entity-businessHours-delete",
          "entity-businessHours-read",
          "entity-businessHours-update",
          "entity-calendar-delete",
          "entity-calendar-read",
          "entity-calendar-update",
          "entity-campaign-delete",
          "entity-campaign-read",
          "entity-campaign-update",
          "entity-cashAccount-delete",
          "entity-cashAccount-read",
          "entity-cashAccount-update",
          "entity-cashAccountSheet-delete",
          "entity-cashAccountSheet-read",
          "entity-cashAccountSheet-update",
          "entity-cashAccountSheet-updateClose",
          "entity-commercialLanguage-delete",
          "entity-commercialLanguage-read",
          "entity-commercialLanguage-update",
          "entity-companySize-delete",
          "entity-companySize-read",
          "entity-companySize-update",
          "entity-contract-billing",
          "entity-contract-createDocuments",
          "entity-contract-delete",
          "entity-contract-import",
          "entity-contract-read",
          "entity-contract-readAll",
          "entity-contract-settings",
          "entity-contract-update",
          "entity-contractAuthorizationUnit-delete",
          "entity-contractAuthorizationUnit-read",
          "entity-contractAuthorizationUnit-update",
          "entity-contractBillingGroup-delete",
          "entity-contractBillingGroup-read",
          "entity-contractBillingGroup-update",
          "entity-contractTerminationReason-delete",
          "entity-contractTerminationReason-read",
          "entity-contractTerminationReason-update",
          "entity-contractType-delete",
          "entity-contractType-read",
          "entity-contractType-update",
          "entity-costCenter-delete",
          "entity-costCenter-export",
          "entity-costCenter-import",
          "entity-costCenter-read",
          "entity-costCenter-update",
          "entity-costCenterGroup-delete",
          "entity-costCenterGroup-read",
          "entity-costCenterGroup-update",
          "entity-costType-delete",
          "entity-costType-read",
          "entity-costType-update",
          "entity-currency-delete",
          "entity-currency-read",
          "entity-currency-update",
          "entity-customAttributeDefinition-delete",
          "entity-customAttributeDefinition-update",
          "entity-customFont-delete",
          "entity-customFont-read",
          "entity-customFont-update",
          "entity-customLabelFormat-delete",
          "entity-customLabelFormat-read",
          "entity-customLabelFormat-update",
          "entity-customerCategory-delete",
          "entity-customerCategory-read",
          "entity-customerCategory-update",
          "entity-customerLeadLossReason-delete",
          "entity-customerLeadLossReason-read",
          "entity-customerLeadLossReason-update",
          "entity-customerTopic-delete",
          "entity-customerTopic-read",
          "entity-customerTopic-update",
          "entity-customsTariffNumber-delete",
          "entity-customsTariffNumber-read",
          "entity-customsTariffNumber-update",
          "entity-defaultInterestConfig-delete",
          "entity-defaultInterestConfig-read",
          "entity-defaultInterestConfig-update",
          "entity-documentFolder-delete",
          "entity-documentFolder-read",
          "entity-documentFolder-update",
          "entity-documentFolder-updatePublicPageUuid",
          "entity-dunningLevel-delete",
          "entity-dunningLevel-read",
          "entity-dunningLevel-update",
          "entity-dunningRun-delete",
          "entity-dunningRun-read",
          "entity-dunningRun-settings",
          "entity-dunningRun-update",
          "entity-ericTransferLog-read",
          "entity-ericTransferLog-update",
          "entity-externalConnection-delete",
          "entity-externalConnection-read",
          "entity-externalConnection-update",
          "entity-financialYear-delete",
          "entity-financialYear-read",
          "entity-financialYear-update",
          "entity-financialYear-updatePostingPeriod",
          "entity-formTextBlock-delete",
          "entity-formTextBlock-read",
          "entity-formTextBlock-update",
          "entity-formVariant-delete",
          "entity-formVariant-read",
          "entity-formVariant-update",
          "entity-fulfillmentProvider-delete",
          "entity-fulfillmentProvider-read",
          "entity-fulfillmentProvider-update",
          "entity-groupwareContact-delete",
          "entity-groupwareContact-read",
          "entity-groupwareContact-update",
          "entity-helpdeskCustomerOrganization-read",
          "entity-helpdeskCustomerOrganization-update",
          "entity-incomingGoods-createWithoutPurchaseOrder",
          "entity-incomingGoods-delete",
          "entity-incomingGoods-read",
          "entity-incomingGoods-settings",
          "entity-incomingGoods-update",
          "entity-internalTransportReference-createPermanentTransportReference",
          "entity-internalTransportReference-delete",
          "entity-internalTransportReference-read",
          "entity-internalTransportReference-update",
          "entity-inventory-createDocuments",
          "entity-inventory-import",
          "entity-inventory-read",
          "entity-inventory-update",
          "entity-labelVariant-delete",
          "entity-labelVariant-read",
          "entity-labelVariant-update",
          "entity-leadRating-delete",
          "entity-leadRating-read",
          "entity-leadRating-update",
          "entity-leadSource-delete",
          "entity-leadSource-read",
          "entity-leadSource-update",
          "entity-ledgerAccount-delete",
          "entity-ledgerAccount-read",
          "entity-ledgerAccount-update",
          "entity-legalForm-delete",
          "entity-legalForm-read",
          "entity-legalForm-update",
          "entity-loadingEquipmentIdentifier-delete",
          "entity-loadingEquipmentIdentifier-read",
          "entity-loadingEquipmentIdentifier-update",
          "entity-mailAccount-delete",
          "entity-mailAccount-read",
          "entity-mailAccount-update",
          "entity-mailMessage-delete",
          "entity-mailMessage-read",
          "entity-mailMessage-update",
          "entity-mailTemplate-delete",
          "entity-mailTemplate-read",
          "entity-mailTemplate-update",
          "entity-manufacturer-delete",
          "entity-manufacturer-read",
          "entity-manufacturer-update",
          "entity-moneyTransaction-delete",
          "entity-moneyTransaction-read",
          "entity-moneyTransaction-update",
          "entity-numberRange-delete",
          "entity-numberRange-read",
          "entity-numberRange-update",
          "entity-opportunity-delete",
          "entity-opportunity-import",
          "entity-opportunity-read",
          "entity-opportunity-update",
          "entity-opportunityTopic-delete",
          "entity-opportunityTopic-read",
          "entity-opportunityTopic-update",
          "entity-opportunityWinLossReason-delete",
          "entity-opportunityWinLossReason-read",
          "entity-opportunityWinLossReason-update",
          "entity-party-customerDeliveryBlock",
          "entity-party-customerDunningBlock",
          "entity-party-delete",
          "entity-party-export",
          "entity-party-featureCompetitor",
          "entity-party-featureSupplier",
          "entity-party-financialData",
          "entity-party-import",
          "entity-party-read",
          "entity-party-readAll",
          "entity-party-settings",
          "entity-party-settingsHideContacts",
          "entity-party-update",
          "entity-party-updateAccountingData",
          "entity-party-updateCustomerCreditLimit",
          "entity-party-updateCustomerInsured",
          "entity-party-updateCustomerNonStandardTax",
          "entity-party-updateCustomerOrSupplierNumber",
          "entity-party-updateDataProtectionLink",
          "entity-party-widgetCleverReach",
          "entity-partyOpenItemReference-delete",
          "entity-partyOpenItemReference-read",
          "entity-partyOpenItemReference-update",
          "entity-partyRating-delete",
          "entity-partyRating-read",
          "entity-partyRating-update",
          "entity-paymentApplication-read",
          "entity-paymentMethod-delete",
          "entity-paymentMethod-read",
          "entity-paymentMethod-update",
          "entity-paymentProviderCredential-delete",
          "entity-paymentProviderCredential-read",
          "entity-paymentProviderCredential-update",
          "entity-paymentRun-createPaymentAdvice",
          "entity-paymentRun-delete",
          "entity-paymentRun-read",
          "entity-paymentRun-settings",
          "entity-paymentRun-update",
          "entity-performanceRecord-delete",
          "entity-performanceRecord-read",
          "entity-performanceRecord-settings",
          "entity-performanceRecord-update",
          "entity-personDepartment-delete",
          "entity-personDepartment-read",
          "entity-personDepartment-update",
          "entity-personRole-delete",
          "entity-personRole-read",
          "entity-personRole-update",
          "entity-personalAccountingCode-delete",
          "entity-personalAccountingCode-read",
          "entity-personalAccountingCode-update",
          "entity-pick-read",
          "entity-pick-update",
          "entity-pickCheckReason-delete",
          "entity-pickCheckReason-read",
          "entity-pickCheckReason-update",
          "entity-placeOfService-delete",
          "entity-placeOfService-read",
          "entity-placeOfService-update",
          "entity-priceCalculationParameter-delete",
          "entity-priceCalculationParameter-read",
          "entity-priceCalculationParameter-update",
          "entity-productionOrder-createDocuments",
          "entity-productionOrder-delete",
          "entity-productionOrder-import",
          "entity-productionOrder-read",
          "entity-productionOrder-settings",
          "entity-productionOrder-update",
          "entity-productionWorkSchedule-delete",
          "entity-productionWorkSchedule-import",
          "entity-productionWorkSchedule-read",
          "entity-productionWorkSchedule-update",
          "entity-productionWorkScheduleAssignment-delete",
          "entity-productionWorkScheduleAssignment-import",
          "entity-productionWorkScheduleAssignment-read",
          "entity-productionWorkScheduleAssignment-update",
          "entity-project-delete",
          "entity-project-read",
          "entity-project-readAll",
          "entity-project-update",
          "entity-project-updatePublicPageUuid",
          "entity-purchaseInvoice-cancel",
          "entity-purchaseInvoice-delete",
          "entity-purchaseInvoice-deleteDocuments",
          "entity-purchaseInvoice-import",
          "entity-purchaseInvoice-read",
          "entity-purchaseInvoice-settings",
          "entity-purchaseInvoice-update",
          "entity-purchaseOpenItem-create",
          "entity-purchaseOpenItem-createDocuments",
          "entity-purchaseOpenItem-delete",
          "entity-purchaseOpenItem-export",
          "entity-purchaseOpenItem-read",
          "entity-purchaseOpenItem-update",
          "entity-purchaseOrder-createDocuments",
          "entity-purchaseOrder-delete",
          "entity-purchaseOrder-read",
          "entity-purchaseOrder-settings",
          "entity-purchaseOrder-update",
          "entity-purchaseOrder-updatePurchaseOrderTypeTriangular",
          "entity-purchaseOrderRequest-createDocuments",
          "entity-purchaseOrderRequest-delete",
          "entity-purchaseOrderRequest-read",
          "entity-purchaseOrderRequest-settings",
          "entity-purchaseOrderRequest-update",
          "entity-purchaseOrderRequest-updatePublicPageUuid",
          "entity-purchaseRequisition-delete",
          "entity-purchaseRequisition-read",
          "entity-purchaseRequisition-settings",
          "entity-purchaseRequisition-update",
          "entity-quotation-createDocuments",
          "entity-quotation-delete",
          "entity-quotation-import",
          "entity-quotation-read",
          "entity-quotation-settings",
          "entity-quotation-update",
          "entity-quotation-updatePublicPageUuid",
          "entity-reasonOfAbsence-delete",
          "entity-reasonOfAbsence-read",
          "entity-reasonOfAbsence-update",
          "entity-recurringInvoice-delete",
          "entity-recurringInvoice-deleteDocuments",
          "entity-recurringInvoice-read",
          "entity-recurringInvoice-settings",
          "entity-recurringInvoice-update",
          "entity-region-delete",
          "entity-region-read",
          "entity-region-update",
          "entity-remotePrintConfiguration-delete",
          "entity-remotePrintConfiguration-read",
          "entity-remotePrintConfiguration-update",
          "entity-remotePrintJob-delete",
          "entity-remotePrintJob-read",
          "entity-remotePrintJob-readAll",
          "entity-remotePrintJob-update",
          "entity-salesInvoice-cancel",
          "entity-salesInvoice-createDocuments",
          "entity-salesInvoice-delete",
          "entity-salesInvoice-deleteDocuments",
          "entity-salesInvoice-export",
          "entity-salesInvoice-import",
          "entity-salesInvoice-read",
          "entity-salesInvoice-recreateDocuments",
          "entity-salesInvoice-settings",
          "entity-salesInvoice-update",
          "entity-salesOpenItem-create",
          "entity-salesOpenItem-createDocuments",
          "entity-salesOpenItem-delete",
          "entity-salesOpenItem-export",
          "entity-salesOpenItem-read",
          "entity-salesOpenItem-update",
          "entity-salesOrder-createOrderConfirmation",
          "entity-salesOrder-delete",
          "entity-salesOrder-import",
          "entity-salesOrder-manageAllProjectOrderTasks",
          "entity-salesOrder-read",
          "entity-salesOrder-readShippedQuantity",
          "entity-salesOrder-settings",
          "entity-salesOrder-update",
          "entity-salesOrder-updatePaymentTypeAdvancePayment",
          "entity-salesOrder-updatePaymentTypeCounterSales",
          "entity-salesOrder-updatePaymentTypePartPayment",
          "entity-salesOrder-updatePaymentTypePrepayment",
          "entity-salesOrder-updatePaymentTypeStandard",
          "entity-salesStage-delete",
          "entity-salesStage-read",
          "entity-salesStage-update",
          "entity-salesTeam-delete",
          "entity-salesTeam-read",
          "entity-salesTeam-update",
          "entity-sector-delete",
          "entity-sector-read",
          "entity-sector-update",
          "entity-sepaDirectDebitMandate-delete",
          "entity-sepaDirectDebitMandate-export",
          "entity-sepaDirectDebitMandate-import",
          "entity-sepaDirectDebitMandate-read",
          "entity-sepaDirectDebitMandate-settings",
          "entity-sepaDirectDebitMandate-update",
          "entity-shipment-createLabel",
          "entity-shipment-createWithoutSalesOrder",
          "entity-shipment-delete",
          "entity-shipment-export",
          "entity-shipment-read",
          "entity-shipment-settings",
          "entity-shipment-update",
          "entity-shipmentMethod-delete",
          "entity-shipmentMethod-read",
          "entity-shipmentMethod-update",
          "entity-shippingCarrier-delete",
          "entity-shippingCarrier-read",
          "entity-shippingCarrier-update",
          "entity-shoutboxTemplate-delete",
          "entity-shoutboxTemplate-read",
          "entity-shoutboxTemplate-update",
          "entity-stagedMoneyTransaction-delete",
          "entity-stagedMoneyTransaction-read",
          "entity-stagedMoneyTransaction-update",
          "entity-storagePlaceBlockingReason-delete",
          "entity-storagePlaceBlockingReason-read",
          "entity-storagePlaceBlockingReason-update",
          "entity-storagePlaceSize-delete",
          "entity-storagePlaceSize-read",
          "entity-storagePlaceSize-update",
          "entity-tag-create",
          "entity-tag-delete",
          "entity-tag-read",
          "entity-tag-update",
          "entity-task-delete",
          "entity-task-deletePrivateAsWatcher",
          "entity-task-read",
          "entity-task-update",
          "entity-task-updatePrivateAsWatcher",
          "entity-taskTemplate-delete",
          "entity-taskTemplate-read",
          "entity-taskTemplate-update",
          "entity-taskTopic-delete",
          "entity-taskTopic-read",
          "entity-taskTopic-update",
          "entity-taskType-delete",
          "entity-taskType-read",
          "entity-taskType-update",
          "entity-tax-delete",
          "entity-tax-read",
          "entity-tax-update",
          "entity-taxDeterminationRule-delete",
          "entity-taxDeterminationRule-read",
          "entity-taxDeterminationRule-update",
          "entity-termOfPayment-delete",
          "entity-termOfPayment-read",
          "entity-termOfPayment-update",
          "entity-ticket-delete",
          "entity-ticket-read",
          "entity-ticket-readAll",
          "entity-ticket-settings",
          "entity-ticket-update",
          "entity-ticket-updateAdvanced",
          "entity-ticket-updateDeleteTicketRating",
          "entity-ticket-updatePrint",
          "entity-ticket-updatePublicPageUuid",
          "entity-ticketAssignmentRule-delete",
          "entity-ticketAssignmentRule-read",
          "entity-ticketAssignmentRule-update",
          "entity-ticketCategory-import",
          "entity-ticketCategory-read",
          "entity-ticketCategory-update",
          "entity-ticketChannel-delete",
          "entity-ticketChannel-read",
          "entity-ticketChannel-update",
          "entity-ticketFaq-delete",
          "entity-ticketFaq-read",
          "entity-ticketFaq-update",
          "entity-ticketMailTemplate-delete",
          "entity-ticketMailTemplate-read",
          "entity-ticketMailTemplate-update",
          "entity-ticketPoolingGroup-delete",
          "entity-ticketPoolingGroup-read",
          "entity-ticketPoolingGroup-update",
          "entity-ticketPriority-delete",
          "entity-ticketPriority-read",
          "entity-ticketPriority-update",
          "entity-ticketServiceLevelAgreement-delete",
          "entity-ticketServiceLevelAgreement-read",
          "entity-ticketServiceLevelAgreement-update",
          "entity-ticketStatus-delete",
          "entity-ticketStatus-read",
          "entity-ticketStatus-update",
          "entity-ticketType-delete",
          "entity-ticketType-read",
          "entity-ticketType-update",
          "entity-timeRecord-create",
          "entity-timeRecord-delete",
          "entity-timeRecord-move",
          "entity-timeRecord-read",
          "entity-timeRecord-readAllProject",
          "entity-timeRecord-resourceCalendar",
          "entity-timeRecord-settings",
          "entity-timeRecord-update",
          "entity-timeRecord-updateHourlyRateProject",
          "entity-timeRecord-updateHourlyRateTicket",
          "entity-timeRecord-updateUser",
          "entity-translation-delete",
          "entity-translation-export",
          "entity-translation-import",
          "entity-translation-read",
          "entity-translation-update",
          "entity-transportationOrder-createPickingOrder",
          "entity-transportationOrder-delete",
          "entity-transportationOrder-read",
          "entity-transportationOrder-update",
          "entity-unit-delete",
          "entity-unit-read",
          "entity-unit-update",
          "entity-user-delete",
          "entity-user-export",
          "entity-user-import",
          "entity-user-update",
          "entity-userRole-delete",
          "entity-userRole-read",
          "entity-userRole-update",
          "entity-userRole-updatePermissions",
          "entity-variantArticle-delete",
          "entity-variantArticle-read",
          "entity-variantArticle-update",
          "entity-vibrantReport-delete",
          "entity-vibrantReport-read",
          "entity-vibrantReport-update",
          "entity-warehouse-delete",
          "entity-warehouse-read",
          "entity-warehouse-update",
          "entity-warehouseStock-read",
          "entity-warehouseStockMovement-read",
          "entity-warehouseStockMovement-update",
          "entity-web2LeadConfig-delete",
          "entity-web2LeadConfig-read",
          "entity-web2LeadConfig-update",
          "entity-web2TicketConfig-delete",
          "entity-web2TicketConfig-read",
          "entity-web2TicketConfig-update",
          "entity-webhook-delete",
          "entity-webhook-read",
          "entity-webhook-update",
          "entity-weclappOs-delete",
          "entity-weclappOs-read",
          "entity-weclappOs-update",
          "feature-accountingExport-execute",
          "feature-activityLog-read",
          "feature-amazon-betaDelivery",
          "feature-commission-read",
          "feature-commission-update",
          "feature-contractReports-read",
          "feature-customReport-execute",
          "feature-customReport-update",
          "feature-dataTransfer-exportFullZip",
          "feature-ecommerce-amazonExport",
          "feature-ecommerce-amazonImport",
          "feature-ecommerce-eBayListings",
          "feature-ecommerce-ecommerceCenter",
          "feature-helpdeskReports-read",
          "feature-masterDataReports-read",
          "feature-reductionAddition-update",
          "feature-reports-read",
          "feature-revenueReports-read",
          "feature-salesCost-read",
          "feature-salesCost-update",
          "feature-tableExport-execute",
          "feature-transactionDataReports-read",
          "feature-warehouseReports-read",
          "feature-weclapp-admin",
          "feature-weclapp-massActions",
          "feature-weclappAnalytics-update",
          "feature-weclappToWeclapp-betaUser",
          "feature-xtCommerce-betaUser",
          "settings-accounting-initialize",
          "settings-accounting-reset",
          "settings-accounting-update",
          "settings-fieldsetConfiguration-update",
          "settings-form-update",
          "settings-mail2Ticket-update",
          "settings-menuItemConfiguration-update",
          "settings-organizer-update",
          "settings-salesChannel-update",
          "settings-view-update",
          "settings-warehouse-update",
          "settings-warehouse-updateLocationTypeSettings"
        ],
        "type": "string"
      },
      "pick": {
        "allOf": [
          {
            "$ref": "#/components/schemas/basePickingBookRecord"
          },
          {
            "properties": {
              "transportationOrderId": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "priceCalculationParameter": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "fixSurcharge": {
                "format": "decimal",
                "type": "string"
              },
              "fromScale": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "lowerPurchasePriceBound": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "margin": {
                "format": "decimal",
                "type": "string"
              },
              "percentSurcharge": {
                "format": "decimal",
                "type": "string"
              },
              "profit": {
                "format": "decimal",
                "type": "string"
              },
              "salesChannel": {
                "$ref": "#/components/schemas/distributionChannel",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "priceConditionType": {
        "enum": [
          "ADDITIONAL_ABS",
          "ADDITION_PERCENT",
          "REDUCTION_ABS",
          "REDUCTION_PERCENT"
        ],
        "type": "string"
      },
      "priceData": {
        "properties": {
          "articleUnitPrice": {
            "format": "decimal",
            "type": "string"
          },
          "currencyId": {
            "type": "string",
            "x-weclapp": {
              "entity": "currency",
              "service": "currency"
            }
          },
          "endDate": {
            "format": "timestamp",
            "type": "integer"
          },
          "quantity": {
            "format": "decimal",
            "type": "string"
          },
          "reductionAdditionItems": {
            "items": {
              "$ref": "#/components/schemas/priceDataReductionAdditionItem"
            },
            "type": "array"
          },
          "startDate": {
            "format": "timestamp",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "priceDataReductionAdditionItem": {
        "properties": {
          "position": {
            "format": "int32",
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/recordItemReductionAdditionSource"
          },
          "specialPriceReduction": {
            "type": "boolean"
          },
          "title": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/recordItemReductionAdditionType"
          },
          "value": {
            "format": "decimal",
            "type": "string"
          }
        },
        "type": "object"
      },
      "priceScaleType": {
        "enum": [
          "SCALE_FROM",
          "SCALE_TO"
        ],
        "type": "string"
      },
      "productionCostCenterType": {
        "enum": [
          "DIRECT_COST_CENTER",
          "INDIRECT_COST_CENTER",
          "SERVICE_COST_CENTER"
        ],
        "type": "string"
      },
      "productionOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "actualEndDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "actualQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "actualStartDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "assemblyStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "availability": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType"
              },
              "availabilityForAllWarehouses": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType"
              },
              "pickingInstructions": {
                "maxLength": 255,
                "type": "string"
              },
              "picksComplete": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "productionOrderItems": {
                "items": {
                  "$ref": "#/components/schemas/productionOrderItem"
                },
                "type": "array"
              },
              "productionOrderNumber": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "status": {
                "$ref": "#/components/schemas/productionOrderStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/productionOrderStatusHistory"
                },
                "type": "array"
              },
              "targetEndDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "targetQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "targetStartDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "required": true,
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              },
              "workItems": {
                "items": {
                  "$ref": "#/components/schemas/productionOrderWorkItem"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "productionOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseMinimalRecordItem"
          },
          {
            "properties": {
              "actualPickDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "actualQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "availability": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType",
                "x-weclapp": {
                  "required": true
                }
              },
              "availabilityForAllWarehouses": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType",
                "x-weclapp": {
                  "required": true
                }
              },
              "customAttributes": {
                "items": {
                  "$ref": "#/components/schemas/customAttribute"
                },
                "type": "array"
              },
              "targetPickDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "targetQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "productionOrderItemStatus": {
        "enum": [
          "BOOKED",
          "CLOSED",
          "OPEN"
        ],
        "type": "string"
      },
      "productionOrderStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/productionOrderStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "productionOrderStatusType": {
        "enum": [
          "CANCELLED",
          "CLOSED",
          "DOCUMENTS_PRINTED",
          "ENTRY_IN_PROGRESS",
          "INTERRUPTED",
          "NEW",
          "STARTED"
        ],
        "type": "string"
      },
      "productionOrderWorkItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "book": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "manualItem": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              },
              "shortDescription": {
                "maxLength": 255,
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/productionOrderItemStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "targetEndDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "targetOrderTime": {
                "format": "int64",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "targetStartDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "timeType": {
                "$ref": "#/components/schemas/productionWorkScheduleItemTimeType",
                "x-weclapp": {
                  "required": true
                }
              },
              "unitTime": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "productionWorkSchedule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/productionWorkScheduleStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "workScheduleItems": {
                "items": {
                  "$ref": "#/components/schemas/productionWorkScheduleItem"
                },
                "type": "array"
              },
              "workScheduleNumber": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "productionWorkScheduleAssignment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "alternative": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "productionWorkScheduleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "productionWorkSchedule",
                  "required": true,
                  "service": "productionWorkSchedule"
                }
              },
              "validFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "validTo": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "productionWorkScheduleItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "costCenterId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "costCenter",
                  "service": "costCenter"
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "multipleHumanOperation": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "multipleMachineOperation": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              },
              "productionWorkScheduleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "productionWorkSchedule",
                  "required": true,
                  "service": "productionWorkSchedule"
                }
              },
              "quantityBase": {
                "format": "int32",
                "type": "integer"
              },
              "setupTime": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "shortDescription": {
                "maxLength": 255,
                "type": "string"
              },
              "timeType": {
                "$ref": "#/components/schemas/productionWorkScheduleItemTimeType",
                "x-weclapp": {
                  "required": true
                }
              },
              "timeUnit": {
                "$ref": "#/components/schemas/timeUnit",
                "x-weclapp": {
                  "required": true
                }
              },
              "unitTime": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "validFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "validTo": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "productionWorkScheduleItemTimeType": {
        "enum": [
          "SINGLE_TIME",
          "TIME_PER_UNIT"
        ],
        "type": "string"
      },
      "productionWorkScheduleStatus": {
        "enum": [
          "APPROVED",
          "ENTRY_IN_PROGRESS",
          "INVALID"
        ],
        "type": "string"
      },
      "projectMembers": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "hourlyCost": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "teamRole": {
                "$ref": "#/components/schemas/teamRole",
                "x-weclapp": {
                  "required": true
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "propertyTranslation": {
        "properties": {
          "propertyName": {
            "type": "string"
          },
          "values": {
            "items": {
              "$ref": "#/components/schemas/propertyTranslationValue"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "propertyTranslationValue": {
        "properties": {
          "locale": {
            "type": "string"
          },
          "text": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "purchaseInvoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/basePurchaseRecord"
          },
          {
            "properties": {
              "bookingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "bookingText": {
                "maxLength": 768,
                "type": "string"
              },
              "costCenterId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "costCenter",
                  "service": "costCenter"
                }
              },
              "costCenterNumber": {
                "type": "string"
              },
              "creditResetsOrderState": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "dueDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "grossPrices": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "importSalesTaxAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "importSalesTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "internalInvoiceNumber": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "invoiceDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoiceNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "paymentStatus": {
                "$ref": "#/components/schemas/paymentStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "precedingPurchaseInvoiceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "purchaseInvoice",
                  "service": "purchaseInvoice"
                }
              },
              "pricingDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "purchaseInvoiceItems": {
                "items": {
                  "$ref": "#/components/schemas/purchaseInvoiceItem"
                },
                "type": "array"
              },
              "purchaseInvoiceType": {
                "$ref": "#/components/schemas/purchaseInvoiceType",
                "x-weclapp": {
                  "required": true
                }
              },
              "purchaseOrders": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "purchaseOrder",
                  "service": "purchaseOrder"
                }
              },
              "recordAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "senderCountryCode": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/purchaseInvoiceStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/purchaseInvoiceStatusHistory"
                },
                "type": "array"
              },
              "supplierHabitualExporterLetterOfIntentId": {
                "type": "string"
              },
              "vatRegistrationNumber": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseInvoiceItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItemWithMoney"
          },
          {
            "properties": {
              "accountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountNumber": {
                "type": "string"
              },
              "costCenterItems": {
                "items": {
                  "$ref": "#/components/schemas/costCenterWithDistributionPercentage"
                },
                "type": "array"
              },
              "creditedInvoiceItemId": {
                "type": "string"
              },
              "customAttributes": {
                "items": {
                  "$ref": "#/components/schemas/customAttribute"
                },
                "type": "array"
              },
              "purchaseInvoiceItemRelationship": {
                "items": {
                  "$ref": "#/components/schemas/purchaseInvoiceItemRelationship"
                },
                "type": "array"
              },
              "servicePeriodFromDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "servicePeriodToDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "supplierArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseInvoiceItemRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "shipmentItemId": {
                "type": "string"
              },
              "supplierOrderItemId": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseInvoiceStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/purchaseInvoiceStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "purchaseInvoiceStatusType": {
        "enum": [
          "CANCELLED",
          "DOCUMENT_CREATED",
          "ENTRY_COMPLETED",
          "INVOICE_CHECKED",
          "INVOICE_VERIFICATION",
          "NEW",
          "OCR_VERIFICATION",
          "OPEN_ITEM_CREATED"
        ],
        "type": "string"
      },
      "purchaseInvoiceType": {
        "enum": [
          "ADVANCE_PAYMENT_INVOICE",
          "CREDIT_ADVICE",
          "CREDIT_NOTE",
          "FINAL_INVOICE",
          "PART_PAYMENT_INVOICE",
          "PREPAYMENT_INVOICE",
          "STANDARD_INVOICE"
        ],
        "type": "string"
      },
      "purchaseOpenItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/openItem"
          },
          {
            "properties": {
              "purchaseInvoiceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "purchaseInvoice",
                  "service": "purchaseInvoice"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/basePurchaseRecord"
          },
          {
            "properties": {
              "advancePaymentStatus": {
                "$ref": "#/components/schemas/advancePaymentStatus"
              },
              "commission": {
                "maxLength": 255,
                "type": "string"
              },
              "confirmationNumber": {
                "maxLength": 30,
                "type": "string"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "externalPurchaseOrderNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "orderDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "packageTrackingNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "packageTrackingUrl": {
                "maxLength": 255,
                "type": "string"
              },
              "plannedDeliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "plannedShippingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "purchaseOrderItems": {
                "items": {
                  "$ref": "#/components/schemas/purchaseOrderItem"
                },
                "type": "array"
              },
              "purchaseOrderNumber": {
                "maxLength": 30,
                "type": "string"
              },
              "purchaseOrderRequestId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "purchaseOrderRequest",
                  "service": "purchaseOrderRequest"
                }
              },
              "purchaseOrderType": {
                "$ref": "#/components/schemas/supplierOrderType"
              },
              "received": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "recordAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "salesOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesOrder",
                  "service": "salesOrder"
                }
              },
              "salesOrderNumber": {
                "type": "string"
              },
              "shipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "shipmentMethodName": {
                "type": "string"
              },
              "shippingCarrierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shippingCarrier",
                  "service": "shippingCarrier"
                }
              },
              "status": {
                "$ref": "#/components/schemas/supplierOrderStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/purchaseOrderStatusHistory"
                },
                "type": "array"
              },
              "supplierHabitualExporterLetterOfIntentId": {
                "type": "string"
              },
              "supplierQuotationNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItemWithPrintSettings"
          },
          {
            "properties": {
              "batchSerialNumbers": {
                "items": {
                  "$ref": "#/components/schemas/batchSerialNumber"
                },
                "type": "array"
              },
              "blanketPurchaseOrderId": {
                "type": "string"
              },
              "blanketPurchaseOrderReleaseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "blanketPurchaseOrder",
                  "service": "blanketPurchaseOrder"
                }
              },
              "invoicedQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "plannedDeliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "plannedShippingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "receivedQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesOrderItemId": {
                "format": "int32",
                "type": "integer"
              },
              "supplierArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseOrderRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecord"
          },
          {
            "properties": {
              "confirmationDeadline": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "invoiceAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "plannedDeliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "purchaseOrderRequestItems": {
                "items": {
                  "$ref": "#/components/schemas/purchaseOrderRequestItem"
                },
                "type": "array"
              },
              "purchaseOrderRequestNumber": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "purchaseOrderRequestOffers": {
                "items": {
                  "$ref": "#/components/schemas/purchaseOrderRequestOffer"
                },
                "type": "array"
              },
              "purchaseOrderRequestType": {
                "$ref": "#/components/schemas/purchaseOrderRequestType",
                "x-weclapp": {
                  "required": true
                }
              },
              "quotationId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "quotation",
                  "service": "quotation"
                }
              },
              "quotationNumber": {
                "type": "string"
              },
              "recordAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "responsibleUserUsername": {
                "type": "string"
              },
              "salesOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesOrder",
                  "service": "salesOrder"
                }
              },
              "salesOrderNumber": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/purchaseOrderRequestStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/purchaseOrderRequestStatusHistory"
                },
                "type": "array"
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "required": true,
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseOrderRequestItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItem"
          },
          {
            "properties": {
              "deleted": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "freeTextItem": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "priceScaleType": {
                "$ref": "#/components/schemas/priceScaleType"
              },
              "priceScaleValues": {
                "items": {
                  "format": "decimal",
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseOrderRequestOffer": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordWithMoney"
          },
          {
            "properties": {
              "endDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "offerDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "plannedDeliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "purchaseOrderRequestOfferItems": {
                "items": {
                  "$ref": "#/components/schemas/purchaseOrderRequestOfferItem"
                },
                "type": "array"
              },
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "replyDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "requestDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "status": {
                "$ref": "#/components/schemas/purchaseOrderRequestSupplierStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "supplierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "required": true,
                  "service": "party"
                }
              },
              "supplierNumber": {
                "type": "string"
              },
              "supplierReference": {
                "maxLength": 255,
                "type": "string"
              },
              "validFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "validTo": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseOrderRequestOfferItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItemWithMoney"
          },
          {
            "properties": {
              "accepted": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "containerQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "minQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "orderedQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "procurementLeadDays": {
                "format": "int32",
                "type": "integer"
              },
              "purchaseOrderRequestItemId": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "scaleType": {
                "$ref": "#/components/schemas/priceScaleType"
              },
              "scaleValues": {
                "items": {
                  "$ref": "#/components/schemas/purchaseOrderRequestOfferItemScaleValue"
                },
                "type": "array"
              },
              "supplierArticleNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "useSupplierArticleNumber": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "purchaseOrderRequestOfferItemScaleValue": {
        "properties": {
          "price": {
            "format": "decimal",
            "type": "string"
          },
          "scale": {
            "format": "decimal",
            "type": "string"
          }
        },
        "type": "object"
      },
      "purchaseOrderRequestPurchasePriceUpdateMode": {
        "enum": [
          "NO_UPDATE",
          "UPDATE_GENERAL_PURCHASE_PRICE",
          "UPDATE_PURCHASE_PRICE_ONLY_FOR_CUSTOMER"
        ],
        "type": "string"
      },
      "purchaseOrderRequestStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/purchaseOrderRequestStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "purchaseOrderRequestStatusType": {
        "enum": [
          "CANCELLED",
          "CLOSED",
          "DOCUMENT_PRINTED",
          "NEW",
          "OFFER_RECEIVED"
        ],
        "type": "string"
      },
      "purchaseOrderRequestSupplierStatusType": {
        "enum": [
          "ACCEPTED",
          "DECLINED",
          "OFFER_RECEIVED",
          "OPEN",
          "REQUESTED",
          "REVISED",
          "REVISED_REQUEST"
        ],
        "type": "string"
      },
      "purchaseOrderRequestType": {
        "enum": [
          "BLANKET_ORDER_REQUEST",
          "DROP_SHIPPING_REQUEST",
          "PURCHASE_ORDER_REQUEST",
          "SALES_ORDER_COMMISSION_REQUEST"
        ],
        "type": "string"
      },
      "purchaseOrderStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/supplierOrderStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "purchaseShippingCostItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseShippingCostItem"
          },
          {
            "type": "object"
          }
        ]
      },
      "quantityConversion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "conversionQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "createdUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "lastEditedUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "oppositeDirection": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "unitId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "unit",
                  "required": true,
                  "service": "unit"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "quotation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecordWithAddresses"
          },
          {
            "properties": {
              "activeVersion": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoiceRecipientId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "opportunityId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "opportunity",
                  "service": "opportunity"
                }
              },
              "opportunityNumber": {
                "type": "string"
              },
              "publicLink": {
                "type": "string"
              },
              "quotationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "quotationItems": {
                "items": {
                  "$ref": "#/components/schemas/quotationItem"
                },
                "type": "array"
              },
              "quotationNumber": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "quotationType": {
                "$ref": "#/components/schemas/offerOutType",
                "x-weclapp": {
                  "required": true
                }
              },
              "quotationVersion": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "rejectionReason": {
                "maxLength": 255,
                "type": "string"
              },
              "requestDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "salesOrderEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "salesProbability": {
                "format": "int32",
                "type": "integer"
              },
              "salesStageHistory": {
                "items": {
                  "$ref": "#/components/schemas/salesStageHistory"
                },
                "type": "array"
              },
              "salesStageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesStage",
                  "service": "salesStage"
                }
              },
              "salesStageName": {
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/offerStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/quotationStatusHistory"
                },
                "type": "array"
              },
              "template": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "validFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "validTo": {
                "format": "timestamp",
                "type": "integer"
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "quotationItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecordItemWithService"
          },
          {
            "properties": {
              "alternative": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "optional": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "quotationStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/offerStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "rating": {
        "enum": [
          "STARS_1",
          "STARS_2",
          "STARS_3",
          "STARS_4",
          "STARS_5"
        ],
        "type": "string"
      },
      "recordAddress": {
        "properties": {
          "city": {
            "maxLength": 1000,
            "type": "string"
          },
          "company": {
            "maxLength": 1000,
            "type": "string"
          },
          "company2": {
            "maxLength": 1000,
            "type": "string"
          },
          "countryCode": {
            "type": "string"
          },
          "firstName": {
            "maxLength": 1000,
            "type": "string"
          },
          "globalLocationNumber": {
            "maxLength": 1000,
            "type": "string"
          },
          "lastName": {
            "maxLength": 1000,
            "type": "string"
          },
          "middleName": {
            "maxLength": 1000,
            "type": "string"
          },
          "phoneNumber": {
            "maxLength": 1000,
            "type": "string"
          },
          "postOfficeBoxCity": {
            "maxLength": 1000,
            "type": "string"
          },
          "postOfficeBoxNumber": {
            "maxLength": 1000,
            "type": "string"
          },
          "postOfficeBoxZipCode": {
            "maxLength": 1000,
            "type": "string"
          },
          "salutation": {
            "$ref": "#/components/schemas/salutation"
          },
          "state": {
            "maxLength": 1000,
            "type": "string"
          },
          "street1": {
            "maxLength": 1000,
            "type": "string"
          },
          "street2": {
            "maxLength": 1000,
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "titleId": {
            "type": "string",
            "x-weclapp": {
              "entity": "customValue",
              "service": "title"
            }
          },
          "zipcode": {
            "maxLength": 1000,
            "type": "string"
          }
        },
        "type": "object"
      },
      "recordEmailingRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "attachRecordDocument": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "ccRecipients": {
                "maxLength": 1000,
                "type": "string"
              },
              "event": {
                "$ref": "#/components/schemas/recordEmailingRuleEventType",
                "x-weclapp": {
                  "required": true
                }
              },
              "mailAccountId": {
                "type": "string"
              },
              "name": {
                "maxLength": 1000,
                "type": "string"
              },
              "otherRecipients": {
                "maxLength": 1000,
                "type": "string"
              },
              "recipientType": {
                "$ref": "#/components/schemas/recordEmailingRuleRecipientType",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesChannels": {
                "items": {
                  "$ref": "#/components/schemas/distributionChannel"
                },
                "type": "array"
              },
              "salesInvoiceOrigin": {
                "$ref": "#/components/schemas/salesInvoiceOrigin"
              },
              "salesInvoiceTypes": {
                "items": {
                  "$ref": "#/components/schemas/salesInvoiceType"
                },
                "type": "array"
              },
              "templateId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "mailTemplate",
                  "required": true,
                  "service": "mailTemplate"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "recordEmailingRuleEventType": {
        "enum": [
          "CREDIT_ADVICE_CANCELLATION_DOCUMENT_CREATED",
          "CREDIT_ADVICE_CANCELLED",
          "CREDIT_ADVICE_CREATED",
          "CREDIT_ADVICE_DOCUMENT_CREATED",
          "CREDIT_ADVICE_ENTRY_COMPLETED",
          "CREDIT_ADVICE_OPEN_ITEM_CREATED",
          "CREDIT_ADVICE_OPEN_ITEM_PAID",
          "PERFORMANCE_RECORD_CANCELLED",
          "PERFORMANCE_RECORD_DOCUMENT_CREATED",
          "PERFORMANCE_RECORD_RECORDED",
          "PURCHASE_ORDER_CANCELLED",
          "PURCHASE_ORDER_CLOSED",
          "PURCHASE_ORDER_CONFIRMED",
          "PURCHASE_ORDER_DOCUMENTS_PRINTED",
          "PURCHASE_ORDER_REQUEST_DECLINED",
          "PURCHASE_ORDER_REQUEST_REQUESTED",
          "QUOTATION_ACCEPTED",
          "QUOTATION_DOCUMENT_CREATED",
          "QUOTATION_INQUIRED",
          "QUOTATION_REJECTED",
          "RETURN_CREDIT_NOTE_CREATED",
          "RETURN_CUSTOMER_COMPENSATION_CREATED",
          "RETURN_MOVED_INTO_STORE",
          "SALES_INVOICE_CANCELLATION_DOCUMENT_CREATED",
          "SALES_INVOICE_CANCELLED",
          "SALES_INVOICE_CREATED",
          "SALES_INVOICE_DOCUMENT_CREATED",
          "SALES_INVOICE_ENTRY_COMPLETED",
          "SALES_INVOICE_OPEN_ITEM_CREATED",
          "SALES_INVOICE_OPEN_ITEM_PAID",
          "SALES_ORDER_CANCELLED",
          "SALES_ORDER_CLOSED",
          "SALES_ORDER_CONFIRMATION_PRINTED",
          "SALES_ORDER_INVOICED",
          "SALES_ORDER_MANUALLY_CLOSED",
          "SALES_ORDER_PARTIALLY_SHIPPED",
          "SALES_ORDER_SHIPMENT_RECORD_CREATED",
          "SALES_ORDER_SHIPMENT_RECORD_PARTIALLY_CREATED",
          "SALES_ORDER_SHIPPED",
          "SHIPMENT_CANCELLED",
          "SHIPMENT_CONFIRMATION_OF_ARRIVAL_CREATED",
          "SHIPMENT_DELIVERY_NOTE_PRINTED",
          "SHIPMENT_DROPSHIPPING_DELIVERY_NOTE_PRINTED",
          "SHIPMENT_DROPSHIPPING_SHIPPED",
          "SHIPMENT_SHIPPED",
          "SUPPLIER_RETURN_DELIVERY_NOTE_PRINTED",
          "SUPPLIER_RETURN_SHIPPED"
        ],
        "type": "string"
      },
      "recordEmailingRuleRecipientType": {
        "enum": [
          "OTHER_RECIPIENT",
          "RECORD_RECIPIENT"
        ],
        "type": "string"
      },
      "recordItemReductionAdditionSource": {
        "enum": [
          "ARTICLE",
          "ARTICLE_AND_CUSTOMER",
          "ARTICLE_CATEGORY",
          "ARTICLE_CATEGORY_AND_CUSTOMER",
          "MANUAL"
        ],
        "type": "string"
      },
      "recordItemReductionAdditionType": {
        "enum": [
          "ADDITION_ABSOLUTE",
          "ADDITION_PERCENT",
          "REDUCTION_ABSOLUTE",
          "REDUCTION_PERCENT"
        ],
        "type": "string"
      },
      "recurringEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "endsOn": {
                "format": "timestamp",
                "type": "integer"
              },
              "eventInterval": {
                "format": "int32",
                "type": "integer"
              },
              "eventOccurrenceCount": {
                "format": "int32",
                "type": "integer"
              },
              "eventType": {
                "$ref": "#/components/schemas/recurringEventType"
              },
              "repeatOn": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "recurringEventType": {
        "enum": [
          "DAILY",
          "MONTHLY",
          "WEEKLY",
          "YEARLY"
        ],
        "type": "string"
      },
      "reductionAddition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "name": {
                "maxLength": 1000,
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/priceConditionType",
                "x-weclapp": {
                  "required": true
                }
              },
              "value": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "reductionAdditionItem": {
        "properties": {
          "position": {
            "format": "int32",
            "type": "integer"
          },
          "source": {
            "$ref": "#/components/schemas/recordItemReductionAdditionSource"
          },
          "type": {
            "$ref": "#/components/schemas/recordItemReductionAdditionType"
          },
          "value": {
            "format": "decimal",
            "type": "string"
          }
        },
        "type": "object"
      },
      "releases": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "orderDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "plannedDeliveryDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              },
              "purchaseOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "purchaseOrder",
                  "service": "purchaseOrder"
                }
              },
              "releasedQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "reminderSendType": {
        "enum": [
          "MAIL",
          "NOTIFICATION"
        ],
        "type": "string"
      },
      "remotePrintJob": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "documentId": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "printStatus": {
                "$ref": "#/components/schemas/remotePrintJobStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "printerName": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "quantity": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "weclappOsHardwareId": {
                "type": "string"
              },
              "weclappOsId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "weclappOs",
                  "required": true,
                  "service": "weclappOs"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "remotePrintJobStatus": {
        "enum": [
          "DOCUMENT_NOT_FOUND",
          "ERROR",
          "NEW",
          "PRINTED",
          "SUBMITTED",
          "UNKNOWN_PRINTER"
        ],
        "type": "string"
      },
      "salesBillOfMaterialArticleItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractBillOfMaterial"
          },
          {
            "type": "object"
          }
        ]
      },
      "salesChannel": {
        "properties": {
          "key": {
            "$ref": "#/components/schemas/distributionChannel"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "salesInvoice": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecord"
          },
          {
            "properties": {
              "bookingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "cancellationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "cancellationNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "collectiveInvoicePositionPrintType": {
                "$ref": "#/components/schemas/collectiveInvoicePositionPrintType"
              },
              "customerHabitualExporterLetterOfIntentId": {
                "type": "string"
              },
              "deliveryAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "deliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "dueDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "invoiceDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "invoiceNumber": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "orderNumberAtCustomer": {
                "maxLength": 255,
                "type": "string"
              },
              "paid": {
                "type": "boolean"
              },
              "paymentStatus": {
                "$ref": "#/components/schemas/paymentStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "precedingSalesInvoiceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesInvoice",
                  "service": "salesInvoice"
                }
              },
              "recordAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "salesInvoiceItems": {
                "items": {
                  "$ref": "#/components/schemas/salesInvoiceItem"
                },
                "type": "array"
              },
              "salesInvoiceType": {
                "$ref": "#/components/schemas/salesInvoiceType",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesOrder",
                  "service": "salesOrder"
                }
              },
              "salesOrderNumber": {
                "type": "string"
              },
              "salesOrders": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "salesOrder",
                  "service": "salesOrder"
                }
              },
              "shippingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "status": {
                "$ref": "#/components/schemas/salesInvoiceStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/salesInvoiceStatusHistory"
                },
                "type": "array"
              },
              "vatRegistrationNumber": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "salesInvoiceItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecordItemWithCost"
          },
          {
            "properties": {
              "accountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountNumber": {
                "type": "string"
              },
              "costCenterItems": {
                "items": {
                  "$ref": "#/components/schemas/costCenterWithDistributionPercentage"
                },
                "type": "array"
              },
              "creditedInvoiceItemId": {
                "type": "string"
              },
              "salesInvoiceItemRelationship": {
                "items": {
                  "$ref": "#/components/schemas/salesInvoiceItemRelationship"
                },
                "type": "array"
              },
              "serialNumbers": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "salesInvoiceItemRelationship": {
        "properties": {
          "performanceRecordItemId": {
            "type": "string"
          },
          "quantity": {
            "format": "decimal",
            "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          },
          "salesInvoiceItemId": {
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          },
          "salesOrderItemId": {
            "type": "string"
          },
          "shipmentItemId": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "salesInvoiceOrigin": {
        "enum": [
          "ADVANCE_PAYMENT_INVOICE",
          "CONTRACT",
          "FINAL_INVOICE",
          "PART_PAYMENT_INVOICE",
          "PREPAYMENT_INVOICE",
          "RECURRING_INVOICE",
          "RETAIL_INVOICE",
          "SALES_ORDER",
          "STANDARD_INVOICE"
        ],
        "type": "string"
      },
      "salesInvoiceStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/salesInvoiceStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "salesInvoiceStatusType": {
        "enum": [
          "CANCELLED",
          "DOCUMENT_CREATED",
          "ENTRY_COMPLETED",
          "NEW",
          "OPEN_ITEM_CREATED"
        ],
        "type": "string"
      },
      "salesInvoiceType": {
        "enum": [
          "ADVANCE_PAYMENT_INVOICE",
          "CREDIT_NOTE",
          "FINAL_INVOICE",
          "PART_PAYMENT_INVOICE",
          "PREPAYMENT_INVOICE",
          "RETAIL_INVOICE",
          "STANDARD_INVOICE"
        ],
        "type": "string"
      },
      "salesOpenItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/openItem"
          },
          {
            "properties": {
              "salesInvoiceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesInvoice",
                  "service": "salesInvoice"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "salesOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecordWithAddresses"
          },
          {
            "properties": {
              "advancePaymentStatus": {
                "$ref": "#/components/schemas/advancePaymentStatus"
              },
              "availability": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType"
              },
              "availabilityForAllWarehouses": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType"
              },
              "cashAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "cashAccount",
                  "service": "cashAccount"
                }
              },
              "customerHabitualExporterLetterOfIntentId": {
                "type": "string"
              },
              "defaultShippingReturnCarrierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shippingCarrier",
                  "service": "shippingCarrier"
                }
              },
              "defaultShippingReturnCarrierName": {
                "type": "string"
              },
              "ecommerceOrder": {
                "$ref": "#/components/schemas/ecommerceOrder"
              },
              "fulfillmentProviderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "fulfillmentProvider",
                  "service": "fulfillmentProvider"
                }
              },
              "invoiceRecipientId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "invoiced": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "onlyServices": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "orderDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "orderItems": {
                "items": {
                  "$ref": "#/components/schemas/salesOrderItem"
                },
                "type": "array"
              },
              "orderNumber": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "orderNumberAtCustomer": {
                "maxLength": 64,
                "type": "string"
              },
              "paid": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "plannedProjectEndDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "plannedProjectStartDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "projectGoals": {
                "maxLength": 255,
                "type": "string"
              },
              "projectMembers": {
                "items": {
                  "$ref": "#/components/schemas/projectMembers"
                },
                "type": "array"
              },
              "projectModeActive": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "quotationId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "quotation",
                  "service": "quotation"
                }
              },
              "quotationNumber": {
                "type": "string"
              },
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "salesOrderPaymentType": {
                "$ref": "#/components/schemas/salesOrderPaymentType",
                "x-weclapp": {
                  "required": true
                }
              },
              "servicesFinished": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "shipped": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "shippingLabelsCount": {
                "format": "int32",
                "type": "integer"
              },
              "status": {
                "$ref": "#/components/schemas/orderStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/salesOrderStatusHistory"
                },
                "type": "array"
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "salesOrderItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseSalesRecordItemWithService"
          },
          {
            "properties": {
              "availability": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType",
                "x-weclapp": {
                  "required": true
                }
              },
              "availabilityForAllWarehouses": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType",
                "x-weclapp": {
                  "required": true
                }
              },
              "ecommerceOrderItemId": {
                "maxLength": 1000,
                "type": "string"
              },
              "invoicedQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "pickBatchNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "pickSerialNumbers": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "x-weclapp": {
                  "required": true
                }
              },
              "pickStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "plannedShippingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "returnedQuantity": {
                "format": "decimal",
                "type": "string"
              },
              "shipped": {
                "type": "boolean"
              },
              "shippedQuantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "tasks": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "salesOrderPaymentType": {
        "enum": [
          "ADVANCE_PAYMENT",
          "COUNTER_SALES",
          "PART_PAYMENT",
          "PREPAYMENT",
          "STANDARD"
        ],
        "type": "string"
      },
      "salesOrderStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/orderStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "salesShippingCostItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseShippingCostItem"
          },
          {
            "properties": {
              "manualUnitCost": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "unitCost": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "unitCostInCompanyCurrency": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "salesStage": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "probability": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "salesStageHistory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "salesStageId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesStage",
                  "required": true,
                  "service": "salesStage"
                }
              },
              "salesStageName": {
                "type": "string"
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "salutation": {
        "enum": [
          "COMPANY",
          "FAMILY",
          "MR",
          "MRS",
          "NO_SALUTATION"
        ],
        "type": "string"
      },
      "sepaDirectDebitMandate": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "bankAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "bankAccount",
                  "service": "bankAccount"
                }
              },
              "cancellationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "description": {
                "maxLength": 300,
                "type": "string"
              },
              "firstDebit": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "mandateReference": {
                "maxLength": 300,
                "type": "string"
              },
              "partyBankAccountId": {
                "type": "string"
              },
              "runtime": {
                "$ref": "#/components/schemas/sepaDirectDebitRuntime"
              },
              "signatureDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "type": {
                "$ref": "#/components/schemas/sepaDirectDebitType"
              }
            },
            "type": "object"
          }
        ]
      },
      "sepaDirectDebitRuntime": {
        "enum": [
          "ONE_OFF_MANDATE",
          "RECURRING_MANDATE"
        ],
        "type": "string"
      },
      "sepaDirectDebitType": {
        "enum": [
          "B2B",
          "CORE"
        ],
        "type": "string"
      },
      "serialNumber": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "description": {
                "maxLength": 2048,
                "type": "string"
              },
              "serialNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "shelf": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "shortIdentifier": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "storageLocationId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storageLocation",
                  "required": true,
                  "service": "storageLocation"
                }
              },
              "storagePlaces": {
                "items": {
                  "$ref": "#/components/schemas/nestedStoragePlace"
                },
                "type": "array",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "shipment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseShipment"
          },
          {
            "properties": {
              "additionalDeliveryInformation": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "availability": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType"
              },
              "availabilityForAllWarehouses": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType"
              },
              "consolidationStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "customerPurchaseOrderNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "declaredValueAmount": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "declaredValueAmountCurrencyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "currency",
                  "service": "currency"
                }
              },
              "declaredValueAmountCurrencyName": {
                "type": "string"
              },
              "deliveryDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "destinationStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "destinationWarehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              },
              "destinationWarehouseName": {
                "type": "string"
              },
              "invoiceRecipientId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "packageHeight": {
                "format": "int32",
                "type": "integer"
              },
              "packageLength": {
                "format": "int32",
                "type": "integer"
              },
              "packageReferenceNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "packageReturnTrackingNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "packageReturnTrackingUrl": {
                "maxLength": 255,
                "type": "string"
              },
              "packageTrackingNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "packageTrackingUrl": {
                "maxLength": 255,
                "type": "string"
              },
              "packageWeight": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "packageWidth": {
                "format": "int32",
                "type": "integer"
              },
              "pickingInstructions": {
                "maxLength": 255,
                "type": "string"
              },
              "picksComplete": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "purchaseOrders": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "purchaseOrder",
                  "service": "purchaseOrder"
                }
              },
              "recipientCustomerNumber": {
                "type": "string"
              },
              "recipientPartyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "recipientSupplierNumber": {
                "type": "string"
              },
              "recordEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "salesInvoiceEmailAddresses": {
                "$ref": "#/components/schemas/emailAddresses"
              },
              "shipmentItems": {
                "items": {
                  "$ref": "#/components/schemas/shipmentItem"
                },
                "type": "array"
              },
              "shipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "shipmentMethodName": {
                "type": "string"
              },
              "shipmentNumber": {
                "maxLength": 255,
                "type": "string"
              },
              "shipmentType": {
                "$ref": "#/components/schemas/shipmentOutType"
              },
              "shippedFromAddress": {
                "$ref": "#/components/schemas/recordAddress"
              },
              "shippingCarrierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shippingCarrier",
                  "service": "shippingCarrier"
                }
              },
              "shippingCarrierName": {
                "type": "string"
              },
              "shippingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "shippingLabelsCount": {
                "format": "int32",
                "type": "integer"
              },
              "shippingReturnCarrierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shippingCarrier",
                  "service": "shippingCarrier"
                }
              },
              "shippingReturnCarrierName": {
                "type": "string"
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "service": "warehouse"
                }
              },
              "warehouseName": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "shipmentInType": {
        "enum": [
          "CUSTOMER_RETURN",
          "INTERNAL",
          "STANDARD",
          "SUPPLIER_COMPENSATION"
        ],
        "type": "string"
      },
      "shipmentItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/baseRecordItem"
          },
          {
            "properties": {
              "addPageBreakBefore": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "availability": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType",
                "x-weclapp": {
                  "required": true
                }
              },
              "availabilityForAllWarehouses": {
                "$ref": "#/components/schemas/dispositionInfoAvailabilityType",
                "x-weclapp": {
                  "required": true
                }
              },
              "customAttributes": {
                "items": {
                  "$ref": "#/components/schemas/customAttribute"
                },
                "type": "array"
              },
              "freeTextItem": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "groupName": {
                "maxLength": 1000,
                "type": "string"
              },
              "purchaseOrderItemId": {
                "type": "string"
              },
              "returnAssessmentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnAssessment"
                }
              },
              "returnAssessmentName": {
                "type": "string"
              },
              "returnDescription": {
                "format": "html",
                "maxLength": 4000,
                "type": "string"
              },
              "returnErrorId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnError"
                }
              },
              "returnErrorName": {
                "type": "string"
              },
              "returnReasonId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnReason"
                }
              },
              "returnReasonName": {
                "type": "string"
              },
              "returnRectificationId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentReturnDescription",
                  "service": "shipmentReturnRectification"
                }
              },
              "returnRectificationName": {
                "type": "string"
              },
              "salesOrderItemId": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "shipmentMethod": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "shipmentOutType": {
        "enum": [
          "CONSIGNMENT",
          "CONSIGNMENT_RETURN",
          "CUSTOMER_COMPENSATION",
          "INTERNAL",
          "STANDARD",
          "SUPPLIER_RETURN"
        ],
        "type": "string"
      },
      "shipmentReturnDescription": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "customerReturn": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "position": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "supplierReturn": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "shipmentStatus": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/shipmentStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "shipmentStatusType": {
        "enum": [
          "CANCELLED",
          "DELIVERED",
          "DELIVERY_NOTE_PRINTED",
          "INCOMING_CANCELLED",
          "INCOMING_MOVED_INTO_STORE",
          "INCOMING_SHIPPED",
          "IN_ROUTE",
          "NEW",
          "SHIPPED"
        ],
        "type": "string"
      },
      "shippingCarrier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "internalShippingCarrier": {
                "$ref": "#/components/schemas/internalShippingCarrier"
              },
              "name": {
                "maxLength": 200,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "trackingUrl": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "specialCalculationMode": {
        "enum": [
          "ROUND_SUMS_TO_0_05"
        ],
        "type": "string"
      },
      "stockMovementType": {
        "enum": [
          "IN",
          "IN_CUSTOMER_RETURN",
          "IN_DISABLE_TRANSPORT_REFERENCE",
          "IN_INVENTORY",
          "IN_PACKAGING_UNIT_TRANSFORMATION",
          "IN_PRODUCTION_ORDER",
          "IN_PURCHASE_ORDER",
          "IN_REPACK_ON_TRANSPORT_REFERENCE",
          "IN_SHIPMENT",
          "IN_SHIPMENT_CANCELLATION",
          "IN_SHIPMENT_CONSIGNMENT",
          "IN_SHIPMENT_INTERNAL",
          "IN_THIRD_PARTY_DEAL",
          "IN_TRANSFER",
          "OUT",
          "OUT_DISABLE_TRANSPORT_REFERENCE",
          "OUT_INVENTORY",
          "OUT_PACKAGING_UNIT_TRANSFORMATION",
          "OUT_PRODUCTION_ORDER",
          "OUT_REPACK_ON_TRANSPORT_REFERENCE",
          "OUT_SALES_ORDER",
          "OUT_SHIPMENT",
          "OUT_SHIPMENT_CANCELLATION",
          "OUT_SHIPMENT_CONSIGNMENT",
          "OUT_SHIPMENT_INTERNAL",
          "OUT_THIRD_PARTY_DEAL",
          "OUT_TRANSFER"
        ],
        "type": "string"
      },
      "storageLocation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "blockStoragePlaces": {
                "items": {
                  "$ref": "#/components/schemas/nestedStoragePlace"
                },
                "type": "array"
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "shelves": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "shelf",
                  "service": "shelf"
                }
              },
              "shortIdentifier": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "storagePlaceTypeSettingsBlocked": {
                "$ref": "#/components/schemas/storagePlaceTypeSettings",
                "x-weclapp": {
                  "required": true
                }
              },
              "storagePlaceTypeSettingsPicking": {
                "$ref": "#/components/schemas/storagePlaceTypeSettings",
                "x-weclapp": {
                  "required": true
                }
              },
              "storagePlaceTypeSettingsStock": {
                "$ref": "#/components/schemas/storagePlaceTypeSettings",
                "x-weclapp": {
                  "required": true
                }
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "required": true,
                  "service": "warehouse"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "storagePlace": {
        "allOf": [
          {
            "$ref": "#/components/schemas/nestedStoragePlace"
          },
          {
            "properties": {
              "shelfId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shelf",
                  "service": "shelf"
                }
              },
              "shelfStorageLocationId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storageLocation",
                  "service": "storageLocation"
                }
              },
              "storageLocationId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storageLocation",
                  "service": "storageLocation"
                }
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "required": true,
                  "service": "warehouse"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "storagePlaceSize": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 1000,
                "type": "string"
              },
              "loadingEquipmentIdentifierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "loadingEquipmentIdentifier",
                  "required": true,
                  "service": "loadingEquipmentIdentifier"
                }
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "segmentQuantity": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "storagePlaceType": {
        "enum": [
          "ASSEMBLY",
          "BLOCKED",
          "BUFFER",
          "CONSOLIDATION",
          "INBOUND",
          "PICKING",
          "STOCK",
          "UNIVERSAL",
          "UNIVERSAL_WITHOUT_PICKING"
        ],
        "type": "string"
      },
      "storagePlaceTypeSettings": {
        "properties": {
          "allowMixedStoring": {
            "type": "boolean"
          },
          "automaticPlaceAssignment": {
            "type": "boolean"
          },
          "multiplePlacesPerBaseArticle": {
            "type": "boolean"
          },
          "transportationOrderRequiresFreeSegment": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "storeType": {
        "enum": [
          "CONSIGNMENT",
          "DROP_SHIPPING",
          "STANDARD"
        ],
        "type": "string"
      },
      "successResponse": {
        "properties": {
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "supplier": {
        "allOf": [
          {
            "$ref": "#/components/schemas/partyButNotContact"
          },
          {
            "properties": {
              "bankAccounts": {
                "items": {
                  "$ref": "#/components/schemas/partyBankAccount"
                },
                "type": "array"
              },
              "customerNumberAtSupplier": {
                "maxLength": 64,
                "type": "string"
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "nonStandardTaxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "service": "tax"
                }
              },
              "orderBlock": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "paymentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "paymentMethod",
                  "service": "paymentMethod"
                }
              },
              "paymentMethodName": {
                "type": "string"
              },
              "referenceNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "shipmentMethodId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipmentMethod",
                  "service": "shipmentMethod"
                }
              },
              "shipmentMethodName": {
                "type": "string"
              },
              "supplierNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "supplierRatingId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "partyRating"
                }
              },
              "supplierRatingName": {
                "type": "string"
              },
              "termOfPaymentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "termOfPayment",
                  "service": "termOfPayment"
                }
              },
              "termOfPaymentName": {
                "type": "string"
              },
              "vatRegistrationNumber": {
                "maxLength": 1000,
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "supplierOrderStatusType": {
        "enum": [
          "CANCELLED",
          "CLOSED",
          "CONFIRMED",
          "ORDER_DOCUMENTS_PRINTED",
          "ORDER_ENTRY_COMPLETED",
          "ORDER_ENTRY_IN_PROGRESS"
        ],
        "type": "string"
      },
      "supplierOrderType": {
        "enum": [
          "BLANKET_PURCHASE_ORDER",
          "NORMAL",
          "SALES_ORDER",
          "TRIANGULAR"
        ],
        "type": "string"
      },
      "supplySource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleSupplySourceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "articleSupplySource",
                  "required": true,
                  "service": "articleSupplySource"
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "tag": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "taskStatus": {
        "enum": [
          "ABORTING",
          "EXECUTING",
          "NOT_EXECUTING",
          "SCHEDULED"
        ],
        "type": "string"
      },
      "tax": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "accountNumber": {
                "type": "string"
              },
              "contraAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "contraAccountNumber": {
                "type": "string"
              },
              "defaultDiscountAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "defaultDiscountAccountNumber": {
                "type": "string"
              },
              "defaultNominalAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "defaultNominalAccountNumber": {
                "type": "string"
              },
              "depositAccountId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ledgerAccount",
                  "service": "ledgerAccount"
                }
              },
              "name": {
                "maxLength": 256,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "taxKey": {
                "$ref": "#/components/schemas/taxKey"
              },
              "taxType": {
                "$ref": "#/components/schemas/taxType",
                "x-weclapp": {
                  "required": true
                }
              },
              "taxValue": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "taxDeterminationRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "accountingCodeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "articleAccountingCode"
                }
              },
              "customerDebtorAccountingCodeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "personalAccountingCode"
                }
              },
              "dispatchCountryCode": {
                "type": "string"
              },
              "endDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "partyType": {
                "$ref": "#/components/schemas/partyType"
              },
              "recipientCountryCode": {
                "type": "string"
              },
              "sales": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "startDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "taxId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "tax",
                  "required": true,
                  "service": "tax"
                }
              },
              "taxRateType": {
                "$ref": "#/components/schemas/taxRateType"
              },
              "validVatId": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "taxKey": {
        "enum": [
          "AD_ADD_STANDARD",
          "AD_ADD_TAX_FREE_THIRD",
          "AD_ADD_ZERO",
          "AD_IN_STANDARD",
          "AD_IN_TAX_FREE_THIRD",
          "AD_IN_ZERO",
          "AL_ADD_REDUCED",
          "AL_ADD_STANDARD",
          "AL_ADD_TAX_FREE_THIRD",
          "AL_ADD_ZERO",
          "AL_IN_REDUCED",
          "AL_IN_STANDARD",
          "AL_IN_TAX_FREE_THIRD",
          "AL_IN_ZERO",
          "AR_ADD_REDUCED",
          "AR_ADD_STANDARD",
          "AR_ADD_TAX_FREE_THIRD",
          "AR_ADD_ZERO",
          "AR_IN_REDUCED",
          "AR_IN_STANDARD",
          "AR_IN_TAX_FREE_THIRD",
          "AR_IN_ZERO",
          "AT_ADD_REDUCED",
          "AT_ADD_REDUCED_SLIGHT",
          "AT_ADD_STANDARD",
          "AT_ADD_TAX_FREE_EU",
          "AT_ADD_TAX_FREE_EU_SERVICES",
          "AT_ADD_TAX_FREE_THIRD",
          "AT_ADD_ZERO",
          "AT_IN_REDUCED",
          "AT_IN_REDUCED_SLIGHT",
          "AT_IN_REV_REDUCED_EU",
          "AT_IN_REV_REDUCED_EU_SERVICE",
          "AT_IN_REV_REDUCED_SLIGHT_EU",
          "AT_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "AT_IN_REV_STANDARD_EU",
          "AT_IN_REV_STANDARD_EU_SERVICE",
          "AT_IN_STANDARD",
          "AT_IN_TAX_FREE_THIRD",
          "AT_IN_ZERO",
          "AU_ADD_STANDARD",
          "AU_ADD_TAX_FREE_THIRD",
          "AU_ADD_ZERO",
          "AU_IN_STANDARD",
          "AU_IN_TAX_FREE_THIRD",
          "AU_IN_ZERO",
          "BA_ADD_STANDARD",
          "BA_ADD_TAX_FREE_THIRD",
          "BA_ADD_ZERO",
          "BA_IN_STANDARD",
          "BA_IN_TAX_FREE_THIRD",
          "BA_IN_ZERO",
          "BE_ADD_REDUCED",
          "BE_ADD_REDUCED_SLIGHT",
          "BE_ADD_STANDARD",
          "BE_ADD_TAX_FREE_EU",
          "BE_ADD_TAX_FREE_EU_SERVICES",
          "BE_ADD_TAX_FREE_THIRD",
          "BE_ADD_ZERO",
          "BE_IN_REDUCED",
          "BE_IN_REDUCED_SLIGHT",
          "BE_IN_REV_REDUCED_EU",
          "BE_IN_REV_REDUCED_EU_SERVICE",
          "BE_IN_REV_REDUCED_SLIGHT_EU",
          "BE_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "BE_IN_REV_STANDARD_EU",
          "BE_IN_REV_STANDARD_EU_SERVICE",
          "BE_IN_STANDARD",
          "BE_IN_TAX_FREE_THIRD",
          "BE_IN_ZERO",
          "BG_ADD_REDUCED",
          "BG_ADD_STANDARD",
          "BG_ADD_TAX_FREE_EU",
          "BG_ADD_TAX_FREE_EU_SERVICES",
          "BG_ADD_TAX_FREE_THIRD",
          "BG_ADD_ZERO",
          "BG_IN_REDUCED",
          "BG_IN_REV_REDUCED_EU",
          "BG_IN_REV_REDUCED_EU_SERVICE",
          "BG_IN_REV_STANDARD_EU",
          "BG_IN_REV_STANDARD_EU_SERVICE",
          "BG_IN_STANDARD",
          "BG_IN_TAX_FREE_THIRD",
          "BG_IN_ZERO",
          "BO_ADD_REDUCED",
          "BO_ADD_STANDARD",
          "BO_ADD_TAX_FREE_THIRD",
          "BO_ADD_ZERO",
          "BO_IN_REDUCED",
          "BO_IN_STANDARD",
          "BO_IN_TAX_FREE_THIRD",
          "BO_IN_ZERO",
          "BR_ADD_STANDARD",
          "BR_ADD_TAX_FREE_THIRD",
          "BR_ADD_ZERO",
          "BR_IN_STANDARD",
          "BR_IN_TAX_FREE_THIRD",
          "BR_IN_ZERO",
          "CA_ADD_STANDARD",
          "CA_ADD_TAX_FREE_THIRD",
          "CA_ADD_ZERO",
          "CA_IN_STANDARD",
          "CA_IN_TAX_FREE_THIRD",
          "CA_IN_ZERO",
          "CH_ADD_REDUCED",
          "CH_ADD_REDUCED_2024",
          "CH_ADD_REDUCED_SLIGHT",
          "CH_ADD_REDUCED_SLIGHT_2024",
          "CH_ADD_STANDARD",
          "CH_ADD_STANDARD_2024",
          "CH_ADD_TAX_FREE_THIRD",
          "CH_ADD_ZERO",
          "CH_IN_REDUCED",
          "CH_IN_REDUCED_2024",
          "CH_IN_REDUCED_SLIGHT",
          "CH_IN_REDUCED_SLIGHT_2024",
          "CH_IN_STANDARD",
          "CH_IN_STANDARD_2024",
          "CH_IN_TAX_FREE_THIRD",
          "CH_IN_ZERO",
          "CL_ADD_STANDARD",
          "CL_ADD_TAX_FREE_THIRD",
          "CL_ADD_ZERO",
          "CL_IN_STANDARD",
          "CL_IN_TAX_FREE_THIRD",
          "CL_IN_ZERO",
          "CN_ADD_REDUCED",
          "CN_ADD_REDUCED_SLIGHT",
          "CN_ADD_REDUCED_SUPER",
          "CN_ADD_STANDARD",
          "CN_ADD_TAX_FREE_THIRD",
          "CN_ADD_ZERO",
          "CN_IN_REDUCED",
          "CN_IN_REDUCED_SLIGHT",
          "CN_IN_REDUCED_SUPER",
          "CN_IN_STANDARD",
          "CN_IN_TAX_FREE_THIRD",
          "CN_IN_ZERO",
          "CY_ADD_REDUCED",
          "CY_ADD_REDUCED_SLIGHT",
          "CY_ADD_STANDARD",
          "CY_ADD_TAX_FREE_EU",
          "CY_ADD_TAX_FREE_EU_SERVICES",
          "CY_ADD_TAX_FREE_THIRD",
          "CY_ADD_ZERO",
          "CY_IN_REDUCED",
          "CY_IN_REDUCED_SLIGHT",
          "CY_IN_REV_REDUCED_EU",
          "CY_IN_REV_REDUCED_EU_SERVICE",
          "CY_IN_REV_REDUCED_SLIGHT_EU",
          "CY_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "CY_IN_REV_STANDARD_EU",
          "CY_IN_REV_STANDARD_EU_SERVICE",
          "CY_IN_STANDARD",
          "CY_IN_TAX_FREE_THIRD",
          "CY_IN_ZERO",
          "CZ_ADD_REDUCED",
          "CZ_ADD_REDUCED_2024",
          "CZ_ADD_REDUCED_SLIGHT",
          "CZ_ADD_STANDARD",
          "CZ_ADD_TAX_FREE_EU",
          "CZ_ADD_TAX_FREE_EU_SERVICES",
          "CZ_ADD_TAX_FREE_THIRD",
          "CZ_ADD_ZERO",
          "CZ_IN_REDUCED",
          "CZ_IN_REDUCED_2024",
          "CZ_IN_REDUCED_SLIGHT",
          "CZ_IN_REV_REDUCED_EU",
          "CZ_IN_REV_REDUCED_EU_2024",
          "CZ_IN_REV_REDUCED_EU_SERVICE",
          "CZ_IN_REV_REDUCED_EU_SERVICE_2024",
          "CZ_IN_REV_REDUCED_SLIGHT_EU",
          "CZ_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "CZ_IN_REV_STANDARD_EU",
          "CZ_IN_REV_STANDARD_EU_SERVICE",
          "CZ_IN_STANDARD",
          "CZ_IN_TAX_FREE_THIRD",
          "CZ_IN_ZERO",
          "DE_ADD_REDUCED",
          "DE_ADD_REDUCED_2020",
          "DE_ADD_STANDARD",
          "DE_ADD_STANDARD_2020",
          "DE_ADD_TAX_FREE_EU",
          "DE_ADD_TAX_FREE_EU_SERVICES",
          "DE_ADD_TAX_FREE_THIRD",
          "DE_ADD_ZERO",
          "DE_IN_IMPORT",
          "DE_IN_REDUCED",
          "DE_IN_REDUCED_2020",
          "DE_IN_REV_REDUCED_EU",
          "DE_IN_REV_REDUCED_EU_2020",
          "DE_IN_REV_REDUCED_EU_SERVICE",
          "DE_IN_REV_REDUCED_EU_SERVICE_2020",
          "DE_IN_REV_STANDARD_EU",
          "DE_IN_REV_STANDARD_EU_2020",
          "DE_IN_REV_STANDARD_EU_SERVICE",
          "DE_IN_REV_STANDARD_EU_SERVICE_2020",
          "DE_IN_STANDARD",
          "DE_IN_STANDARD_2020",
          "DE_IN_TAX_FREE_THIRD",
          "DE_IN_ZERO",
          "DK_ADD_STANDARD",
          "DK_ADD_TAX_FREE_EU",
          "DK_ADD_TAX_FREE_EU_SERVICES",
          "DK_ADD_TAX_FREE_THIRD",
          "DK_ADD_ZERO",
          "DK_IN_REV_STANDARD_EU",
          "DK_IN_REV_STANDARD_EU_SERVICE",
          "DK_IN_STANDARD",
          "DK_IN_TAX_FREE_THIRD",
          "DK_IN_ZERO",
          "EE_ADD_REDUCED",
          "EE_ADD_STANDARD",
          "EE_ADD_STANDARD_2024",
          "EE_ADD_TAX_FREE_EU",
          "EE_ADD_TAX_FREE_EU_SERVICES",
          "EE_ADD_TAX_FREE_THIRD",
          "EE_ADD_ZERO",
          "EE_IN_REDUCED",
          "EE_IN_REV_REDUCED_EU",
          "EE_IN_REV_REDUCED_EU_SERVICE",
          "EE_IN_REV_STANDARD_EU",
          "EE_IN_REV_STANDARD_EU_2024",
          "EE_IN_REV_STANDARD_EU_SERVICE",
          "EE_IN_REV_STANDARD_EU_SERVICE_2024",
          "EE_IN_STANDARD",
          "EE_IN_STANDARD_2024",
          "EE_IN_TAX_FREE_THIRD",
          "EE_IN_ZERO",
          "ES_ADD_REDUCED",
          "ES_ADD_REDUCED_SLIGHT",
          "ES_ADD_STANDARD",
          "ES_ADD_TAX_FREE_EU",
          "ES_ADD_TAX_FREE_EU_SERVICES",
          "ES_ADD_TAX_FREE_THIRD",
          "ES_ADD_ZERO",
          "ES_IN_REDUCED",
          "ES_IN_REDUCED_SLIGHT",
          "ES_IN_REV_REDUCED_EU",
          "ES_IN_REV_REDUCED_EU_SERVICE",
          "ES_IN_REV_REDUCED_SLIGHT_EU",
          "ES_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "ES_IN_REV_STANDARD_EU",
          "ES_IN_REV_STANDARD_EU_SERVICE",
          "ES_IN_STANDARD",
          "ES_IN_TAX_FREE_THIRD",
          "ES_IN_ZERO",
          "FI_ADD_REDUCED",
          "FI_ADD_REDUCED_SLIGHT",
          "FI_ADD_STANDARD",
          "FI_ADD_TAX_FREE_EU",
          "FI_ADD_TAX_FREE_EU_SERVICES",
          "FI_ADD_TAX_FREE_THIRD",
          "FI_ADD_ZERO",
          "FI_IN_REDUCED",
          "FI_IN_REDUCED_SLIGHT",
          "FI_IN_REV_REDUCED_EU",
          "FI_IN_REV_REDUCED_EU_SERVICE",
          "FI_IN_REV_REDUCED_SLIGHT_EU",
          "FI_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "FI_IN_REV_STANDARD_EU",
          "FI_IN_REV_STANDARD_EU_SERVICE",
          "FI_IN_STANDARD",
          "FI_IN_TAX_FREE_THIRD",
          "FI_IN_ZERO",
          "FO_ADD_STANDARD",
          "FO_ADD_TAX_FREE_THIRD",
          "FO_ADD_ZERO",
          "FO_IN_STANDARD",
          "FO_IN_TAX_FREE_THIRD",
          "FO_IN_ZERO",
          "FR_ADD_REDUCED",
          "FR_ADD_REDUCED_SLIGHT",
          "FR_ADD_REDUCED_SUPER",
          "FR_ADD_STANDARD",
          "FR_ADD_TAX_FREE_EU",
          "FR_ADD_TAX_FREE_EU_SERVICES",
          "FR_ADD_TAX_FREE_THIRD",
          "FR_ADD_ZERO",
          "FR_IN_REDUCED",
          "FR_IN_REDUCED_SLIGHT",
          "FR_IN_REDUCED_SUPER",
          "FR_IN_REV_REDUCED_EU",
          "FR_IN_REV_REDUCED_EU_SERVICE",
          "FR_IN_REV_REDUCED_SLIGHT_EU",
          "FR_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "FR_IN_REV_REDUCED_SUPER_EU",
          "FR_IN_REV_REDUCED_SUPER_EU_SERVICE",
          "FR_IN_REV_STANDARD_EU",
          "FR_IN_REV_STANDARD_EU_SERVICE",
          "FR_IN_STANDARD",
          "FR_IN_TAX_FREE_THIRD",
          "FR_IN_ZERO",
          "GB_ADD_REDUCED",
          "GB_ADD_STANDARD",
          "GB_ADD_TAX_FREE_THIRD",
          "GB_ADD_ZERO",
          "GB_IN_REDUCED",
          "GB_IN_STANDARD",
          "GB_IN_TAX_FREE_THIRD",
          "GB_IN_ZERO",
          "GR_ADD_REDUCED",
          "GR_ADD_REDUCED_SLIGHT",
          "GR_ADD_STANDARD",
          "GR_ADD_TAX_FREE_EU",
          "GR_ADD_TAX_FREE_EU_SERVICES",
          "GR_ADD_TAX_FREE_THIRD",
          "GR_ADD_ZERO",
          "GR_IN_REDUCED",
          "GR_IN_REDUCED_SLIGHT",
          "GR_IN_REV_REDUCED_EU",
          "GR_IN_REV_REDUCED_EU_SERVICE",
          "GR_IN_REV_REDUCED_SLIGHT_EU",
          "GR_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "GR_IN_REV_STANDARD_EU",
          "GR_IN_REV_STANDARD_EU_SERVICE",
          "GR_IN_STANDARD",
          "GR_IN_TAX_FREE_THIRD",
          "GR_IN_ZERO",
          "HR_ADD_REDUCED",
          "HR_ADD_REDUCED_SLIGHT",
          "HR_ADD_STANDARD",
          "HR_ADD_TAX_FREE_EU",
          "HR_ADD_TAX_FREE_EU_SERVICES",
          "HR_ADD_TAX_FREE_THIRD",
          "HR_ADD_ZERO",
          "HR_IN_REDUCED",
          "HR_IN_REDUCED_SLIGHT",
          "HR_IN_REV_REDUCED_EU",
          "HR_IN_REV_REDUCED_EU_SERVICE",
          "HR_IN_REV_REDUCED_SLIGHT_EU",
          "HR_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "HR_IN_REV_STANDARD_EU",
          "HR_IN_REV_STANDARD_EU_SERVICE",
          "HR_IN_STANDARD",
          "HR_IN_TAX_FREE_THIRD",
          "HR_IN_ZERO",
          "HU_ADD_REDUCED",
          "HU_ADD_REDUCED_SLIGHT",
          "HU_ADD_STANDARD",
          "HU_ADD_TAX_FREE_EU",
          "HU_ADD_TAX_FREE_EU_SERVICES",
          "HU_ADD_TAX_FREE_THIRD",
          "HU_ADD_ZERO",
          "HU_IN_REDUCED",
          "HU_IN_REDUCED_SLIGHT",
          "HU_IN_REV_REDUCED_EU",
          "HU_IN_REV_REDUCED_EU_SERVICE",
          "HU_IN_REV_REDUCED_SLIGHT_EU",
          "HU_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "HU_IN_REV_STANDARD_EU",
          "HU_IN_REV_STANDARD_EU_SERVICE",
          "HU_IN_STANDARD",
          "HU_IN_TAX_FREE_THIRD",
          "HU_IN_ZERO",
          "IE_ADD_REDUCED",
          "IE_ADD_REDUCED_SLIGHT",
          "IE_ADD_REDUCED_SUPER",
          "IE_ADD_STANDARD",
          "IE_ADD_TAX_FREE_EU",
          "IE_ADD_TAX_FREE_THIRD",
          "IE_ADD_ZERO",
          "IE_IN_REDUCED",
          "IE_IN_REDUCED_SLIGHT",
          "IE_IN_REDUCED_SUPER",
          "IE_IN_REV_REDUCED_EU",
          "IE_IN_REV_REDUCED_EU_SERVICE",
          "IE_IN_REV_REDUCED_SLIGHT_EU",
          "IE_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "IE_IN_REV_REDUCED_SUPER_EU",
          "IE_IN_REV_REDUCED_SUPER_EU_SERVICE",
          "IE_IN_REV_STANDARD_EU",
          "IE_IN_REV_STANDARD_EU_SERVICE",
          "IE_IN_STANDARD",
          "IE_IN_TAX_FREE_THIRD",
          "IE_IN_ZERO",
          "IL_ADD_REDUCED",
          "IL_ADD_STANDARD",
          "IL_ADD_TAX_FREE_THIRD",
          "IL_ADD_ZERO",
          "IL_IN_REDUCED",
          "IL_IN_STANDARD",
          "IL_IN_TAX_FREE_THIRD",
          "IL_IN_ZERO",
          "IN_ADD_REDUCED",
          "IN_ADD_REDUCED_SUPER",
          "IN_ADD_STANDARD",
          "IN_ADD_TAX_FREE_THIRD",
          "IN_ADD_ZERO",
          "IN_IN_REDUCED",
          "IN_IN_REDUCED_SUPER",
          "IN_IN_STANDARD",
          "IN_IN_TAX_FREE_THIRD",
          "IN_IN_ZERO",
          "IS_ADD_REDUCED",
          "IS_ADD_STANDARD",
          "IS_ADD_TAX_FREE_THIRD",
          "IS_ADD_ZERO",
          "IS_IN_REDUCED",
          "IS_IN_STANDARD",
          "IS_IN_TAX_FREE_THIRD",
          "IS_IN_ZERO",
          "IT_ADD_REDUCED",
          "IT_ADD_REDUCED_SLIGHT",
          "IT_ADD_REDUCED_SUPER",
          "IT_ADD_STANDARD",
          "IT_ADD_TAX_FREE_EU",
          "IT_ADD_TAX_FREE_EU_SERVICES",
          "IT_ADD_TAX_FREE_LETTER_OF_INTENT",
          "IT_ADD_TAX_FREE_THIRD",
          "IT_ADD_TAX_FREE_THIRD_SERVICES",
          "IT_ADD_ZERO",
          "IT_IN_REDUCED",
          "IT_IN_REDUCED_SLIGHT",
          "IT_IN_REDUCED_SUPER",
          "IT_IN_REV_REDUCED_EU",
          "IT_IN_REV_REDUCED_EU_SERVICE",
          "IT_IN_REV_REDUCED_SLIGHT_EU",
          "IT_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "IT_IN_REV_REDUCED_SUPER_EU",
          "IT_IN_REV_REDUCED_SUPER_EU_SERVICE",
          "IT_IN_REV_STANDARD_EU",
          "IT_IN_REV_STANDARD_EU_SERVICE",
          "IT_IN_STANDARD",
          "IT_IN_TAX_FREE_LETTER_OF_INTENT",
          "IT_IN_TAX_FREE_THIRD",
          "IT_IN_ZERO",
          "JP_ADD_STANDARD",
          "JP_ADD_TAX_FREE_THIRD",
          "JP_ADD_ZERO",
          "JP_IN_STANDARD",
          "JP_IN_TAX_FREE_THIRD",
          "JP_IN_ZERO",
          "LI_ADD_REDUCED",
          "LI_ADD_REDUCED_2024",
          "LI_ADD_REDUCED_SUPER",
          "LI_ADD_REDUCED_SUPER_2024",
          "LI_ADD_STANDARD",
          "LI_ADD_STANDARD_2024",
          "LI_ADD_TAX_FREE_THIRD",
          "LI_ADD_ZERO",
          "LI_IN_REDUCED",
          "LI_IN_REDUCED_2024",
          "LI_IN_REDUCED_SUPER",
          "LI_IN_REDUCED_SUPER_2024",
          "LI_IN_STANDARD",
          "LI_IN_STANDARD_2024",
          "LI_IN_TAX_FREE_THIRD",
          "LI_IN_ZERO",
          "LK_ADD_STANDARD",
          "LK_ADD_TAX_FREE_THIRD",
          "LK_ADD_ZERO",
          "LK_IN_STANDARD",
          "LK_IN_TAX_FREE_THIRD",
          "LK_IN_ZERO",
          "LT_ADD_REDUCED",
          "LT_ADD_REDUCED_SLIGHT",
          "LT_ADD_STANDARD",
          "LT_ADD_TAX_FREE_EU",
          "LT_ADD_TAX_FREE_EU_SERVICES",
          "LT_ADD_TAX_FREE_THIRD",
          "LT_ADD_ZERO",
          "LT_IN_REDUCED",
          "LT_IN_REDUCED_SLIGHT",
          "LT_IN_REV_REDUCED_EU",
          "LT_IN_REV_REDUCED_EU_SERVICE",
          "LT_IN_REV_REDUCED_SLIGHT_EU",
          "LT_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "LT_IN_REV_STANDARD_EU",
          "LT_IN_REV_STANDARD_EU_SERVICE",
          "LT_IN_STANDARD",
          "LT_IN_TAX_FREE_THIRD",
          "LT_IN_ZERO",
          "LU_ADD_REDUCED",
          "LU_ADD_REDUCED_2023",
          "LU_ADD_REDUCED_SLIGHT",
          "LU_ADD_REDUCED_SLIGHT_2023",
          "LU_ADD_REDUCED_SUPER",
          "LU_ADD_STANDARD",
          "LU_ADD_STANDARD_2023",
          "LU_ADD_TAX_FREE_EU",
          "LU_ADD_TAX_FREE_EU_SERVICES",
          "LU_ADD_TAX_FREE_THIRD",
          "LU_ADD_ZERO",
          "LU_IN_REDUCED",
          "LU_IN_REDUCED_2023",
          "LU_IN_REDUCED_SLIGHT",
          "LU_IN_REDUCED_SLIGHT_2023",
          "LU_IN_REDUCED_SUPER",
          "LU_IN_REV_REDUCED_EU",
          "LU_IN_REV_REDUCED_EU_2023",
          "LU_IN_REV_REDUCED_EU_SERVICE",
          "LU_IN_REV_REDUCED_EU_SERVICE_2023",
          "LU_IN_REV_REDUCED_SLIGHT_EU",
          "LU_IN_REV_REDUCED_SLIGHT_EU_2023",
          "LU_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "LU_IN_REV_REDUCED_SLIGHT_EU_SERVICE_2023",
          "LU_IN_REV_REDUCED_SUPER_EU",
          "LU_IN_REV_REDUCED_SUPER_EU_SERVICE",
          "LU_IN_REV_STANDARD_EU",
          "LU_IN_REV_STANDARD_EU_2023",
          "LU_IN_REV_STANDARD_EU_SERVICE",
          "LU_IN_REV_STANDARD_EU_SERVICE_2023",
          "LU_IN_STANDARD",
          "LU_IN_STANDARD_2023",
          "LU_IN_TAX_FREE_THIRD",
          "LU_IN_ZERO",
          "LV_ADD_REDUCED",
          "LV_ADD_REDUCED_SLIGHT",
          "LV_ADD_STANDARD",
          "LV_ADD_TAX_FREE_EU",
          "LV_ADD_TAX_FREE_EU_SERVICES",
          "LV_ADD_TAX_FREE_THIRD",
          "LV_ADD_ZERO",
          "LV_IN_REDUCED",
          "LV_IN_REDUCED_SLIGHT",
          "LV_IN_REV_REDUCED_EU",
          "LV_IN_REV_REDUCED_EU_SERVICE",
          "LV_IN_REV_REDUCED_SLIGHT_EU",
          "LV_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "LV_IN_REV_STANDARD_EU",
          "LV_IN_REV_STANDARD_EU_SERVICE",
          "LV_IN_STANDARD",
          "LV_IN_TAX_FREE_THIRD",
          "LV_IN_ZERO",
          "MA_ADD_STANDARD",
          "MA_ADD_TAX_FREE_THIRD",
          "MA_ADD_ZERO",
          "MA_IN_STANDARD",
          "MA_IN_TAX_FREE_THIRD",
          "MA_IN_ZERO",
          "ME_ADD_REDUCED",
          "ME_ADD_STANDARD",
          "ME_ADD_TAX_FREE_THIRD",
          "ME_ADD_ZERO",
          "ME_IN_REDUCED",
          "ME_IN_STANDARD",
          "ME_IN_TAX_FREE_THIRD",
          "ME_IN_ZERO",
          "MK_ADD_REDUCED",
          "MK_ADD_STANDARD",
          "MK_ADD_TAX_FREE_THIRD",
          "MK_ADD_ZERO",
          "MK_IN_REDUCED",
          "MK_IN_STANDARD",
          "MK_IN_TAX_FREE_THIRD",
          "MK_IN_ZERO",
          "MT_ADD_REDUCED",
          "MT_ADD_REDUCED_2024",
          "MT_ADD_REDUCED_SLIGHT",
          "MT_ADD_REDUCED_SLIGHT_2024",
          "MT_ADD_REDUCED_SUPER",
          "MT_ADD_STANDARD",
          "MT_ADD_TAX_FREE_EU",
          "MT_ADD_TAX_FREE_EU_SERVICES",
          "MT_ADD_TAX_FREE_THIRD",
          "MT_ADD_ZERO",
          "MT_IN_REDUCED",
          "MT_IN_REDUCED_2024",
          "MT_IN_REDUCED_SLIGHT",
          "MT_IN_REDUCED_SLIGHT_2024",
          "MT_IN_REDUCED_SUPER",
          "MT_IN_REV_REDUCED_EU",
          "MT_IN_REV_REDUCED_EU_2024",
          "MT_IN_REV_REDUCED_EU_SERVICE",
          "MT_IN_REV_REDUCED_EU_SERVICE_2024",
          "MT_IN_REV_REDUCED_SLIGHT_EU",
          "MT_IN_REV_REDUCED_SLIGHT_EU_2024",
          "MT_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "MT_IN_REV_REDUCED_SLIGHT_EU_SERVICE_2024",
          "MT_IN_REV_REDUCED_SUPER_EU",
          "MT_IN_REV_REDUCED_SUPER_EU_SERVICE",
          "MT_IN_REV_STANDARD_EU",
          "MT_IN_REV_STANDARD_EU_SERVICE",
          "MT_IN_STANDARD",
          "MT_IN_TAX_FREE_THIRD",
          "MT_IN_ZERO",
          "MX_ADD_STANDARD",
          "MX_ADD_TAX_FREE_THIRD",
          "MX_ADD_ZERO",
          "MX_IN_STANDARD",
          "MX_IN_TAX_FREE_THIRD",
          "MX_IN_ZERO",
          "NL_ADD_REDUCED",
          "NL_ADD_STANDARD",
          "NL_ADD_TAX_FREE_EU",
          "NL_ADD_TAX_FREE_EU_SERVICES",
          "NL_ADD_TAX_FREE_THIRD",
          "NL_ADD_ZERO",
          "NL_IN_REDUCED",
          "NL_IN_REV_REDUCED_EU",
          "NL_IN_REV_REDUCED_EU_SERVICE",
          "NL_IN_REV_STANDARD_EU",
          "NL_IN_REV_STANDARD_EU_SERVICE",
          "NL_IN_STANDARD",
          "NL_IN_TAX_FREE_THIRD",
          "NL_IN_ZERO",
          "NO_ADD_REDUCED",
          "NO_ADD_REDUCED_SUPER",
          "NO_ADD_STANDARD",
          "NO_ADD_TAX_FREE_THIRD",
          "NO_ADD_ZERO",
          "NO_IN_REDUCED",
          "NO_IN_REDUCED_SUPER",
          "NO_IN_STANDARD",
          "NO_IN_TAX_FREE_THIRD",
          "NO_IN_ZERO",
          "NZ_ADD_STANDARD",
          "NZ_ADD_TAX_FREE_THIRD",
          "NZ_ADD_ZERO",
          "NZ_IN_STANDARD",
          "NZ_IN_TAX_FREE_THIRD",
          "NZ_IN_ZERO",
          "PL_ADD_REDUCED",
          "PL_ADD_REDUCED_SUPER",
          "PL_ADD_STANDARD",
          "PL_ADD_TAX_FREE_EU",
          "PL_ADD_TAX_FREE_EU_SERVICES",
          "PL_ADD_TAX_FREE_THIRD",
          "PL_ADD_ZERO",
          "PL_IN_REDUCED",
          "PL_IN_REDUCED_SUPER",
          "PL_IN_REV_REDUCED_EU",
          "PL_IN_REV_REDUCED_EU_SERVICE",
          "PL_IN_REV_REDUCED_SUPER_EU",
          "PL_IN_REV_REDUCED_SUPER_EU_SERVICE",
          "PL_IN_REV_STANDARD_EU",
          "PL_IN_REV_STANDARD_EU_SERVICE",
          "PL_IN_STANDARD",
          "PL_IN_TAX_FREE_THIRD",
          "PL_IN_ZERO",
          "PT_ADD_REDUCED",
          "PT_ADD_REDUCED_SLIGHT",
          "PT_ADD_STANDARD",
          "PT_ADD_TAX_FREE_EU",
          "PT_ADD_TAX_FREE_EU_SERVICES",
          "PT_ADD_TAX_FREE_THIRD",
          "PT_ADD_ZERO",
          "PT_IN_REDUCED",
          "PT_IN_REDUCED_SLIGHT",
          "PT_IN_REV_REDUCED_EU",
          "PT_IN_REV_REDUCED_EU_SERVICE",
          "PT_IN_REV_REDUCED_SLIGHT_EU",
          "PT_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "PT_IN_REV_STANDARD_EU",
          "PT_IN_REV_STANDARD_EU_SERVICE",
          "PT_IN_STANDARD",
          "PT_IN_TAX_FREE_THIRD",
          "PT_IN_ZERO",
          "RO_ADD_REDUCED",
          "RO_ADD_REDUCED_SLIGHT",
          "RO_ADD_STANDARD",
          "RO_ADD_TAX_FREE_EU",
          "RO_ADD_TAX_FREE_EU_SERVICES",
          "RO_ADD_TAX_FREE_THIRD",
          "RO_ADD_ZERO",
          "RO_IN_REDUCED",
          "RO_IN_REDUCED_SLIGHT",
          "RO_IN_REV_REDUCED_EU",
          "RO_IN_REV_REDUCED_EU_SERVICE",
          "RO_IN_REV_REDUCED_SLIGHT_EU",
          "RO_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "RO_IN_REV_STANDARD_EU",
          "RO_IN_REV_STANDARD_EU_SERVICE",
          "RO_IN_STANDARD",
          "RO_IN_TAX_FREE_THIRD",
          "RO_IN_ZERO",
          "RS_ADD_REDUCED",
          "RS_ADD_STANDARD",
          "RS_ADD_TAX_FREE_THIRD",
          "RS_ADD_ZERO",
          "RS_IN_REDUCED",
          "RS_IN_STANDARD",
          "RS_IN_TAX_FREE_THIRD",
          "RS_IN_ZERO",
          "RU_ADD_REDUCED",
          "RU_ADD_STANDARD",
          "RU_ADD_TAX_FREE_THIRD",
          "RU_ADD_ZERO",
          "RU_IN_REDUCED",
          "RU_IN_STANDARD",
          "RU_IN_TAX_FREE_THIRD",
          "RU_IN_ZERO",
          "SE_ADD_REDUCED",
          "SE_ADD_REDUCED_SLIGHT",
          "SE_ADD_STANDARD",
          "SE_ADD_TAX_FREE_EU",
          "SE_ADD_TAX_FREE_EU_SERVICES",
          "SE_ADD_TAX_FREE_THIRD",
          "SE_ADD_ZERO",
          "SE_IN_REDUCED",
          "SE_IN_REDUCED_SLIGHT",
          "SE_IN_REV_REDUCED_EU",
          "SE_IN_REV_REDUCED_EU_SERVICE",
          "SE_IN_REV_REDUCED_SLIGHT_EU",
          "SE_IN_REV_REDUCED_SLIGHT_EU_SERVICE",
          "SE_IN_REV_STANDARD_EU",
          "SE_IN_REV_STANDARD_EU_SERVICE",
          "SE_IN_STANDARD",
          "SE_IN_TAX_FREE_THIRD",
          "SE_IN_ZERO",
          "SG_ADD_STANDARD",
          "SG_ADD_TAX_FREE_THIRD",
          "SG_ADD_ZERO",
          "SG_IN_STANDARD",
          "SG_IN_TAX_FREE_THIRD",
          "SG_IN_ZERO",
          "SI_ADD_REDUCED",
          "SI_ADD_STANDARD",
          "SI_ADD_TAX_FREE_EU",
          "SI_ADD_TAX_FREE_EU_SERVICES",
          "SI_ADD_TAX_FREE_THIRD",
          "SI_ADD_ZERO",
          "SI_IN_REDUCED",
          "SI_IN_REV_REDUCED_EU",
          "SI_IN_REV_REDUCED_EU_SERVICE",
          "SI_IN_REV_STANDARD_EU",
          "SI_IN_REV_STANDARD_EU_SERVICE",
          "SI_IN_STANDARD",
          "SI_IN_TAX_FREE_THIRD",
          "SI_IN_ZERO",
          "SK_ADD_REDUCED",
          "SK_ADD_STANDARD",
          "SK_ADD_TAX_FREE_EU",
          "SK_ADD_TAX_FREE_EU_SERVICES",
          "SK_ADD_TAX_FREE_THIRD",
          "SK_ADD_ZERO",
          "SK_IN_REDUCED",
          "SK_IN_REV_REDUCED_EU",
          "SK_IN_REV_REDUCED_EU_SERVICE",
          "SK_IN_REV_STANDARD_EU",
          "SK_IN_REV_STANDARD_EU_SERVICE",
          "SK_IN_STANDARD",
          "SK_IN_TAX_FREE_THIRD",
          "SK_IN_ZERO",
          "TH_ADD_STANDARD",
          "TH_ADD_TAX_FREE_THIRD",
          "TH_ADD_ZERO",
          "TH_IN_STANDARD",
          "TH_IN_TAX_FREE_THIRD",
          "TH_IN_ZERO",
          "TR_ADD_REDUCED",
          "TR_ADD_REDUCED_SUPER",
          "TR_ADD_STANDARD",
          "TR_ADD_TAX_FREE_THIRD",
          "TR_ADD_ZERO",
          "TR_IN_REDUCED",
          "TR_IN_REDUCED_SUPER",
          "TR_IN_STANDARD",
          "TR_IN_TAX_FREE_THIRD",
          "TR_IN_ZERO",
          "TW_ADD_STANDARD",
          "TW_ADD_TAX_FREE_THIRD",
          "TW_ADD_ZERO",
          "TW_IN_STANDARD",
          "TW_IN_TAX_FREE_THIRD",
          "TW_IN_ZERO",
          "UA_ADD_REDUCED",
          "UA_ADD_STANDARD",
          "UA_ADD_TAX_FREE_THIRD",
          "UA_ADD_ZERO",
          "UA_IN_REDUCED",
          "UA_IN_STANDARD",
          "UA_IN_TAX_FREE_THIRD",
          "UA_IN_ZERO",
          "VE_ADD_STANDARD",
          "VE_ADD_TAX_FREE_THIRD",
          "VE_ADD_ZERO",
          "VE_IN_STANDARD",
          "VE_IN_TAX_FREE_THIRD",
          "VE_IN_ZERO",
          "XI_ADD_REDUCED",
          "XI_ADD_STANDARD",
          "XI_ADD_TAX_FREE_EU",
          "XI_ADD_TAX_FREE_EU_SERVICES",
          "XI_ADD_TAX_FREE_THIRD",
          "XI_ADD_ZERO",
          "XI_IN_REDUCED",
          "XI_IN_REV_REDUCED_EU",
          "XI_IN_REV_REDUCED_EU_SERVICE",
          "XI_IN_REV_STANDARD_EU",
          "XI_IN_REV_STANDARD_EU_SERVICE",
          "XI_IN_STANDARD",
          "XI_IN_TAX_FREE_THIRD",
          "XI_IN_ZERO",
          "XK_ADD_REDUCED",
          "XK_ADD_STANDARD",
          "XK_ADD_TAX_FREE_THIRD",
          "XK_ADD_ZERO",
          "XK_IN_REDUCED",
          "XK_IN_STANDARD",
          "XK_IN_TAX_FREE_THIRD",
          "XK_IN_ZERO",
          "ZA_ADD_REDUCED",
          "ZA_ADD_REDUCED_SUPER",
          "ZA_ADD_STANDARD",
          "ZA_ADD_TAX_FREE_THIRD",
          "ZA_ADD_ZERO",
          "ZA_IN_REDUCED",
          "ZA_IN_REDUCED_SUPER",
          "ZA_IN_STANDARD",
          "ZA_IN_TAX_FREE_THIRD",
          "ZA_IN_ZERO"
        ],
        "type": "string"
      },
      "taxRateType": {
        "enum": [
          "REDUCED",
          "SLIGHTLY_REDUCED",
          "STANDARD",
          "SUPER_REDUCED",
          "ZERO"
        ],
        "type": "string"
      },
      "taxType": {
        "enum": [
          "IMPORT_SALES_TAX",
          "INPUT_VAT",
          "INPUT_VAT_REVERSED",
          "VALUE_ADDED_TAX"
        ],
        "type": "string"
      },
      "teamRole": {
        "enum": [
          "MANAGER",
          "USER"
        ],
        "type": "string"
      },
      "templateType": {
        "enum": [
          "EMAIL",
          "LETTER"
        ],
        "type": "string"
      },
      "termOfPayment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "conditions": {
                "items": {
                  "$ref": "#/components/schemas/termOfPaymentCondition"
                },
                "type": "array"
              },
              "datevTermOfPaymentNumber": {
                "format": "int32",
                "type": "integer"
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "reference": {
                "maxLength": 30,
                "type": "string"
              },
              "validFrom": {
                "format": "timestamp",
                "type": "integer"
              },
              "validTo": {
                "format": "timestamp",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "termOfPaymentCondition": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "discountPercentage": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 255,
                "type": "string"
              },
              "numberOfDays": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ticket": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "assignedPoolingGroupId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketPoolingGroup",
                  "service": "ticketPoolingGroup"
                }
              },
              "assignedUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "billable": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "billableStatus": {
                "type": "boolean"
              },
              "ccEmailAddresses": {
                "maxLength": 4000,
                "type": "string"
              },
              "contactId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "contractId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "contract",
                  "service": "contract"
                }
              },
              "description": {
                "format": "html",
                "maxLength": 255,
                "type": "string"
              },
              "disableEmailTemplates": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "email": {
                "format": "email",
                "maxLength": 1000,
                "type": "string"
              },
              "entityReferences": {
                "items": {
                  "$ref": "#/components/schemas/entityReference"
                },
                "type": "array"
              },
              "finishedDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "firstName": {
                "maxLength": 1000,
                "type": "string"
              },
              "followUpDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "invoicingStatus": {
                "$ref": "#/components/schemas/billableInvoiceStatus"
              },
              "language": {
                "maxLength": 1000,
                "type": "string"
              },
              "lastName": {
                "maxLength": 1000,
                "type": "string"
              },
              "legacyArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "legacyTimeAndMaterialTicket": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "mail2TicketId": {
                "type": "string"
              },
              "mobilePhoneNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "note": {
                "maxLength": 1000,
                "type": "string"
              },
              "partyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "performanceRecordedStatus": {
                "$ref": "#/components/schemas/performanceRecordedStatus"
              },
              "phoneNumber": {
                "maxLength": 1000,
                "type": "string"
              },
              "publicPageExpirationDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "publicPageUuid": {
                "maxLength": 1000,
                "type": "string"
              },
              "resolvedYourIssue": {
                "type": "boolean"
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "room": {
                "maxLength": 50,
                "type": "string"
              },
              "salesOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "salesOrder",
                  "service": "salesOrder"
                }
              },
              "solutionDueDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "subject": {
                "maxLength": 150,
                "type": "string"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "ticketCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketCategory",
                  "service": "ticketCategory"
                }
              },
              "ticketChannelId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "required": true,
                  "service": "ticketChannel"
                }
              },
              "ticketNumber": {
                "maxLength": 64,
                "type": "string"
              },
              "ticketPriorityId": {
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "ticketRating": {
                "$ref": "#/components/schemas/rating"
              },
              "ticketRatingComment": {
                "maxLength": 1000,
                "type": "string"
              },
              "ticketRatingDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "ticketServiceLevelAgreementId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketServiceLevelAgreement",
                  "service": "ticketServiceLevelAgreement"
                }
              },
              "ticketStatusId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketStatus",
                  "required": true,
                  "service": "ticketStatus"
                }
              },
              "ticketTypeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketType",
                  "service": "ticketType"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketAssigneeType": {
        "enum": [
          "CUSTOMER_RESPONSIBLE_PERSON",
          "POOL",
          "TICKET_AGENT"
        ],
        "type": "string"
      },
      "ticketAssignmentRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "assignedPoolingGroupId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketPoolingGroup",
                  "service": "ticketPoolingGroup"
                }
              },
              "assigneeUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "commercialLanguage": {
                "maxLength": 255,
                "type": "string"
              },
              "distributionChannel": {
                "$ref": "#/components/schemas/distributionChannel"
              },
              "partyId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "responsibleUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "targetStatusId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketStatus",
                  "required": true,
                  "service": "ticketStatus"
                }
              },
              "ticketAssigneeType": {
                "$ref": "#/components/schemas/ticketAssigneeType",
                "x-weclapp": {
                  "required": true
                }
              },
              "ticketCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketCategory",
                  "service": "ticketCategory"
                }
              },
              "ticketChannelId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "ticketChannel"
                }
              },
              "ticketPriorityId": {
                "type": "string"
              },
              "ticketTypeId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketType",
                  "service": "ticketType"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketCategory": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 512,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "parentTicketCategoryId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "pseudoCategory": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "published": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "visibleInCustomerPortal": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketFaq": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "answer": {
                "format": "html",
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "createdById": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "customers": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "question": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "ticketCategories": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "ticketCategory",
                  "service": "ticketCategory"
                }
              },
              "visibility": {
                "$ref": "#/components/schemas/ticketFaqVisibility"
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketFaqVisibility": {
        "enum": [
          "INTERNAL",
          "PUBLIC"
        ],
        "type": "string"
      },
      "ticketPoolingGroup": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 100,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "ticketCategories": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array"
              },
              "ticketPoolingGroupMembers": {
                "items": {
                  "$ref": "#/components/schemas/ticketPoolingGroupMember"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketPoolingGroupMember": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "ticketPoolingGroupId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketPoolingGroup",
                  "required": true,
                  "service": "ticketPoolingGroup"
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketServiceLevelAgreement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "categories": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "ticketCategory",
                  "service": "ticketCategory"
                }
              },
              "customers": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "party",
                  "service": "party"
                }
              },
              "degreeOfPerformance": {
                "format": "int32",
                "type": "integer"
              },
              "includeNoTicketType": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 128,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "ratingId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "customValue",
                  "service": "partyRating"
                }
              },
              "targets": {
                "items": {
                  "$ref": "#/components/schemas/ticketServiceLevelAgreementTarget"
                },
                "type": "array"
              },
              "types": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "ticketType",
                  "service": "ticketType"
                }
              },
              "visible": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketServiceLevelAgreementTarget": {
        "properties": {
          "assignmentTimeQuantity": {
            "format": "int32",
            "type": "integer"
          },
          "assignmentTimeUnit": {
            "$ref": "#/components/schemas/ticketServiceLevelAgreementUnit"
          },
          "businessHolidaysId": {
            "format": "int32",
            "type": "integer"
          },
          "businessHoursId": {
            "format": "int32",
            "type": "integer"
          },
          "firstReplyTimeQuantity": {
            "format": "int32",
            "type": "integer"
          },
          "firstReplyTimeUnit": {
            "$ref": "#/components/schemas/ticketServiceLevelAgreementUnit"
          },
          "notification": {
            "type": "boolean"
          },
          "priorityId": {
            "format": "int32",
            "type": "integer"
          },
          "sendEscalationEmail": {
            "type": "boolean"
          },
          "solutionTimeQuantity": {
            "format": "int32",
            "type": "integer"
          },
          "solutionTimeUnit": {
            "$ref": "#/components/schemas/ticketServiceLevelAgreementUnit"
          }
        },
        "type": "object"
      },
      "ticketServiceLevelAgreementUnit": {
        "enum": [
          "DAYS",
          "HOURS",
          "MINUTES",
          "NONE"
        ],
        "type": "string"
      },
      "ticketStatus": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "autoChangeDays": {
                "format": "int32",
                "type": "integer"
              },
              "autoChangeTicketStatusId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketStatus",
                  "service": "ticketStatus"
                }
              },
              "color": {
                "$ref": "#/components/schemas/ticketStatusColor"
              },
              "defaultForInternal": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "internalTicketStatus": {
                "$ref": "#/components/schemas/internalTicketStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 200,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "targetStatusId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "ticketStatus",
                  "service": "ticketStatus"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "ticketStatusColor": {
        "enum": [
          "BLUE",
          "BROWN",
          "DARK_BLUE",
          "DARK_GREEN",
          "DARK_RED",
          "GREEN",
          "LIGHT_BLUE",
          "ORANGE",
          "PINK",
          "PURPLE",
          "RED",
          "VIOLET",
          "YELLOW",
          "YELLOW_GREEN"
        ],
        "type": "string"
      },
      "ticketType": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "name": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "timeUnit": {
        "enum": [
          "DAY",
          "HOUR",
          "MINUTE",
          "MONTH",
          "SECOND",
          "WEEK",
          "YEAR"
        ],
        "type": "string"
      },
      "translation": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "key": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "values": {
                "items": {
                  "$ref": "#/components/schemas/translationValue"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "translationValue": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "locale": {
                "maxLength": 255,
                "type": "string"
              },
              "text": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "transportationOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "assignedUserId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "service": "user"
                }
              },
              "destinationStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "required": true,
                  "service": "storagePlace"
                }
              },
              "internalTransportReferenceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "internalTransportReference",
                  "service": "internalTransportReference"
                }
              },
              "loadingEquipmentArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "loadingEquipmentIdentifierId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "loadingEquipmentIdentifier",
                  "service": "loadingEquipmentIdentifier"
                }
              },
              "picks": {
                "items": {
                  "$ref": "#/components/schemas/basePickingBookRecord"
                },
                "type": "array"
              },
              "productionOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "productionOrder",
                  "service": "productionOrder"
                }
              },
              "shipmentId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "shipment",
                  "service": "shipment"
                }
              },
              "status": {
                "$ref": "#/components/schemas/transportationOrderStatusType",
                "x-weclapp": {
                  "required": true
                }
              },
              "statusHistory": {
                "items": {
                  "$ref": "#/components/schemas/transportationOrderStatusHistory"
                },
                "type": "array"
              },
              "transportationOrderNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "transportationOrderType": {
                "$ref": "#/components/schemas/transportationOrderType",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "transportationOrderStatusHistory": {
        "properties": {
          "status": {
            "$ref": "#/components/schemas/transportationOrderStatusType",
            "x-weclapp": {
              "required": true
            }
          },
          "statusDate": {
            "format": "timestamp",
            "type": "integer",
            "x-weclapp": {
              "required": true
            }
          },
          "userId": {
            "type": "string",
            "x-weclapp": {
              "entity": "user",
              "service": "user"
            }
          }
        },
        "type": "object"
      },
      "transportationOrderStatusType": {
        "enum": [
          "CANCELLED",
          "COMPLETED",
          "IN_INTERIM",
          "IN_TRANSIT",
          "NEW"
        ],
        "type": "string"
      },
      "transportationOrderType": {
        "enum": [
          "PICKING",
          "STOCK_TRANSFER"
        ],
        "type": "string"
      },
      "unit": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 60,
                "type": "string"
              },
              "name": {
                "maxLength": 150,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "timeUnitAmount": {
                "format": "int64",
                "type": "integer"
              }
            },
            "type": "object"
          }
        ]
      },
      "user": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "birthDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "email": {
                "format": "email",
                "maxLength": 256,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "faxNumber": {
                "maxLength": 100,
                "type": "string"
              },
              "firstName": {
                "maxLength": 50,
                "type": "string"
              },
              "imageId": {
                "type": "string"
              },
              "lastName": {
                "maxLength": 50,
                "type": "string"
              },
              "licenses": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "mobilePhoneNumber": {
                "maxLength": 100,
                "type": "string"
              },
              "phoneNumber": {
                "maxLength": 100,
                "type": "string"
              },
              "status": {
                "$ref": "#/components/schemas/baossUserStatus",
                "x-weclapp": {
                  "required": true
                }
              },
              "userRoles": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array"
              },
              "username": {
                "maxLength": 256,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "userRole": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "allPermissionsEnabled": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "includedUserRoles": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "permissions": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "validationError": {
        "description": "detail information on a validation error",
        "properties": {
          "allowed": {
            "description": "semantics are dependent on the concrete validation error.",
            "items": {
              "type": "string"
            },
            "title": "List of allowed values",
            "type": "array"
          },
          "detail": {
            "title": "(RFC7807) A human-readable explanation specific to this occurrence of the problem",
            "type": "string"
          },
          "instance": {
            "description": "In weclapp, this is the name of the affected parameter or the relative URI to the affected entity.",
            "title": "(RFC7807) A URI reference that identifies the specific occurrence of the problem",
            "type": "string"
          },
          "location": {
            "title": "The JsonPath location of the affected entity property.",
            "type": "string"
          },
          "title": {
            "description": "This will not change from occurrence to occurrence of the problem",
            "title": "(RFC7807) A short, human-readable summary of the problem type",
            "type": "string",
            "x-weclapp": {
              "required": true
            }
          },
          "type": {
            "$ref": "#/components/schemas/validationErrorType",
            "description": "For the purposes of evaluating this value in code it is sufficient (and recommended) to only examine the part after the last \u0027/\u0027. The URI points to the corresponding section in the online API documentation.",
            "title": "(RFC7807) A URI reference [RFC3986] that identifies the problem type"
          }
        },
        "required": [
          "type",
          "title"
        ],
        "title": "validation error",
        "type": "object"
      },
      "validationErrorType": {
        "enum": [
          "/webapp/view/api/errors.html#!/validation/authorization",
          "/webapp/view/api/errors.html#!/validation/blocked",
          "/webapp/view/api/errors.html#!/validation/consistency",
          "/webapp/view/api/errors.html#!/validation/digits",
          "/webapp/view/api/errors.html#!/validation/duplicate",
          "/webapp/view/api/errors.html#!/validation/email",
          "/webapp/view/api/errors.html#!/validation/email_or_domain",
          "/webapp/view/api/errors.html#!/validation/empty",
          "/webapp/view/api/errors.html#!/validation/enum",
          "/webapp/view/api/errors.html#!/validation/future",
          "/webapp/view/api/errors.html#!/validation/greater_than",
          "/webapp/view/api/errors.html#!/validation/less_than",
          "/webapp/view/api/errors.html#!/validation/max",
          "/webapp/view/api/errors.html#!/validation/min",
          "/webapp/view/api/errors.html#!/validation/not_empty",
          "/webapp/view/api/errors.html#!/validation/past",
          "/webapp/view/api/errors.html#!/validation/pattern",
          "/webapp/view/api/errors.html#!/validation/reference",
          "/webapp/view/api/errors.html#!/validation/size"
        ],
        "type": "string"
      },
      "variantArticle": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "primaryArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "primaryArticleNumber": {
                "type": "string"
              },
              "variantArticleName": {
                "maxLength": 1000,
                "type": "string"
              },
              "variantArticleNumber": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "variants": {
                "items": {
                  "$ref": "#/components/schemas/variantArticleVariantWithoutReference"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      },
      "variantArticleAttribute": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "attributeOptions": {
                "items": {
                  "$ref": "#/components/schemas/variantArticleAttributeOption"
                },
                "type": "array"
              },
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "variantArticleAttributeOption": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "name": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "variantArticleVariant": {
        "allOf": [
          {
            "$ref": "#/components/schemas/variantArticleVariantWithoutReference"
          },
          {
            "properties": {
              "variantArticleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "variantArticle",
                  "required": true,
                  "service": "variantArticle"
                }
              },
              "variantArticleNumber": {
                "type": "string"
              }
            },
            "type": "object"
          }
        ]
      },
      "variantArticleVariantWithoutReference": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "attributeOptions": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "variantArticleAttribute",
                  "service": "variantArticleAttribute"
                }
              },
              "positionNumber": {
                "format": "int32",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "warehouse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "active": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "defaultConsolidationStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "defaultProductionStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "defaultReturnsStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "defaultStoragePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "service": "storagePlace"
                }
              },
              "directBookingInternalTransportReferenceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "internalTransportReference",
                  "service": "internalTransportReference"
                }
              },
              "loadingEquipmentStoragePlace": {
                "$ref": "#/components/schemas/minimalStoragePlace"
              },
              "name": {
                "maxLength": 150,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "shortIdentifier": {
                "maxLength": 1000,
                "type": "string"
              },
              "standard": {
                "type": "boolean"
              },
              "transitStoragePlace": {
                "$ref": "#/components/schemas/minimalStoragePlace"
              },
              "warehouseType": {
                "$ref": "#/components/schemas/storeType",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "warehouseQuantity": {
        "properties": {
          "quantity": {
            "format": "decimal",
            "type": "string"
          },
          "warehouseId": {
            "type": "string",
            "x-weclapp": {
              "entity": "warehouse",
              "service": "warehouse"
            }
          }
        },
        "type": "object"
      },
      "warehouseStock": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "articleNumber": {
                "type": "string"
              },
              "batchNumber": {
                "type": "string"
              },
              "batchNumberId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "batchNumber",
                  "service": "batchNumber"
                }
              },
              "internalTransportReferenceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "internalTransportReference",
                  "service": "internalTransportReference"
                }
              },
              "packagingUnits": {
                "items": {
                  "$ref": "#/components/schemas/packagingUnit"
                },
                "type": "array"
              },
              "picks": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "pick",
                  "service": "pick"
                }
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string"
              },
              "salesOrderItemId": {
                "type": "string"
              },
              "serialNumbers": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "serialNumber",
                  "service": "serialNumber"
                }
              },
              "storagePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "required": true,
                  "service": "storagePlace"
                }
              },
              "warehouseId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "warehouse",
                  "required": true,
                  "service": "warehouse"
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "warehouseStockMovement": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntityWithCustomAttributes"
          },
          {
            "properties": {
              "articleId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "article",
                  "required": true,
                  "service": "article"
                }
              },
              "batchNumber": {
                "type": "string"
              },
              "batchNumberId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "batchNumber",
                  "service": "batchNumber"
                }
              },
              "costCenterId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "costCenter",
                  "service": "costCenter"
                }
              },
              "incomingGoodsItemId": {
                "type": "string"
              },
              "internalTransportReferenceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "internalTransportReference",
                  "service": "internalTransportReference"
                }
              },
              "movementNote": {
                "maxLength": 255,
                "type": "string"
              },
              "movementNumber": {
                "maxLength": 30,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "postingDate": {
                "format": "timestamp",
                "type": "integer",
                "x-weclapp": {
                  "required": true
                }
              },
              "productionOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "productionOrder",
                  "service": "productionOrder"
                }
              },
              "quantity": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "salesOrderItemId": {
                "type": "string"
              },
              "serialNumbers": {
                "items": {
                  "$ref": "#/components/schemas/onlyId"
                },
                "type": "array",
                "x-weclapp": {
                  "entity": "serialNumber",
                  "service": "serialNumber"
                }
              },
              "shipmentItemId": {
                "type": "string"
              },
              "stockMovementType": {
                "$ref": "#/components/schemas/stockMovementType",
                "x-weclapp": {
                  "required": true
                }
              },
              "storagePlaceId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "storagePlace",
                  "required": true,
                  "service": "storagePlace"
                }
              },
              "transportationOrderId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "transportationOrder",
                  "service": "transportationOrder"
                }
              },
              "userId": {
                "type": "string",
                "x-weclapp": {
                  "entity": "user",
                  "required": true,
                  "service": "user"
                }
              },
              "valuationPrice": {
                "format": "decimal",
                "pattern": "^([0-9]{1,13})([.][0-9]{1,5})?$",
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "webhook": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "atCreate": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "atDelete": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "atUpdate": {
                "type": "boolean",
                "x-weclapp": {
                  "required": true
                }
              },
              "deactivatedDate": {
                "format": "timestamp",
                "type": "integer"
              },
              "entityName": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "errorMessage": {
                "maxLength": 255,
                "type": "string"
              },
              "requestMethod": {
                "$ref": "#/components/schemas/webhookRequestMethod",
                "x-weclapp": {
                  "required": true
                }
              },
              "url": {
                "maxLength": 1000,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              }
            },
            "type": "object"
          }
        ]
      },
      "webhookRequestMethod": {
        "enum": [
          "GET",
          "POST"
        ],
        "type": "string"
      },
      "weclappOs": {
        "allOf": [
          {
            "$ref": "#/components/schemas/abstractEntity"
          },
          {
            "properties": {
              "description": {
                "maxLength": 255,
                "type": "string"
              },
              "hardwareId": {
                "maxLength": 255,
                "type": "string",
                "x-weclapp": {
                  "required": true
                }
              },
              "name": {
                "maxLength": 1000,
                "type": "string"
              },
              "printerNames": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          }
        ]
      }
    },
    "securitySchemes": {
      "api-token": {
        "in": "header",
        "name": "AuthenticationToken",
        "type": "apiKey"
      }
    }
  }
}