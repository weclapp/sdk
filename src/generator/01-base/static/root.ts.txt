export type RequestPayloadMethod = 'GET' | 'HEAD' | 'POST' | 'PUT' | 'DELETE'  | 'CONNECT' | 'OPTIONS' | 'TRACE' | 'PATCH';

export interface RequestPayload {
    method?: RequestPayloadMethod;
    query?: Record<string, any>;
    body?: any;
    unwrap?: boolean;
    forceBlob?: boolean;
}

export interface ServiceConfig {

    // Your API-Key, this is optional in the sense of if you omit this, and you're in a browser, the
    // cookie-authentication (include-credentials) will be used.
    key?: string;

    // Your domain, if omitted location.host will be used.
    host?: string;

    // If you want to use https, defaults to true.
    secure?: boolean;

    // Optional request/response interceptors.
    interceptors?: {

        // Takes the generated request, you can either return a new request,
        // a response (which will be taken as "the" response) or nothing.
        // The payload contains the raw input generated by the SDK.
        request?: (request: Request, payload: RequestPayload) => Request | Response | void | Promise<Request | Response | void>;

        // Takes the response. This can either be the one from the server or an
        // artificially-crafted one by the request interceptor.
        response?: (response: Response) => Response | void | Promise<Response | void>;
    };
}

let globalConfig: ServiceConfig | undefined;
export const getGlobalConfig = (): ServiceConfig | undefined => globalConfig;
export const setGlobalConfig = (cfg?: ServiceConfig) => globalConfig = cfg;

export const raw = async (
    cfg: ServiceConfig | undefined = globalConfig,
    endpoint: string,
    payload: RequestPayload = {}
): Promise<any> => {
    if (!cfg) {
        throw new Error(`ServiceConfig missing.`);
    }

    cfg = {
        ...globalConfig, ...cfg,
        interceptors: {...globalConfig?.interceptors, ...cfg?.interceptors}
    };

    const isBinaryData = payload.body instanceof resolveBinaryObject();
    const contentType = isBinaryData ? 'octet-stream' : 'json';
    const params = new URLSearchParams(Object.entries(payload.query ?? {}).filter(v => v[1] !== undefined));
    const protocol = (cfg.secure ?? true) ? 'https' : 'http';

    const interceptRequest = cfg.interceptors?.request ?? (v => v);
    const interceptResponse = cfg.interceptors?.response ?? (v => v);

    let host = cfg.host;
    if (!host && typeof location !== 'undefined') {
        host = location.host;
    }

    if (!host) {
        throw new Error('Please specify a domain');
    }

    const request = new Request(`${protocol}://${host}/webapp/api/v1${endpoint}?${params}`, {
        ...(payload.body && {
            body: isBinaryData
                ? payload.body
                : JSON.stringify(payload.body, (key, value) => value === undefined ? null : value)
        }),
        ...(!cfg.key && {credentials: 'same-origin'}),
        method: payload.method ?? 'get',
        headers: {
            'Content-Type': `application/${contentType}`,
            'Accept': 'application/json',
            ...(cfg.key && {'AuthenticationToken': cfg.key})
        }
    });

    let res = await interceptRequest(request, payload) ?? request;
    if (!(res instanceof Response)) {
        res = await fetch(res);
    }

    res = await interceptResponse(res) ?? res;
    const data = !payload.forceBlob && res.headers?.get('content-type')?.includes('application/json') ?
        await res.json() : await res.blob();

    // Check if response was successful
    if (!res.ok) {
        throw data;
    }

    return payload.unwrap ? data.result : data;
};

const _count = (
    cfg: ServiceConfig | undefined,
    endpoint: string,
    query?: CountQuery<any> & {params?: Record<any, any>}
) => wrapResponse(() => raw(cfg, endpoint, {
    unwrap: true,
    query: {
        ...flattenFilter(query?.filter),
        ...flattenOrFilter(query?.or),
        ...query?.params
    }
}));

const _some = (
    cfg: ServiceConfig | undefined,
    endpoint: string,
    query?: SomeQuery<any, any, any, any> & {params?: Record<any, any>}
) => wrapResponse(() => raw(cfg, endpoint, {
        query: {
            serializeNulls: query?.serializeNulls,
            properties: query?.select ? flattenSelect(query.select).join(',') : undefined,
            includeReferencedEntities: query?.include ? Object.keys(query.include).join(',') : undefined,
            ...flattenOrFilter(query?.or),
            ...flattenFilter(query?.filter),
            ...flattenSort(query?.sort),
            ...query?.params,
            ...query?.pagination
        }
    }).then(data => ({entities: data.result, references: data.referencedEntities ?? {}}))
);

const _remove = (
    cfg: ServiceConfig | undefined,
    endpoint: string
) => wrapResponse(() => raw(cfg, endpoint, {
    method: 'DELETE'
}).then(() => undefined));

const _create = (
    cfg: ServiceConfig | undefined,
    endpoint: string,
    data: any
) => wrapResponse(() => raw(cfg, endpoint, {
    method: 'POST',
    body: data
}));

const _update = (
    cfg: ServiceConfig | undefined,
    endpoint: string,
    data: any,
    {ignoreMissingProperties = true}: UpdateQuery = {}
) => wrapResponse(() => raw(cfg, endpoint, {
    method: 'PUT',
    body: data,
    query: {ignoreMissingProperties}
}));

const _unique = (
    cfg: ServiceConfig | undefined,
    endpoint: string,
    query?: UniqueQuery
) => wrapResponse(() => raw(cfg, endpoint, {query}));

const _generic = (
    cfg: ServiceConfig | undefined,
    method: RequestPayloadMethod,
    endpoint: string,
    payload?: GenericQuery<any, any>,
    forceBlob?: boolean
) => wrapResponse(() => raw(cfg, endpoint, {
    method,
    forceBlob,
    body: payload?.body,
    query: payload?.params
}));
