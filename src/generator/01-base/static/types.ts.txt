export type DeepPartial<T> = T extends object
  ? {
      [P in keyof T]?: DeepPartial<T[P]>;
    }
  : T;

export type Sort<T> = {
  [K in keyof T]?: {
    [V in keyof T]?: V extends K
      ? T[V] extends Array<infer U> | undefined
        ? U extends object
          ? Sort<U>
          : never
        : T[V] extends object | undefined
          ? Sort<T[V]>
          : 'asc' | 'desc'
      : never;
  };
}[keyof T];

export type CustomAttributeFilter = {
  [K in number]:| string | number | boolean | { id: string } | { entityName: string; entityId: string };
};

export type QuerySelect<T> = {
  [P in keyof T]?: T[P] extends Array<infer U> | undefined
    ? QuerySelect<U> | boolean
    : T[P] extends Record<any, any> | undefined
      ? QuerySelect<T[P]> | boolean
      : boolean;
};

export type Select<T, Q extends QuerySelect<T> | undefined> =
  Q extends QuerySelect<T>
    ? {
        // Filter out excluded properties beforehand
        [P in keyof T as Q[P] extends boolean ? P : Q[P] extends object ? P : never]: // Property
        Q[P] extends true
          ? T[P]
          : // Array
            T[P] extends Array<infer U>
            ? Select<U, Q[P] & QuerySelect<any>>[]
            : // Object
              T[P] extends Record<any, any>
              ? Select<T[P], Q[P] & QuerySelect<any>>
              : never;
      }
    : undefined;

export type MapKeys<T, S extends Record<keyof T, string>> = {
  [K in keyof T as S[K]]: T[K];
};

export type ValueOf<T> = T[keyof T];

export type Pagination = {
  page: number;
  pageSize: number;
};

export type UniqueQuery = {
  serializeNulls?: boolean;
};

export type SomeQueryReturn<E, R, P> = {
  entities: E[];
  references?: R;
  properties?: P[];
};

export type GenericQuery<P, B> = {
  params?: P;
  body?: B;
};

export type UpdateQuery = {
  ignoreMissingProperties?: boolean;
  dryRun?: boolean;
};

export type RemoveQuery = {
  dryRun?: boolean;
};

export type WEntityPropertyMeta =
  | {
      type: 'string';
      format?: 'decimal' | 'html' | 'email' | 'password';
      maxLength?: number;
      pattern?: string;
      entity?: WEntity;
      service?: WService;
    }
  | {
      type: 'integer';
      format: 'int32' | 'int64' | 'duration' | 'date' | 'timestamp';
    }
  | { type: 'array'; format: 'reference'; entity: WEntity; service?: WService }
  | { type: 'array'; format: 'reference'; enum: WEnum }
  | { type: 'array'; format: 'string' }
  | { type: 'number'; format: 'double' }
  | { type: 'reference'; entity: WEntity }
  | { type: 'reference'; enum: WEnum }
  | { type: 'boolean' }
  | { type: 'object' };
