export type DeepPartial<T> = T extends object ? {
    [P in keyof T]?: DeepPartial<T[P]>;
} : T;

// Filter properties
export type EqualityOperators = 'EQ' | 'NE';
export type ComparisonOperators = 'LT' | 'GT' | 'LE' | 'GE' | 'LIKE' | 'ILIKE' | 'NOT_LIKE' | 'NOT_ILIKE';
export type ArrayOperators = 'IN' | 'NOT_IN';
export type Operator = EqualityOperators | ComparisonOperators | ArrayOperators;

export type MapOperators<T> = { [K in EqualityOperators]?: T | null; } &
    { [K in ComparisonOperators]?: T; } &
    { [K in ArrayOperators]?: T[]; };

export type QueryFilter<T> = {
    [P in keyof T]?:
        T[P] extends Array<infer U> | undefined ?
            U extends Record<any, any> ? QueryFilter<U> : MapOperators<U> :
                T[P] extends Record<any, any> | undefined ? QueryFilter<T[P]> : MapOperators<T[P]>;
};

export type Sort<T> = {
    [K in keyof T]?: {
        [V in keyof T]?:
            V extends K ?
                T[V] extends Array<infer U> | undefined ?
                    U extends object ?
                        Sort<U> : never :
                            T[V] extends object | undefined ?
                                Sort<T[V]> : 'asc' | 'desc' : never;
    };
}[keyof T];

// Select properties
export type CustomAttributeFilter = {
    [K in number]: string | number | boolean |
    {id: string;} |
    {entityName: string; entityId: string;};
}

export type QuerySelect<T> = {
    [P in keyof T]?:
        T[P] extends Array<infer U> | undefined ? (QuerySelect<U> | boolean) :
            T[P] extends Record<any, any> | undefined ? (QuerySelect<T[P]> | boolean) : boolean;
}

export type Select<T, Q extends (QuerySelect<T> | undefined)> = Q extends QuerySelect<T> ? {

    // Filter out excluded properties beforehand
    [P in keyof T as Q[P] extends boolean ? P : Q[P] extends object ? P : never]:

    // Property
    Q[P] extends true ? T[P] :

        // Array
        T[P] extends Array<infer U> ? Select<U, Q[P] & QuerySelect<any>>[] :

            // Object
            T[P] extends Record<any, any> ? Select<T[P], Q[P] & QuerySelect<any>> : never
} : undefined;

export type MapKeys<T, S extends Record<keyof T, string>> = {
    [K in keyof T as S[K]]: T[K];
};

// Endpoint configurations
export type CountQuery<F> = {
    filter?: QueryFilter<F>;
    or?: (QueryFilter<F> & CustomAttributeFilter)[];
};

export type Pagination = {
    page: number;
    pageSize: number;
};

export type SomeQuery<
    E, // Entity
    F, // Entity filter
    I extends (QuerySelect<any> | undefined), // Select for referenced entities
    S extends (QuerySelect<any> | undefined) // Select for entity properties
> = {
    serializeNulls?: boolean;
    include?: I;
    filter?: QueryFilter<F> & CustomAttributeFilter;
    select?: S;
    or?: (QueryFilter<F> & CustomAttributeFilter)[];
    sort?: Sort<E>[];
    pagination?: Pagination;
};

export type UniqueQuery = {
    serializeNulls?: boolean;
}

export type SomeQueryReturn<
    E, // Entity
    R, // Map of referenced-entity names to the type
    M, // Map of referenced-entity-id names to their entity name
    I extends (QuerySelect<any> | undefined), // Select for referenced entities
    S extends (QuerySelect<any> | undefined) // Select for entity properties
> = {
    entities: (S extends QuerySelect<E> ? Select<E, S> : E)[];
    references: I extends QuerySelect<R> ? Partial<MapKeys<Select<R, I>, M & Record<any, any>>> : {};
};

export type GenericQuery<P, B> = {
    params?: P;
    body?: B;
};

export type UpdateQuery = {
    ignoreMissingProperties?: boolean;
}

// Entity meta types
export type WEntityPropertyEntity = WEntity | Uncapitalize<WEnum>;
export type WEntityPropertyMeta = { service?: WService; entity?: WEntityPropertyEntity; } & (
    { type: 'integer'; format: 'int32' | 'int64' | 'duration' | 'date' | 'date-time'; } |
    { type: 'number'; format: 'double'; } |
    { type: 'boolean'; format?: 'boolean'; } |
    { type: 'string'; format?: 'decimal' | 'html'; } |
    { type: 'array'; } |
    { type: 'object'; } |
    { type: 'reference'; entity: WEntityPropertyEntity; } |
    { type?: never; format?: never; }
);

// Utils
const equality: string[] = ['EQ', 'NE'];
const simple: string[] = [...equality, 'LT', 'GT', 'LE', 'GE', 'LIKE', 'NOT_LIKE', 'ILIKE', 'NOT_ILIKE'];
const array: string[] = ['IN', 'NOT_IN'];
const filterMap: Record<Operator, string> = {
    EQ: 'eq',
    NE: 'ne',
    LT: 'lt',
    GT: 'gt',
    LE: 'le',
    GE: 'ge',
    LIKE: 'like',
    NOT_LIKE: 'notlike',
    ILIKE: 'ilike',
    NOT_ILIKE: 'notilike',
    IN: 'in',
    NOT_IN: 'notin'
};

const flattenCustomAttributes = (obj: CustomAttributeFilter = {}): [string, string][] => {
    const entries: [string, string][] = [];

    for (const [id, filter] of Object.entries(obj)) {
        const key = `customAttribute${id}`;

        if (typeof filter === 'object') {
            for (const [prop, value] of Object.entries(filter)) {
                entries.push([`${key}.${prop}-eq`, String(value)]);
            }
        } else if (filter !== undefined) {
            entries.push([`${key}-eq`, String(filter)]);
        }
    }

    return entries;
};

const flatten = (obj: QueryFilter<any> = {}): [string, string][] => {
    const entries: [string, string][] = [];

    for (const [prop, propValue] of Object.entries(obj)) {
        for (const [filter, value] of Object.entries(propValue as object)) {
            if (value === undefined) continue;

            if (simple.includes(filter)) {
                if (value === null && equality.includes(filter)) {
                    entries.push([`${prop}-${filter === 'EQ' ? 'null' : 'notnull'}`, '']);
                } else {
                    entries.push([`${prop}-${filterMap[filter as Operator]}`, value]);
                }
            } else if (array.includes(filter)) {
                entries.push([
                    `${prop}-${filterMap[filter as Operator]}`,
                    `[${value.map((v: string | number) => typeof v === 'string' ? `"${v}"` : v)}]`
                ]);
            } else {
                entries.push(
                    ...flatten(propValue as QueryFilter<any>)
                        .map(v => [`${prop}.${v[0]}`, v[1]]) as [string, string][]
                );
                break;
            }
        }
    }

    return entries;
};

const flattenFilter = (obj: QueryFilter<any> = {}): Record<string, string> => {
    const filter: [string, any][] = [], customAttributes: [string, any][] = [];

    Object.entries(obj).forEach(value => {
        (value[0].match(/^\d+$/) ? customAttributes : filter).push(value);
    });

    return Object.fromEntries([
        ...flatten(Object.fromEntries(filter)),
        ...flattenCustomAttributes(Object.fromEntries(customAttributes) as CustomAttributeFilter)
    ]);
};

const flattenOrFilter = (obj: QueryFilter<any>[] = []): Record<string, string> => {
    const entries: [string, any][] = [];

    for (let i = 0; i < obj.length; i++) {
        entries.push(
            ...flatten(obj[i])
                .map(v => [`or${i || ''}-${v[0]}`, v[1]]) as [string, string][]
        );
    }

    return Object.fromEntries(entries);
};

const flattenSelect = (obj: Select<any, any> = {}): string[] => {
    const entries: string[] = [];

    for (const [prop, value] of Object.entries(obj)) {
        if (typeof value === 'object' && value) {
            entries.push(...flattenSelect(value).map(v => `${prop}.${v}`));
        } else if (value) {
            entries.push(prop);
        }
    }

    return entries;
};

export const flattenSort = (obj: Sort<any>[] = []): {sort?: string} => {
    const flatten = (obj: Sort<any>, base = ''): string | undefined => {
        const [key, value] = Object.entries(obj ?? {})[0] ?? [];

        if (key && value) {
            const path = base + key;

            if (typeof value === 'object') {
                return flatten(value, path ? `${path}.` : '');
            } else if (['asc', 'desc'].includes(value)) {
                return `${value === 'desc' ? '-' : ''}${path}`;
            }
        }

        return undefined;
    };

    const sorts = obj.map(v => flatten(v)).filter(Boolean);
    return sorts.length ? {sort: sorts.join(',')} : {};
};
